
Tx_Rx_Raw_Data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106cc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  08010810  08010810  00011810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011498  08011498  000172d8  2**0
                  CONTENTS
  4 .ARM          00000008  08011498  08011498  00012498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080114a0  080114a0  000172d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080114a0  080114a0  000124a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080114a4  080114a4  000124a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000042d8  20000000  080114a8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a40  200042d8  08015780  000172d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008d18  08015780  00017d18  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000172d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024e06  00000000  00000000  00017302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065dc  00000000  00000000  0003c108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c8  00000000  00000000  000426e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000194b  00000000  00000000  000448b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250d2  00000000  00000000  000461fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026008  00000000  00000000  0006b2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c806b  00000000  00000000  000912d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159340  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009964  00000000  00000000  00159384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00162ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200042d8 	.word	0x200042d8
 800015c:	00000000 	.word	0x00000000
 8000160:	080107f4 	.word	0x080107f4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200042dc 	.word	0x200042dc
 800017c:	080107f4 	.word	0x080107f4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	@ 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__gesf2>:
 8000e14:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000e18:	e006      	b.n	8000e28 <__cmpsf2+0x4>
 8000e1a:	bf00      	nop

08000e1c <__lesf2>:
 8000e1c:	f04f 0c01 	mov.w	ip, #1
 8000e20:	e002      	b.n	8000e28 <__cmpsf2+0x4>
 8000e22:	bf00      	nop

08000e24 <__cmpsf2>:
 8000e24:	f04f 0c01 	mov.w	ip, #1
 8000e28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e2c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e38:	bf18      	it	ne
 8000e3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e3e:	d011      	beq.n	8000e64 <__cmpsf2+0x40>
 8000e40:	b001      	add	sp, #4
 8000e42:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e46:	bf18      	it	ne
 8000e48:	ea90 0f01 	teqne	r0, r1
 8000e4c:	bf58      	it	pl
 8000e4e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e52:	bf88      	it	hi
 8000e54:	17c8      	asrhi	r0, r1, #31
 8000e56:	bf38      	it	cc
 8000e58:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e5c:	bf18      	it	ne
 8000e5e:	f040 0001 	orrne.w	r0, r0, #1
 8000e62:	4770      	bx	lr
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	d102      	bne.n	8000e70 <__cmpsf2+0x4c>
 8000e6a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e6e:	d105      	bne.n	8000e7c <__cmpsf2+0x58>
 8000e70:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e74:	d1e4      	bne.n	8000e40 <__cmpsf2+0x1c>
 8000e76:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e7a:	d0e1      	beq.n	8000e40 <__cmpsf2+0x1c>
 8000e7c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <__aeabi_cfrcmple>:
 8000e84:	4684      	mov	ip, r0
 8000e86:	4608      	mov	r0, r1
 8000e88:	4661      	mov	r1, ip
 8000e8a:	e7ff      	b.n	8000e8c <__aeabi_cfcmpeq>

08000e8c <__aeabi_cfcmpeq>:
 8000e8c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e8e:	f7ff ffc9 	bl	8000e24 <__cmpsf2>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	bf48      	it	mi
 8000e96:	f110 0f00 	cmnmi.w	r0, #0
 8000e9a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e9c <__aeabi_fcmpeq>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff fff4 	bl	8000e8c <__aeabi_cfcmpeq>
 8000ea4:	bf0c      	ite	eq
 8000ea6:	2001      	moveq	r0, #1
 8000ea8:	2000      	movne	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_fcmplt>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffea 	bl	8000e8c <__aeabi_cfcmpeq>
 8000eb8:	bf34      	ite	cc
 8000eba:	2001      	movcc	r0, #1
 8000ebc:	2000      	movcs	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_fcmple>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffe0 	bl	8000e8c <__aeabi_cfcmpeq>
 8000ecc:	bf94      	ite	ls
 8000ece:	2001      	movls	r0, #1
 8000ed0:	2000      	movhi	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_fcmpge>:
 8000ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000edc:	f7ff ffd2 	bl	8000e84 <__aeabi_cfrcmple>
 8000ee0:	bf94      	ite	ls
 8000ee2:	2001      	movls	r0, #1
 8000ee4:	2000      	movhi	r0, #0
 8000ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eea:	bf00      	nop

08000eec <__aeabi_fcmpgt>:
 8000eec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef0:	f7ff ffc8 	bl	8000e84 <__aeabi_cfrcmple>
 8000ef4:	bf34      	ite	cc
 8000ef6:	2001      	movcc	r0, #1
 8000ef8:	2000      	movcs	r0, #0
 8000efa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000efe:	bf00      	nop

08000f00 <__aeabi_uldivmod>:
 8000f00:	b953      	cbnz	r3, 8000f18 <__aeabi_uldivmod+0x18>
 8000f02:	b94a      	cbnz	r2, 8000f18 <__aeabi_uldivmod+0x18>
 8000f04:	2900      	cmp	r1, #0
 8000f06:	bf08      	it	eq
 8000f08:	2800      	cmpeq	r0, #0
 8000f0a:	bf1c      	itt	ne
 8000f0c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000f10:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f14:	f000 b96a 	b.w	80011ec <__aeabi_idiv0>
 8000f18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f20:	f000 f806 	bl	8000f30 <__udivmoddi4>
 8000f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4770      	bx	lr

08000f30 <__udivmoddi4>:
 8000f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f34:	9d08      	ldr	r5, [sp, #32]
 8000f36:	460c      	mov	r4, r1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d14e      	bne.n	8000fda <__udivmoddi4+0xaa>
 8000f3c:	4694      	mov	ip, r2
 8000f3e:	458c      	cmp	ip, r1
 8000f40:	4686      	mov	lr, r0
 8000f42:	fab2 f282 	clz	r2, r2
 8000f46:	d962      	bls.n	800100e <__udivmoddi4+0xde>
 8000f48:	b14a      	cbz	r2, 8000f5e <__udivmoddi4+0x2e>
 8000f4a:	f1c2 0320 	rsb	r3, r2, #32
 8000f4e:	4091      	lsls	r1, r2
 8000f50:	fa20 f303 	lsr.w	r3, r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	4319      	orrs	r1, r3
 8000f5a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f62:	fa1f f68c 	uxth.w	r6, ip
 8000f66:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb04 f106 	mul.w	r1, r4, r6
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d90a      	bls.n	8000f94 <__udivmoddi4+0x64>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000f86:	f080 8112 	bcs.w	80011ae <__udivmoddi4+0x27e>
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	f240 810f 	bls.w	80011ae <__udivmoddi4+0x27e>
 8000f90:	3c02      	subs	r4, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1a59      	subs	r1, r3, r1
 8000f96:	fa1f f38e 	uxth.w	r3, lr
 8000f9a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f9e:	fb07 1110 	mls	r1, r7, r0, r1
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f606 	mul.w	r6, r0, r6
 8000faa:	429e      	cmp	r6, r3
 8000fac:	d90a      	bls.n	8000fc4 <__udivmoddi4+0x94>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000fb6:	f080 80fc 	bcs.w	80011b2 <__udivmoddi4+0x282>
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	f240 80f9 	bls.w	80011b2 <__udivmoddi4+0x282>
 8000fc0:	4463      	add	r3, ip
 8000fc2:	3802      	subs	r0, #2
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000fca:	2100      	movs	r1, #0
 8000fcc:	b11d      	cbz	r5, 8000fd6 <__udivmoddi4+0xa6>
 8000fce:	40d3      	lsrs	r3, r2
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d905      	bls.n	8000fea <__udivmoddi4+0xba>
 8000fde:	b10d      	cbz	r5, 8000fe4 <__udivmoddi4+0xb4>
 8000fe0:	e9c5 0100 	strd	r0, r1, [r5]
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e7f5      	b.n	8000fd6 <__udivmoddi4+0xa6>
 8000fea:	fab3 f183 	clz	r1, r3
 8000fee:	2900      	cmp	r1, #0
 8000ff0:	d146      	bne.n	8001080 <__udivmoddi4+0x150>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d302      	bcc.n	8000ffc <__udivmoddi4+0xcc>
 8000ff6:	4290      	cmp	r0, r2
 8000ff8:	f0c0 80f0 	bcc.w	80011dc <__udivmoddi4+0x2ac>
 8000ffc:	1a86      	subs	r6, r0, r2
 8000ffe:	eb64 0303 	sbc.w	r3, r4, r3
 8001002:	2001      	movs	r0, #1
 8001004:	2d00      	cmp	r5, #0
 8001006:	d0e6      	beq.n	8000fd6 <__udivmoddi4+0xa6>
 8001008:	e9c5 6300 	strd	r6, r3, [r5]
 800100c:	e7e3      	b.n	8000fd6 <__udivmoddi4+0xa6>
 800100e:	2a00      	cmp	r2, #0
 8001010:	f040 8090 	bne.w	8001134 <__udivmoddi4+0x204>
 8001014:	eba1 040c 	sub.w	r4, r1, ip
 8001018:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800101c:	fa1f f78c 	uxth.w	r7, ip
 8001020:	2101      	movs	r1, #1
 8001022:	fbb4 f6f8 	udiv	r6, r4, r8
 8001026:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800102a:	fb08 4416 	mls	r4, r8, r6, r4
 800102e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001032:	fb07 f006 	mul.w	r0, r7, r6
 8001036:	4298      	cmp	r0, r3
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x11c>
 800103a:	eb1c 0303 	adds.w	r3, ip, r3
 800103e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8001042:	d202      	bcs.n	800104a <__udivmoddi4+0x11a>
 8001044:	4298      	cmp	r0, r3
 8001046:	f200 80cd 	bhi.w	80011e4 <__udivmoddi4+0x2b4>
 800104a:	4626      	mov	r6, r4
 800104c:	1a1c      	subs	r4, r3, r0
 800104e:	fa1f f38e 	uxth.w	r3, lr
 8001052:	fbb4 f0f8 	udiv	r0, r4, r8
 8001056:	fb08 4410 	mls	r4, r8, r0, r4
 800105a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800105e:	fb00 f707 	mul.w	r7, r0, r7
 8001062:	429f      	cmp	r7, r3
 8001064:	d908      	bls.n	8001078 <__udivmoddi4+0x148>
 8001066:	eb1c 0303 	adds.w	r3, ip, r3
 800106a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800106e:	d202      	bcs.n	8001076 <__udivmoddi4+0x146>
 8001070:	429f      	cmp	r7, r3
 8001072:	f200 80b0 	bhi.w	80011d6 <__udivmoddi4+0x2a6>
 8001076:	4620      	mov	r0, r4
 8001078:	1bdb      	subs	r3, r3, r7
 800107a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800107e:	e7a5      	b.n	8000fcc <__udivmoddi4+0x9c>
 8001080:	f1c1 0620 	rsb	r6, r1, #32
 8001084:	408b      	lsls	r3, r1
 8001086:	fa22 f706 	lsr.w	r7, r2, r6
 800108a:	431f      	orrs	r7, r3
 800108c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001090:	fa04 f301 	lsl.w	r3, r4, r1
 8001094:	ea43 030c 	orr.w	r3, r3, ip
 8001098:	40f4      	lsrs	r4, r6
 800109a:	fa00 f801 	lsl.w	r8, r0, r1
 800109e:	0c38      	lsrs	r0, r7, #16
 80010a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010a4:	fbb4 fef0 	udiv	lr, r4, r0
 80010a8:	fa1f fc87 	uxth.w	ip, r7
 80010ac:	fb00 441e 	mls	r4, r0, lr, r4
 80010b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010b4:	fb0e f90c 	mul.w	r9, lr, ip
 80010b8:	45a1      	cmp	r9, r4
 80010ba:	fa02 f201 	lsl.w	r2, r2, r1
 80010be:	d90a      	bls.n	80010d6 <__udivmoddi4+0x1a6>
 80010c0:	193c      	adds	r4, r7, r4
 80010c2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80010c6:	f080 8084 	bcs.w	80011d2 <__udivmoddi4+0x2a2>
 80010ca:	45a1      	cmp	r9, r4
 80010cc:	f240 8081 	bls.w	80011d2 <__udivmoddi4+0x2a2>
 80010d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80010d4:	443c      	add	r4, r7
 80010d6:	eba4 0409 	sub.w	r4, r4, r9
 80010da:	fa1f f983 	uxth.w	r9, r3
 80010de:	fbb4 f3f0 	udiv	r3, r4, r0
 80010e2:	fb00 4413 	mls	r4, r0, r3, r4
 80010e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80010ee:	45a4      	cmp	ip, r4
 80010f0:	d907      	bls.n	8001102 <__udivmoddi4+0x1d2>
 80010f2:	193c      	adds	r4, r7, r4
 80010f4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80010f8:	d267      	bcs.n	80011ca <__udivmoddi4+0x29a>
 80010fa:	45a4      	cmp	ip, r4
 80010fc:	d965      	bls.n	80011ca <__udivmoddi4+0x29a>
 80010fe:	3b02      	subs	r3, #2
 8001100:	443c      	add	r4, r7
 8001102:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001106:	fba0 9302 	umull	r9, r3, r0, r2
 800110a:	eba4 040c 	sub.w	r4, r4, ip
 800110e:	429c      	cmp	r4, r3
 8001110:	46ce      	mov	lr, r9
 8001112:	469c      	mov	ip, r3
 8001114:	d351      	bcc.n	80011ba <__udivmoddi4+0x28a>
 8001116:	d04e      	beq.n	80011b6 <__udivmoddi4+0x286>
 8001118:	b155      	cbz	r5, 8001130 <__udivmoddi4+0x200>
 800111a:	ebb8 030e 	subs.w	r3, r8, lr
 800111e:	eb64 040c 	sbc.w	r4, r4, ip
 8001122:	fa04 f606 	lsl.w	r6, r4, r6
 8001126:	40cb      	lsrs	r3, r1
 8001128:	431e      	orrs	r6, r3
 800112a:	40cc      	lsrs	r4, r1
 800112c:	e9c5 6400 	strd	r6, r4, [r5]
 8001130:	2100      	movs	r1, #0
 8001132:	e750      	b.n	8000fd6 <__udivmoddi4+0xa6>
 8001134:	f1c2 0320 	rsb	r3, r2, #32
 8001138:	fa20 f103 	lsr.w	r1, r0, r3
 800113c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001140:	fa24 f303 	lsr.w	r3, r4, r3
 8001144:	4094      	lsls	r4, r2
 8001146:	430c      	orrs	r4, r1
 8001148:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800114c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001150:	fa1f f78c 	uxth.w	r7, ip
 8001154:	fbb3 f0f8 	udiv	r0, r3, r8
 8001158:	fb08 3110 	mls	r1, r8, r0, r3
 800115c:	0c23      	lsrs	r3, r4, #16
 800115e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001162:	fb00 f107 	mul.w	r1, r0, r7
 8001166:	4299      	cmp	r1, r3
 8001168:	d908      	bls.n	800117c <__udivmoddi4+0x24c>
 800116a:	eb1c 0303 	adds.w	r3, ip, r3
 800116e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001172:	d22c      	bcs.n	80011ce <__udivmoddi4+0x29e>
 8001174:	4299      	cmp	r1, r3
 8001176:	d92a      	bls.n	80011ce <__udivmoddi4+0x29e>
 8001178:	3802      	subs	r0, #2
 800117a:	4463      	add	r3, ip
 800117c:	1a5b      	subs	r3, r3, r1
 800117e:	b2a4      	uxth	r4, r4
 8001180:	fbb3 f1f8 	udiv	r1, r3, r8
 8001184:	fb08 3311 	mls	r3, r8, r1, r3
 8001188:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800118c:	fb01 f307 	mul.w	r3, r1, r7
 8001190:	42a3      	cmp	r3, r4
 8001192:	d908      	bls.n	80011a6 <__udivmoddi4+0x276>
 8001194:	eb1c 0404 	adds.w	r4, ip, r4
 8001198:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800119c:	d213      	bcs.n	80011c6 <__udivmoddi4+0x296>
 800119e:	42a3      	cmp	r3, r4
 80011a0:	d911      	bls.n	80011c6 <__udivmoddi4+0x296>
 80011a2:	3902      	subs	r1, #2
 80011a4:	4464      	add	r4, ip
 80011a6:	1ae4      	subs	r4, r4, r3
 80011a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011ac:	e739      	b.n	8001022 <__udivmoddi4+0xf2>
 80011ae:	4604      	mov	r4, r0
 80011b0:	e6f0      	b.n	8000f94 <__udivmoddi4+0x64>
 80011b2:	4608      	mov	r0, r1
 80011b4:	e706      	b.n	8000fc4 <__udivmoddi4+0x94>
 80011b6:	45c8      	cmp	r8, r9
 80011b8:	d2ae      	bcs.n	8001118 <__udivmoddi4+0x1e8>
 80011ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80011be:	eb63 0c07 	sbc.w	ip, r3, r7
 80011c2:	3801      	subs	r0, #1
 80011c4:	e7a8      	b.n	8001118 <__udivmoddi4+0x1e8>
 80011c6:	4631      	mov	r1, r6
 80011c8:	e7ed      	b.n	80011a6 <__udivmoddi4+0x276>
 80011ca:	4603      	mov	r3, r0
 80011cc:	e799      	b.n	8001102 <__udivmoddi4+0x1d2>
 80011ce:	4630      	mov	r0, r6
 80011d0:	e7d4      	b.n	800117c <__udivmoddi4+0x24c>
 80011d2:	46d6      	mov	lr, sl
 80011d4:	e77f      	b.n	80010d6 <__udivmoddi4+0x1a6>
 80011d6:	4463      	add	r3, ip
 80011d8:	3802      	subs	r0, #2
 80011da:	e74d      	b.n	8001078 <__udivmoddi4+0x148>
 80011dc:	4606      	mov	r6, r0
 80011de:	4623      	mov	r3, r4
 80011e0:	4608      	mov	r0, r1
 80011e2:	e70f      	b.n	8001004 <__udivmoddi4+0xd4>
 80011e4:	3e02      	subs	r6, #2
 80011e6:	4463      	add	r3, ip
 80011e8:	e730      	b.n	800104c <__udivmoddi4+0x11c>
 80011ea:	bf00      	nop

080011ec <__aeabi_idiv0>:
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop

080011f0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80011fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4313      	orrs	r3, r2
 8001206:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800120c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001214:	68fb      	ldr	r3, [r7, #12]
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001224:	2004      	movs	r0, #4
 8001226:	f7ff ffe3 	bl	80011f0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122a:	2001      	movs	r0, #1
 800122c:	f7ff ffe0 	bl	80011f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	200f      	movs	r0, #15
 8001236:	f001 fdb6 	bl	8002da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800123a:	200f      	movs	r0, #15
 800123c:	f001 fdcd 	bl	8002dda <HAL_NVIC_EnableIRQ>

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800124c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001250:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001252:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4313      	orrs	r3, r2
 800125a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800125c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001260:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001268:	68fb      	ldr	r3, [r7, #12]
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	2002      	movs	r0, #2
 800128a:	f7ff ffdb 	bl	8001244 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2004      	movs	r0, #4
 8001290:	f7ff ffd8 	bl	8001244 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	2001      	movs	r0, #1
 8001296:	f7ff ffd5 	bl	8001244 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 413a 	mov.w	r1, #47616	@ 0xba00
 80012a0:	4832      	ldr	r0, [pc, #200]	@ (800136c <MX_GPIO_Init+0xf8>)
 80012a2:	f002 fbfd 	bl	8003aa0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2138      	movs	r1, #56	@ 0x38
 80012aa:	4831      	ldr	r0, [pc, #196]	@ (8001370 <MX_GPIO_Init+0xfc>)
 80012ac:	f002 fbf8 	bl	8003aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80012b0:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 80012b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012be:	2302      	movs	r3, #2
 80012c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4619      	mov	r1, r3
 80012c6:	4829      	ldr	r0, [pc, #164]	@ (800136c <MX_GPIO_Init+0xf8>)
 80012c8:	f002 f9bc 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80012cc:	2338      	movs	r3, #56	@ 0x38
 80012ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4823      	ldr	r0, [pc, #140]	@ (8001370 <MX_GPIO_Init+0xfc>)
 80012e2:	f002 f9af 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80012e6:	2303      	movs	r3, #3
 80012e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fc:	f002 f9a2 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8001300:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001304:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4815      	ldr	r0, [pc, #84]	@ (800136c <MX_GPIO_Init+0xf8>)
 8001318:	f002 f994 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 800131c:	2340      	movs	r3, #64	@ 0x40
 800131e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001320:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001324:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001326:	2301      	movs	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4619      	mov	r1, r3
 800132e:	4810      	ldr	r0, [pc, #64]	@ (8001370 <MX_GPIO_Init+0xfc>)
 8001330:	f002 f988 	bl	8003644 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2006      	movs	r0, #6
 800133a:	f001 fd34 	bl	8002da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800133e:	2006      	movs	r0, #6
 8001340:	f001 fd4b 	bl	8002dda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2007      	movs	r0, #7
 800134a:	f001 fd2c 	bl	8002da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800134e:	2007      	movs	r0, #7
 8001350:	f001 fd43 	bl	8002dda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	2016      	movs	r0, #22
 800135a:	f001 fd24 	bl	8002da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800135e:	2016      	movs	r0, #22
 8001360:	f001 fd3b 	bl	8002dda <HAL_NVIC_EnableIRQ>

}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	48000400 	.word	0x48000400
 8001370:	48000800 	.word	0x48000800

08001374 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800137c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001384:	f023 0218 	bic.w	r2, r3, #24
 8001388:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4313      	orrs	r3, r2
 8001390:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
	...

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	@ 0x28
 80013a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a6:	f001 fbd7 	bl	8002b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013aa:	f000 f911 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ae:	f7ff ff61 	bl	8001274 <MX_GPIO_Init>
  MX_DMA_Init();
 80013b2:	f7ff ff35 	bl	8001220 <MX_DMA_Init>
  MX_SubGHz_Phy_Init();
 80013b6:	f00a fc16 	bl	800bbe6 <MX_SubGHz_Phy_Init>
//
//  Tx_Compressed_Timestamp(&TimestampPkt);
//  HAL_Delay(200);


  array_tx_complete = 0;
 80013ba:	4b74      	ldr	r3, [pc, #464]	@ (800158c <main+0x1ec>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
  //Create DataEntry
  DataEntry W1;
  W1.node_ID = nodeID_1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	713b      	strb	r3, [r7, #4]
  W1.data_name = dataName;
 80013c4:	2301      	movs	r3, #1
 80013c6:	717b      	strb	r3, [r7, #5]

  //compress raw data: (x values)
  compression_demo();
 80013c8:	f000 f95a 	bl	8001680 <compression_demo>

  //Compress all data
  W1.x_vals = compressed_x;
 80013cc:	4b70      	ldr	r3, [pc, #448]	@ (8001590 <main+0x1f0>)
 80013ce:	60bb      	str	r3, [r7, #8]
  W1.y_vals = compressed_y;
 80013d0:	4b70      	ldr	r3, [pc, #448]	@ (8001594 <main+0x1f4>)
 80013d2:	60fb      	str	r3, [r7, #12]
  W1.z_vals = compressed_z;
 80013d4:	4b70      	ldr	r3, [pc, #448]	@ (8001598 <main+0x1f8>)
 80013d6:	613b      	str	r3, [r7, #16]
  W1.r_vals = compressed_r;
 80013d8:	4b70      	ldr	r3, [pc, #448]	@ (800159c <main+0x1fc>)
 80013da:	617b      	str	r3, [r7, #20]
  W1.q_vals = compressed_q;
 80013dc:	4b70      	ldr	r3, [pc, #448]	@ (80015a0 <main+0x200>)
 80013de:	61bb      	str	r3, [r7, #24]
  W1.p_vals = compressed_p;
 80013e0:	4b70      	ldr	r3, [pc, #448]	@ (80015a4 <main+0x204>)
 80013e2:	61fb      	str	r3, [r7, #28]
//  elapsedTime = endTime - startTime;
//  APP_PRINTF("Test 7 elapsed: %d ms\r\n", elapsedTime)
//  HAL_Delay(300);
//
  //Tx Ouput Power Test
  startTime = HAL_GetTick();
 80013e4:	f000 fc64 	bl	8001cb0 <HAL_GetTick>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a6f      	ldr	r2, [pc, #444]	@ (80015a8 <main+0x208>)
 80013ec:	6013      	str	r3, [r2, #0]
  Tx_Compressed(W1.x_vals, compressed_size_bits_x, TYPE_X, 0 , 0 , 0);
 80013ee:	68b8      	ldr	r0, [r7, #8]
 80013f0:	4b6e      	ldr	r3, [pc, #440]	@ (80015ac <main+0x20c>)
 80013f2:	6819      	ldr	r1, [r3, #0]
 80013f4:	2300      	movs	r3, #0
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	2300      	movs	r3, #0
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2300      	movs	r3, #0
 80013fe:	2201      	movs	r2, #1
 8001400:	f00a ffae 	bl	800c360 <Tx_Compressed>
  endTime = HAL_GetTick();
 8001404:	f000 fc54 	bl	8001cb0 <HAL_GetTick>
 8001408:	4603      	mov	r3, r0
 800140a:	4a69      	ldr	r2, [pc, #420]	@ (80015b0 <main+0x210>)
 800140c:	6013      	str	r3, [r2, #0]
  elapsedTime = endTime - startTime;
 800140e:	4b68      	ldr	r3, [pc, #416]	@ (80015b0 <main+0x210>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4b65      	ldr	r3, [pc, #404]	@ (80015a8 <main+0x208>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	4a66      	ldr	r2, [pc, #408]	@ (80015b4 <main+0x214>)
 800141a:	6013      	str	r3, [r2, #0]
  APP_PRINTF("Test 8 elapsed: %d ms\r\n", elapsedTime)
 800141c:	4b65      	ldr	r3, [pc, #404]	@ (80015b4 <main+0x214>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	4b65      	ldr	r3, [pc, #404]	@ (80015b8 <main+0x218>)
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2000      	movs	r0, #0
 800142a:	f00c faef 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
  HAL_Delay(300);
 800142e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001432:	f000 fc51 	bl	8001cd8 <HAL_Delay>

  startTime = HAL_GetTick();
 8001436:	f000 fc3b 	bl	8001cb0 <HAL_GetTick>
 800143a:	4603      	mov	r3, r0
 800143c:	4a5a      	ldr	r2, [pc, #360]	@ (80015a8 <main+0x208>)
 800143e:	6013      	str	r3, [r2, #0]
  Tx_Compressed(W1.x_vals, compressed_size_bits_x, TYPE_X, 0 , 0 , 1);
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	4b5a      	ldr	r3, [pc, #360]	@ (80015ac <main+0x20c>)
 8001444:	6819      	ldr	r1, [r3, #0]
 8001446:	2301      	movs	r3, #1
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	2300      	movs	r3, #0
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2300      	movs	r3, #0
 8001450:	2201      	movs	r2, #1
 8001452:	f00a ff85 	bl	800c360 <Tx_Compressed>
  endTime = HAL_GetTick();
 8001456:	f000 fc2b 	bl	8001cb0 <HAL_GetTick>
 800145a:	4603      	mov	r3, r0
 800145c:	4a54      	ldr	r2, [pc, #336]	@ (80015b0 <main+0x210>)
 800145e:	6013      	str	r3, [r2, #0]
  elapsedTime = endTime - startTime;
 8001460:	4b53      	ldr	r3, [pc, #332]	@ (80015b0 <main+0x210>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b50      	ldr	r3, [pc, #320]	@ (80015a8 <main+0x208>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	4a52      	ldr	r2, [pc, #328]	@ (80015b4 <main+0x214>)
 800146c:	6013      	str	r3, [r2, #0]
  APP_PRINTF("Test 9 elapsed: %d ms\r\n", elapsedTime)
 800146e:	4b51      	ldr	r3, [pc, #324]	@ (80015b4 <main+0x214>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	4b51      	ldr	r3, [pc, #324]	@ (80015bc <main+0x21c>)
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2000      	movs	r0, #0
 800147c:	f00c fac6 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
  HAL_Delay(300);
 8001480:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001484:	f000 fc28 	bl	8001cd8 <HAL_Delay>


  startTime = HAL_GetTick();
 8001488:	f000 fc12 	bl	8001cb0 <HAL_GetTick>
 800148c:	4603      	mov	r3, r0
 800148e:	4a46      	ldr	r2, [pc, #280]	@ (80015a8 <main+0x208>)
 8001490:	6013      	str	r3, [r2, #0]
  Tx_Compressed(W1.x_vals, compressed_size_bits_x, TYPE_X, 0 , 0 , 2);
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	4b45      	ldr	r3, [pc, #276]	@ (80015ac <main+0x20c>)
 8001496:	6819      	ldr	r1, [r3, #0]
 8001498:	2302      	movs	r3, #2
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	2300      	movs	r3, #0
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2300      	movs	r3, #0
 80014a2:	2201      	movs	r2, #1
 80014a4:	f00a ff5c 	bl	800c360 <Tx_Compressed>
  endTime = HAL_GetTick();
 80014a8:	f000 fc02 	bl	8001cb0 <HAL_GetTick>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a40      	ldr	r2, [pc, #256]	@ (80015b0 <main+0x210>)
 80014b0:	6013      	str	r3, [r2, #0]
  elapsedTime = endTime - startTime;
 80014b2:	4b3f      	ldr	r3, [pc, #252]	@ (80015b0 <main+0x210>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b3c      	ldr	r3, [pc, #240]	@ (80015a8 <main+0x208>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4a3d      	ldr	r2, [pc, #244]	@ (80015b4 <main+0x214>)
 80014be:	6013      	str	r3, [r2, #0]
  APP_PRINTF("Test 10 elapsed: %d ms\r\n", elapsedTime)
 80014c0:	4b3c      	ldr	r3, [pc, #240]	@ (80015b4 <main+0x214>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	4b3e      	ldr	r3, [pc, #248]	@ (80015c0 <main+0x220>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	2000      	movs	r0, #0
 80014ce:	f00c fa9d 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
  HAL_Delay(300);
 80014d2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014d6:	f000 fbff 	bl	8001cd8 <HAL_Delay>


  startTime = HAL_GetTick();
 80014da:	f000 fbe9 	bl	8001cb0 <HAL_GetTick>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a31      	ldr	r2, [pc, #196]	@ (80015a8 <main+0x208>)
 80014e2:	6013      	str	r3, [r2, #0]
  Tx_Compressed(W1.x_vals, compressed_size_bits_x, TYPE_X, 0 , 0 , 3);
 80014e4:	68b8      	ldr	r0, [r7, #8]
 80014e6:	4b31      	ldr	r3, [pc, #196]	@ (80015ac <main+0x20c>)
 80014e8:	6819      	ldr	r1, [r3, #0]
 80014ea:	2303      	movs	r3, #3
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	2300      	movs	r3, #0
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2300      	movs	r3, #0
 80014f4:	2201      	movs	r2, #1
 80014f6:	f00a ff33 	bl	800c360 <Tx_Compressed>
  endTime = HAL_GetTick();
 80014fa:	f000 fbd9 	bl	8001cb0 <HAL_GetTick>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a2b      	ldr	r2, [pc, #172]	@ (80015b0 <main+0x210>)
 8001502:	6013      	str	r3, [r2, #0]
  elapsedTime = endTime - startTime;
 8001504:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <main+0x210>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b27      	ldr	r3, [pc, #156]	@ (80015a8 <main+0x208>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	4a29      	ldr	r2, [pc, #164]	@ (80015b4 <main+0x214>)
 8001510:	6013      	str	r3, [r2, #0]
  APP_PRINTF("Test 11 elapsed: %d ms\r\n", elapsedTime)
 8001512:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <main+0x214>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	4b2a      	ldr	r3, [pc, #168]	@ (80015c4 <main+0x224>)
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	2000      	movs	r0, #0
 8001520:	f00c fa74 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
  HAL_Delay(300);
 8001524:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001528:	f000 fbd6 	bl	8001cd8 <HAL_Delay>


  startTime = HAL_GetTick();
 800152c:	f000 fbc0 	bl	8001cb0 <HAL_GetTick>
 8001530:	4603      	mov	r3, r0
 8001532:	4a1d      	ldr	r2, [pc, #116]	@ (80015a8 <main+0x208>)
 8001534:	6013      	str	r3, [r2, #0]
  Tx_Compressed(W1.x_vals, compressed_size_bits_x, TYPE_X, 0 , 0 , 4);
 8001536:	68b8      	ldr	r0, [r7, #8]
 8001538:	4b1c      	ldr	r3, [pc, #112]	@ (80015ac <main+0x20c>)
 800153a:	6819      	ldr	r1, [r3, #0]
 800153c:	2304      	movs	r3, #4
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	2300      	movs	r3, #0
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2300      	movs	r3, #0
 8001546:	2201      	movs	r2, #1
 8001548:	f00a ff0a 	bl	800c360 <Tx_Compressed>
  endTime = HAL_GetTick();
 800154c:	f000 fbb0 	bl	8001cb0 <HAL_GetTick>
 8001550:	4603      	mov	r3, r0
 8001552:	4a17      	ldr	r2, [pc, #92]	@ (80015b0 <main+0x210>)
 8001554:	6013      	str	r3, [r2, #0]
  elapsedTime = endTime - startTime;
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <main+0x210>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <main+0x208>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <main+0x214>)
 8001562:	6013      	str	r3, [r2, #0]
  APP_PRINTF("Test 12 elapsed: %d ms\r\n", elapsedTime);
 8001564:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <main+0x214>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <main+0x228>)
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	2000      	movs	r0, #0
 8001572:	f00c fa4b 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
//  HAL_Delay(200);
//
//  Tx_Compressed(W1.p_vals, compressed_size_bits_p, TYPE_P, 0 , 0 , 0);
//  HAL_Delay(200);

  APP_PRINTF("Finished transmission of data log %u\r\n", dataName);
 8001576:	2301      	movs	r3, #1
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <main+0x22c>)
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2000      	movs	r0, #0
 8001582:	f00c fa43 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8001586:	f00a fb36 	bl	800bbf6 <MX_SubGHz_Phy_Process>
 800158a:	e7fc      	b.n	8001586 <main+0x1e6>
 800158c:	20008320 	.word	0x20008320
 8001590:	200042f4 	.word	0x200042f4
 8001594:	20004da0 	.word	0x20004da0
 8001598:	2000584c 	.word	0x2000584c
 800159c:	200062f8 	.word	0x200062f8
 80015a0:	20006da4 	.word	0x20006da4
 80015a4:	20007850 	.word	0x20007850
 80015a8:	20008314 	.word	0x20008314
 80015ac:	200082fc 	.word	0x200082fc
 80015b0:	20008318 	.word	0x20008318
 80015b4:	2000831c 	.word	0x2000831c
 80015b8:	08010810 	.word	0x08010810
 80015bc:	08010828 	.word	0x08010828
 80015c0:	08010840 	.word	0x08010840
 80015c4:	0801085c 	.word	0x0801085c
 80015c8:	08010878 	.word	0x08010878
 80015cc:	08010894 	.word	0x08010894

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b09a      	sub	sp, #104	@ 0x68
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	2248      	movs	r2, #72	@ 0x48
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f00d fbfa 	bl	800edd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015f6:	f002 fa8d 	bl	8003b14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff feba 	bl	8001374 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001600:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <SystemClock_Config+0xac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001608:	4a1c      	ldr	r2, [pc, #112]	@ (800167c <SystemClock_Config+0xac>)
 800160a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <SystemClock_Config+0xac>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800161c:	2324      	movs	r3, #36	@ 0x24
 800161e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001620:	2381      	movs	r3, #129	@ 0x81
 8001622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001624:	2301      	movs	r3, #1
 8001626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001628:	2300      	movs	r3, #0
 800162a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800162c:	23b0      	movs	r3, #176	@ 0xb0
 800162e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001630:	2300      	movs	r3, #0
 8001632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	4618      	mov	r0, r3
 800163a:	f002 fddf 	bl	80041fc <HAL_RCC_OscConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001644:	f000 f8fa 	bl	800183c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001648:	234f      	movs	r3, #79	@ 0x4f
 800164a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2102      	movs	r1, #2
 8001664:	4618      	mov	r0, r3
 8001666:	f003 f94b 	bl	8004900 <HAL_RCC_ClockConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001670:	f000 f8e4 	bl	800183c <Error_Handler>
  }
}
 8001674:	bf00      	nop
 8001676:	3768      	adds	r7, #104	@ 0x68
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	58000400 	.word	0x58000400

08001680 <compression_demo>:

    return match;
}

void compression_demo(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af02      	add	r7, sp, #8
    float comp_rate = dhc_compress_evaluate(x_vals,encode_size,&compressed_size_bits_x,map); //evaluating what size of compressed data would be
 8001686:	4b52      	ldr	r3, [pc, #328]	@ (80017d0 <compression_demo+0x150>)
 8001688:	6819      	ldr	r1, [r3, #0]
 800168a:	4b52      	ldr	r3, [pc, #328]	@ (80017d4 <compression_demo+0x154>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a52      	ldr	r2, [pc, #328]	@ (80017d8 <compression_demo+0x158>)
 8001690:	4852      	ldr	r0, [pc, #328]	@ (80017dc <compression_demo+0x15c>)
 8001692:	f00a fc85 	bl	800bfa0 <dhc_compress_evaluate>
 8001696:	6078      	str	r0, [r7, #4]
    //Converting float to string to print
//    char buffer[20];  // Buffer to hold the formatted string
//    snprintf(buffer, sizeof(buffer), "%.2f", comp_rate); // Format the float value into the buffer

    if(comp_rate > 0)
 8001698:	f04f 0100 	mov.w	r1, #0
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff fc25 	bl	8000eec <__aeabi_fcmpgt>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 8089 	beq.w	80017bc <compression_demo+0x13c>
    {
//        APP_PRINTF("Compressor rate: ", comp_rate);
//        APP_PRINTF("%s", buffer);
//        APP_PRINTF("%\r\n");
        HAL_Delay(10);
 80016aa:	200a      	movs	r0, #10
 80016ac:	f000 fb14 	bl	8001cd8 <HAL_Delay>

        startTime =  HAL_GetTick();
 80016b0:	f000 fafe 	bl	8001cb0 <HAL_GetTick>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a4a      	ldr	r2, [pc, #296]	@ (80017e0 <compression_demo+0x160>)
 80016b8:	6013      	str	r3, [r2, #0]
        dhc_compress(compressed_x,&compressed_size_bits_x,x_vals,encode_size,map);
 80016ba:	4b45      	ldr	r3, [pc, #276]	@ (80017d0 <compression_demo+0x150>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b45      	ldr	r3, [pc, #276]	@ (80017d4 <compression_demo+0x154>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	4613      	mov	r3, r2
 80016c6:	4a45      	ldr	r2, [pc, #276]	@ (80017dc <compression_demo+0x15c>)
 80016c8:	4943      	ldr	r1, [pc, #268]	@ (80017d8 <compression_demo+0x158>)
 80016ca:	4846      	ldr	r0, [pc, #280]	@ (80017e4 <compression_demo+0x164>)
 80016cc:	f00a fbc4 	bl	800be58 <dhc_compress>

        dhc_compress(compressed_y,&compressed_size_bits_y,y_vals,encode_size,map);
 80016d0:	4b3f      	ldr	r3, [pc, #252]	@ (80017d0 <compression_demo+0x150>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b3f      	ldr	r3, [pc, #252]	@ (80017d4 <compression_demo+0x154>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	4613      	mov	r3, r2
 80016dc:	4a42      	ldr	r2, [pc, #264]	@ (80017e8 <compression_demo+0x168>)
 80016de:	4943      	ldr	r1, [pc, #268]	@ (80017ec <compression_demo+0x16c>)
 80016e0:	4843      	ldr	r0, [pc, #268]	@ (80017f0 <compression_demo+0x170>)
 80016e2:	f00a fbb9 	bl	800be58 <dhc_compress>

        dhc_compress(compressed_z,&compressed_size_bits_z,z_vals,encode_size,map);
 80016e6:	4b3a      	ldr	r3, [pc, #232]	@ (80017d0 <compression_demo+0x150>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b3a      	ldr	r3, [pc, #232]	@ (80017d4 <compression_demo+0x154>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	4a40      	ldr	r2, [pc, #256]	@ (80017f4 <compression_demo+0x174>)
 80016f4:	4940      	ldr	r1, [pc, #256]	@ (80017f8 <compression_demo+0x178>)
 80016f6:	4841      	ldr	r0, [pc, #260]	@ (80017fc <compression_demo+0x17c>)
 80016f8:	f00a fbae 	bl	800be58 <dhc_compress>

        dhc_compress(compressed_r,&compressed_size_bits_r,r_vals,encode_size,map);
 80016fc:	4b34      	ldr	r3, [pc, #208]	@ (80017d0 <compression_demo+0x150>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b34      	ldr	r3, [pc, #208]	@ (80017d4 <compression_demo+0x154>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	4613      	mov	r3, r2
 8001708:	4a3d      	ldr	r2, [pc, #244]	@ (8001800 <compression_demo+0x180>)
 800170a:	493e      	ldr	r1, [pc, #248]	@ (8001804 <compression_demo+0x184>)
 800170c:	483e      	ldr	r0, [pc, #248]	@ (8001808 <compression_demo+0x188>)
 800170e:	f00a fba3 	bl	800be58 <dhc_compress>

        dhc_compress(compressed_q,&compressed_size_bits_q,q_vals,encode_size,map);
 8001712:	4b2f      	ldr	r3, [pc, #188]	@ (80017d0 <compression_demo+0x150>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b2f      	ldr	r3, [pc, #188]	@ (80017d4 <compression_demo+0x154>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	4613      	mov	r3, r2
 800171e:	4a3b      	ldr	r2, [pc, #236]	@ (800180c <compression_demo+0x18c>)
 8001720:	493b      	ldr	r1, [pc, #236]	@ (8001810 <compression_demo+0x190>)
 8001722:	483c      	ldr	r0, [pc, #240]	@ (8001814 <compression_demo+0x194>)
 8001724:	f00a fb98 	bl	800be58 <dhc_compress>

        dhc_compress(compressed_p,&compressed_size_bits_p,p_vals,encode_size,map);
 8001728:	4b29      	ldr	r3, [pc, #164]	@ (80017d0 <compression_demo+0x150>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b29      	ldr	r3, [pc, #164]	@ (80017d4 <compression_demo+0x154>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	4613      	mov	r3, r2
 8001734:	4a38      	ldr	r2, [pc, #224]	@ (8001818 <compression_demo+0x198>)
 8001736:	4939      	ldr	r1, [pc, #228]	@ (800181c <compression_demo+0x19c>)
 8001738:	4839      	ldr	r0, [pc, #228]	@ (8001820 <compression_demo+0x1a0>)
 800173a:	f00a fb8d 	bl	800be58 <dhc_compress>

        endTime = HAL_GetTick();
 800173e:	f000 fab7 	bl	8001cb0 <HAL_GetTick>
 8001742:	4603      	mov	r3, r0
 8001744:	4a37      	ldr	r2, [pc, #220]	@ (8001824 <compression_demo+0x1a4>)
 8001746:	6013      	str	r3, [r2, #0]
        elapsedTime = endTime - startTime;
 8001748:	4b36      	ldr	r3, [pc, #216]	@ (8001824 <compression_demo+0x1a4>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b24      	ldr	r3, [pc, #144]	@ (80017e0 <compression_demo+0x160>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	4a35      	ldr	r2, [pc, #212]	@ (8001828 <compression_demo+0x1a8>)
 8001754:	6013      	str	r3, [r2, #0]
        APP_PRINTF("Compression completed in: %u ms\r\n", elapsedTime);
 8001756:	4b34      	ldr	r3, [pc, #208]	@ (8001828 <compression_demo+0x1a8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	4b33      	ldr	r3, [pc, #204]	@ (800182c <compression_demo+0x1ac>)
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2000      	movs	r0, #0
 8001764:	f00c f952 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
        uint32_t data_log_bits = compressed_size_bits_x + compressed_size_bits_y + compressed_size_bits_z + compressed_size_bits_r + compressed_size_bits_q + compressed_size_bits_p;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <compression_demo+0x158>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <compression_demo+0x16c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	441a      	add	r2, r3
 8001772:	4b21      	ldr	r3, [pc, #132]	@ (80017f8 <compression_demo+0x178>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	441a      	add	r2, r3
 8001778:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <compression_demo+0x184>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	441a      	add	r2, r3
 800177e:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <compression_demo+0x190>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	441a      	add	r2, r3
 8001784:	4b25      	ldr	r3, [pc, #148]	@ (800181c <compression_demo+0x19c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4413      	add	r3, r2
 800178a:	603b      	str	r3, [r7, #0]

        APP_PRINTF("Size before compression: %d bytes, after compression: %d bytes\r\n", encode_size*2*6, data_log_bits/8);
 800178c:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <compression_demo+0x150>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	461a      	mov	r2, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	08db      	lsrs	r3, r3, #3
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	9200      	str	r2, [sp, #0]
 80017a2:	4b23      	ldr	r3, [pc, #140]	@ (8001830 <compression_demo+0x1b0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2000      	movs	r0, #0
 80017aa:	f00c f92f 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
//					{
//					APP_PRINTF("\n");
//					}
//				HAL_Delay(10);
//     		}
     	APP_PRINTF("\n\r");
 80017ae:	4b21      	ldr	r3, [pc, #132]	@ (8001834 <compression_demo+0x1b4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	2000      	movs	r0, #0
 80017b6:	f00c f929 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
    {
        APP_PRINTF("Compressor will not reduce the data ");
//        APP_PRINTF("%s", buffer);
//        APP_PRINTF("%\r\n");
    }
}
 80017ba:	e005      	b.n	80017c8 <compression_demo+0x148>
        APP_PRINTF("Compressor will not reduce the data ");
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <compression_demo+0x1b8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2000      	movs	r0, #0
 80017c4:	f00c f922 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20008324 	.word	0x20008324
 80017d8:	200082fc 	.word	0x200082fc
 80017dc:	200000dc 	.word	0x200000dc
 80017e0:	20008314 	.word	0x20008314
 80017e4:	200042f4 	.word	0x200042f4
 80017e8:	20000b88 	.word	0x20000b88
 80017ec:	20008300 	.word	0x20008300
 80017f0:	20004da0 	.word	0x20004da0
 80017f4:	20001634 	.word	0x20001634
 80017f8:	20008304 	.word	0x20008304
 80017fc:	2000584c 	.word	0x2000584c
 8001800:	200020e0 	.word	0x200020e0
 8001804:	20008308 	.word	0x20008308
 8001808:	200062f8 	.word	0x200062f8
 800180c:	20002b8c 	.word	0x20002b8c
 8001810:	2000830c 	.word	0x2000830c
 8001814:	20006da4 	.word	0x20006da4
 8001818:	20003638 	.word	0x20003638
 800181c:	20008310 	.word	0x20008310
 8001820:	20007850 	.word	0x20007850
 8001824:	20008318 	.word	0x20008318
 8001828:	2000831c 	.word	0x2000831c
 800182c:	080108e0 	.word	0x080108e0
 8001830:	08010904 	.word	0x08010904
 8001834:	08010948 	.word	0x08010948
 8001838:	0801094c 	.word	0x0801094c

0800183c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001840:	b672      	cpsid	i
}
 8001842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <Error_Handler+0x8>

08001848 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800184c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001854:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800185c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001874:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001876:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4313      	orrs	r3, r2
 800187e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001884:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800188c:	68fb      	ldr	r3, [r7, #12]
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	@ 0x30
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	222c      	movs	r2, #44	@ 0x2c
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00d fa97 	bl	800edd8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018aa:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <MX_RTC_Init+0xa0>)
 80018ac:	4a23      	ldr	r2, [pc, #140]	@ (800193c <MX_RTC_Init+0xa4>)
 80018ae:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80018b0:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <MX_RTC_Init+0xa0>)
 80018b2:	221f      	movs	r2, #31
 80018b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <MX_RTC_Init+0xa0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <MX_RTC_Init+0xa0>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <MX_RTC_Init+0xa0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <MX_RTC_Init+0xa0>)
 80018ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018ce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <MX_RTC_Init+0xa0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80018d6:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_RTC_Init+0xa0>)
 80018d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018de:	4816      	ldr	r0, [pc, #88]	@ (8001938 <MX_RTC_Init+0xa0>)
 80018e0:	f003 fce8 	bl	80052b4 <HAL_RTC_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80018ea:	f7ff ffa7 	bl	800183c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80018ee:	4812      	ldr	r0, [pc, #72]	@ (8001938 <MX_RTC_Init+0xa0>)
 80018f0:	f003 ffde 	bl	80058b0 <HAL_RTCEx_SetSSRU_IT>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80018fa:	f7ff ff9f 	bl	800183c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_YES;
 80018fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001902:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001908:	2300      	movs	r3, #0
 800190a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800190c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001910:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001912:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	2200      	movs	r2, #0
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	@ (8001938 <MX_RTC_Init+0xa0>)
 8001920:	f003 fd4a 	bl	80053b8 <HAL_RTC_SetAlarm_IT>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_RTC_Init+0x96>
  {
    Error_Handler();
 800192a:	f7ff ff87 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	3730      	adds	r7, #48	@ 0x30
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20008328 	.word	0x20008328
 800193c:	40002800 	.word	0x40002800

08001940 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b090      	sub	sp, #64	@ 0x40
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	2238      	movs	r2, #56	@ 0x38
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f00d fa41 	bl	800edd8 <memset>
  if(rtcHandle->Instance==RTC)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a16      	ldr	r2, [pc, #88]	@ (80019b4 <HAL_RTC_MspInit+0x74>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d125      	bne.n	80019ac <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001960:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001964:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001966:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800196a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	4618      	mov	r0, r3
 8001972:	f003 fb85 	bl	8005080 <HAL_RCCEx_PeriphCLKConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800197c:	f7ff ff5e 	bl	800183c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001980:	f7ff ff62 	bl	8001848 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001984:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001988:	f7ff ff6e 	bl	8001868 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	2002      	movs	r0, #2
 8001992:	f001 fa08 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001996:	2002      	movs	r0, #2
 8001998:	f001 fa1f 	bl	8002dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2100      	movs	r1, #0
 80019a0:	202a      	movs	r0, #42	@ 0x2a
 80019a2:	f001 fa00 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80019a6:	202a      	movs	r0, #42	@ 0x2a
 80019a8:	f001 fa17 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80019ac:	bf00      	nop
 80019ae:	3740      	adds	r7, #64	@ 0x40
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40002800 	.word	0x40002800

080019b8 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80019bc:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80019be:	2201      	movs	r2, #1
 80019c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	58000400 	.word	0x58000400

080019d0 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80019ec:	f001 f8d4 	bl	8002b98 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80019f0:	f7ff ffe2 	bl	80019b8 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80019f4:	2001      	movs	r0, #1
 80019f6:	f002 f91f 	bl	8003c38 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}

080019fe <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001a02:	f001 f8d7 	bl	8002bb4 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001a06:	f000 ff23 	bl	8002850 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001a12:	f001 f8c1 	bl	8002b98 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001a16:	2101      	movs	r1, #1
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f002 f889 	bl	8003b30 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001a26:	f001 f8c5 	bl	8002bb4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a3e:	bf00      	nop
 8001a40:	e7fd      	b.n	8001a3e <NMI_Handler+0x4>

08001a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a46:	bf00      	nop
 8001a48:	e7fd      	b.n	8001a46 <HardFault_Handler+0x4>

08001a4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4e:	bf00      	nop
 8001a50:	e7fd      	b.n	8001a4e <MemManage_Handler+0x4>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a56:	bf00      	nop
 8001a58:	e7fd      	b.n	8001a56 <BusFault_Handler+0x4>

08001a5a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5e:	bf00      	nop
 8001a60:	e7fd      	b.n	8001a5e <UsageFault_Handler+0x4>

08001a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
	...

08001a94 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001a98:	4802      	ldr	r0, [pc, #8]	@ (8001aa4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001a9a:	f003 ff45 	bl	8005928 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20008328 	.word	0x20008328

08001aa8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f002 f80f 	bl	8003ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001aba:	2002      	movs	r0, #2
 8001abc:	f002 f808 	bl	8003ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <DMA1_Channel5_IRQHandler+0x10>)
 8001aca:	f001 fc1d 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20008410 	.word	0x20008410

08001ad8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001adc:	2040      	movs	r0, #64	@ 0x40
 8001ade:	f001 fff7 	bl	8003ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <USART2_IRQHandler+0x10>)
 8001aee:	f004 fd65 	bl	80065bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000837c 	.word	0x2000837c

08001afc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b00:	4802      	ldr	r0, [pc, #8]	@ (8001b0c <RTC_Alarm_IRQHandler+0x10>)
 8001b02:	f003 fdc1 	bl	8005688 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20008328 	.word	0x20008328

08001b10 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001b14:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001b16:	f004 fa75 	bl	8006004 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20008360 	.word	0x20008360

08001b24 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b30:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b40:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b48:	68fb      	ldr	r3, [r7, #12]
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <MX_SUBGHZ_Init+0x20>)
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001b5e:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <MX_SUBGHZ_Init+0x20>)
 8001b60:	f003 ffce 	bl	8005b00 <HAL_SUBGHZ_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001b6a:	f7ff fe67 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20008360 	.word	0x20008360

08001b78 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7ff ffcf 	bl	8001b24 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2032      	movs	r0, #50	@ 0x32
 8001b8c:	f001 f90b 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001b90:	2032      	movs	r0, #50	@ 0x32
 8001b92:	f001 f922 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001bb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7ff ffe8 	bl	8001b9e <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001bce:	f00b fc71 	bl	800d4b4 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <SystemApp_Init+0x38>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001bd8:	f000 f8a2 	bl	8001d20 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001bdc:	f00b fefa 	bl	800d9d4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001be0:	4807      	ldr	r0, [pc, #28]	@ (8001c00 <SystemApp_Init+0x3c>)
 8001be2:	f00b ff93 	bl	800db0c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001be6:	2002      	movs	r0, #2
 8001be8:	f00b ff9e 	bl	800db28 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001bec:	f00a ff1c 	bl	800ca28 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f00a ff58 	bl	800caa8 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	2000836c 	.word	0x2000836c
 8001c00:	08001c11 	.word	0x08001c11

08001c04 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001c08:	f00a ff7e 	bl	800cb08 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001c1a:	f107 0308 	add.w	r3, r7, #8
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00b f81c 	bl	800cc5c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c2a:	9200      	str	r2, [sp, #0]
 8001c2c:	4a07      	ldr	r2, [pc, #28]	@ (8001c4c <TimestampNow+0x3c>)
 8001c2e:	2110      	movs	r1, #16
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f81d 	bl	8001c70 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe faf2 	bl	8000220 <strlen>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	08010a18 	.word	0x08010a18

08001c50 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001c54:	2101      	movs	r1, #1
 8001c56:	2002      	movs	r0, #2
 8001c58:	f00a fef6 	bl	800ca48 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001c64:	2100      	movs	r1, #0
 8001c66:	2002      	movs	r0, #2
 8001c68:	f00a feee 	bl	800ca48 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001c70:	b40c      	push	{r2, r3}
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f00b f933 	bl	800cef4 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c98:	b002      	add	sp, #8
 8001c9a:	4770      	bx	lr

08001c9c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_GetTick+0x24>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001cc2:	f000 f9ef 	bl	80020a4 <TIMER_IF_GetTimerValue>
 8001cc6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001cc8:	687b      	ldr	r3, [r7, #4]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000836c 	.word	0x2000836c

08001cd8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fa65 	bl	80021b2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <LL_AHB2_GRP1_EnableClock>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cfc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d14:	68fb      	ldr	r3, [r7, #12]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001d26:	f000 ff53 	bl	8002bd0 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001d2a:	f000 ff57 	bl	8002bdc <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001d2e:	f000 ff5b 	bl	8002be8 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	f7ff ffcf 	bl	8001cf0 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7ff ffcc 	bl	8001cf0 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001d58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d5c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	4619      	mov	r1, r3
 8001d62:	480d      	ldr	r0, [pc, #52]	@ (8001d98 <DBG_Init+0x78>)
 8001d64:	f001 fc6e 	bl	8003644 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001d68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d6c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4809      	ldr	r0, [pc, #36]	@ (8001d98 <DBG_Init+0x78>)
 8001d74:	f001 fc66 	bl	8003644 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d7e:	4806      	ldr	r0, [pc, #24]	@ (8001d98 <DBG_Init+0x78>)
 8001d80:	f001 fe8e 	bl	8003aa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d8a:	4803      	ldr	r0, [pc, #12]	@ (8001d98 <DBG_Init+0x78>)
 8001d8c:	f001 fe88 	bl	8003aa0 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001d90:	bf00      	nop
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	48000400 	.word	0x48000400

08001d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return 1;
 8001da0:	2301      	movs	r3, #1
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <_kill>:

int _kill(int pid, int sig)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001db4:	f00d f84e 	bl	800ee54 <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2216      	movs	r2, #22
 8001dbc:	601a      	str	r2, [r3, #0]
  return -1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_exit>:

void _exit (int status)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dd2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffe7 	bl	8001daa <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <_exit+0x12>

08001de0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e00a      	b.n	8001e08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001df2:	f3af 8000 	nop.w
 8001df6:	4601      	mov	r1, r0
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	60ba      	str	r2, [r7, #8]
 8001dfe:	b2ca      	uxtb	r2, r1
 8001e00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dbf0      	blt.n	8001df2 <_read+0x12>
  }

  return len;
 8001e10:	687b      	ldr	r3, [r7, #4]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e009      	b.n	8001e40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	60ba      	str	r2, [r7, #8]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dbf1      	blt.n	8001e2c <_write+0x12>
  }
  return len;
 8001e48:	687b      	ldr	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_close>:

int _close(int file)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e78:	605a      	str	r2, [r3, #4]
  return 0;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <_isatty>:

int _isatty(int file)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
	...

08001eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ebc:	4a14      	ldr	r2, [pc, #80]	@ (8001f10 <_sbrk+0x5c>)
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <_sbrk+0x60>)
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec8:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <_sbrk+0x64>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	@ (8001f1c <_sbrk+0x68>)
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed6:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d207      	bcs.n	8001ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee4:	f00c ffb6 	bl	800ee54 <__errno>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	220c      	movs	r2, #12
 8001eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ef2:	e009      	b.n	8001f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efa:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	4a05      	ldr	r2, [pc, #20]	@ (8001f18 <_sbrk+0x64>)
 8001f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20010000 	.word	0x20010000
 8001f14:	00000400 	.word	0x00000400
 8001f18:	20008370 	.word	0x20008370
 8001f1c:	20008d18 	.word	0x20008d18

08001f20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
	...

08001f44 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001f4e:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <TIMER_IF_Init+0x5c>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	f083 0301 	eor.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01b      	beq.n	8001f94 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <TIMER_IF_Init+0x60>)
 8001f5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f62:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001f64:	f7ff fc98 	bl	8001898 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001f68:	f000 f856 	bl	8002018 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f70:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <TIMER_IF_Init+0x60>)
 8001f72:	f003 fb2d 	bl	80055d0 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f76:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <TIMER_IF_Init+0x60>)
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001f7e:	4809      	ldr	r0, [pc, #36]	@ (8001fa4 <TIMER_IF_Init+0x60>)
 8001f80:	f003 fc64 	bl	800584c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f000 f9d3 	bl	8002330 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001f8a:	f000 f85f 	bl	800204c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001f8e:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <TIMER_IF_Init+0x5c>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001f94:	79fb      	ldrb	r3, [r7, #7]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20008374 	.word	0x20008374
 8001fa4:	20008328 	.word	0x20008328

08001fa8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08e      	sub	sp, #56	@ 0x38
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	222c      	movs	r2, #44	@ 0x2c
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00c ff0a 	bl	800edd8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001fc4:	f000 f828 	bl	8002018 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <TIMER_IF_StartTimer+0x68>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001fe0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001fe4:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fea:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001fec:	f107 0308 	add.w	r3, r7, #8
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4807      	ldr	r0, [pc, #28]	@ (8002014 <TIMER_IF_StartTimer+0x6c>)
 8001ff6:	f003 f9df 	bl	80053b8 <HAL_RTC_SetAlarm_IT>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002000:	f7ff fc1c 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002004:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002008:	4618      	mov	r0, r3
 800200a:	3738      	adds	r7, #56	@ 0x38
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20008378 	.word	0x20008378
 8002014:	20008328 	.word	0x20008328

08002018 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002022:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <TIMER_IF_StopTimer+0x2c>)
 8002024:	2201      	movs	r2, #1
 8002026:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002028:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800202c:	4806      	ldr	r0, [pc, #24]	@ (8002048 <TIMER_IF_StopTimer+0x30>)
 800202e:	f003 facf 	bl	80055d0 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002032:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <TIMER_IF_StopTimer+0x30>)
 8002034:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002038:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800203a:	79fb      	ldrb	r3, [r7, #7]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40002800 	.word	0x40002800
 8002048:	20008328 	.word	0x20008328

0800204c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002050:	f000 f98e 	bl	8002370 <GetTimerTicks>
 8002054:	4603      	mov	r3, r0
 8002056:	4a03      	ldr	r2, [pc, #12]	@ (8002064 <TIMER_IF_SetTimerContext+0x18>)
 8002058:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800205a:	4b02      	ldr	r3, [pc, #8]	@ (8002064 <TIMER_IF_SetTimerContext+0x18>)
 800205c:	681b      	ldr	r3, [r3, #0]
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20008378 	.word	0x20008378

08002068 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800206c:	4b02      	ldr	r3, [pc, #8]	@ (8002078 <TIMER_IF_GetTimerContext+0x10>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	20008378 	.word	0x20008378

0800207c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002086:	f000 f973 	bl	8002370 <GetTimerTicks>
 800208a:	4602      	mov	r2, r0
 800208c:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20008378 	.word	0x20008378

080020a4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <TIMER_IF_GetTimerValue+0x24>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80020b6:	f000 f95b 	bl	8002370 <GetTimerTicks>
 80020ba:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80020bc:	687b      	ldr	r3, [r7, #4]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20008374 	.word	0x20008374

080020cc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80020d6:	2303      	movs	r3, #3
 80020d8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80020da:	687b      	ldr	r3, [r7, #4]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80020e6:	b5b0      	push	{r4, r5, r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80020ee:	2100      	movs	r1, #0
 80020f0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	2000      	movs	r0, #0
 80020f6:	460a      	mov	r2, r1
 80020f8:	4603      	mov	r3, r0
 80020fa:	0d95      	lsrs	r5, r2, #22
 80020fc:	0294      	lsls	r4, r2, #10
 80020fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	4620      	mov	r0, r4
 8002108:	4629      	mov	r1, r5
 800210a:	f7fe fef9 	bl	8000f00 <__aeabi_uldivmod>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4613      	mov	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002116:	68fb      	ldr	r3, [r7, #12]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bdb0      	pop	{r4, r5, r7, pc}

08002120 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002120:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800212a:	2100      	movs	r1, #0
 800212c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	2000      	movs	r0, #0
 8002132:	460c      	mov	r4, r1
 8002134:	4605      	mov	r5, r0
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f04f 0a00 	mov.w	sl, #0
 800213e:	f04f 0b00 	mov.w	fp, #0
 8002142:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002146:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800214a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800214e:	4650      	mov	r0, sl
 8002150:	4659      	mov	r1, fp
 8002152:	1b02      	subs	r2, r0, r4
 8002154:	eb61 0305 	sbc.w	r3, r1, r5
 8002158:	f04f 0000 	mov.w	r0, #0
 800215c:	f04f 0100 	mov.w	r1, #0
 8002160:	0099      	lsls	r1, r3, #2
 8002162:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002166:	0090      	lsls	r0, r2, #2
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	eb12 0804 	adds.w	r8, r2, r4
 8002170:	eb43 0905 	adc.w	r9, r3, r5
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002180:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002184:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002188:	4690      	mov	r8, r2
 800218a:	4699      	mov	r9, r3
 800218c:	4640      	mov	r0, r8
 800218e:	4649      	mov	r1, r9
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	0a82      	lsrs	r2, r0, #10
 800219a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800219e:	0a8b      	lsrs	r3, r1, #10
 80021a0:	4613      	mov	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80021a4:	68fb      	ldr	r3, [r7, #12]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80021b0:	4770      	bx	lr

080021b2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ff93 	bl	80020e6 <TIMER_IF_Convert_ms2Tick>
 80021c0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80021c2:	f000 f8d5 	bl	8002370 <GetTimerTicks>
 80021c6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80021c8:	e000      	b.n	80021cc <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80021ca:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80021cc:	f000 f8d0 	bl	8002370 <GetTimerTicks>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d8f6      	bhi.n	80021ca <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80021ee:	f00b faaf 	bl	800d750 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002202:	f000 f8a5 	bl	8002350 <TIMER_IF_BkUp_Read_MSBticks>
 8002206:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3301      	adds	r3, #1
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f88f 	bl	8002330 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800221a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800221e:	b08c      	sub	sp, #48	@ 0x30
 8002220:	af00      	add	r7, sp, #0
 8002222:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002228:	f000 f8a2 	bl	8002370 <GetTimerTicks>
 800222c:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800222e:	f000 f88f 	bl	8002350 <TIMER_IF_BkUp_Read_MSBticks>
 8002232:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	2200      	movs	r2, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	60fa      	str	r2, [r7, #12]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	000b      	movs	r3, r1
 8002248:	2200      	movs	r2, #0
 800224a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800224c:	2000      	movs	r0, #0
 800224e:	460c      	mov	r4, r1
 8002250:	4605      	mov	r5, r0
 8002252:	eb12 0804 	adds.w	r8, r2, r4
 8002256:	eb43 0905 	adc.w	r9, r3, r5
 800225a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800225e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	0a82      	lsrs	r2, r0, #10
 800226c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002270:	0a8b      	lsrs	r3, r1, #10
 8002272:	4613      	mov	r3, r2
 8002274:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2200      	movs	r2, #0
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002284:	f04f 0b00 	mov.w	fp, #0
 8002288:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff46 	bl	8002120 <TIMER_IF_Convert_Tick2ms>
 8002294:	4603      	mov	r3, r0
 8002296:	b29a      	uxth	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 800229c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3730      	adds	r7, #48	@ 0x30
 80022a2:	46bd      	mov	sp, r7
 80022a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080022a8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	2100      	movs	r1, #0
 80022b4:	4803      	ldr	r0, [pc, #12]	@ (80022c4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80022b6:	f003 fb5b 	bl	8005970 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20008328 	.word	0x20008328

080022c8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	2101      	movs	r1, #1
 80022d4:	4803      	ldr	r0, [pc, #12]	@ (80022e4 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80022d6:	f003 fb4b 	bl	8005970 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20008328 	.word	0x20008328

080022e8 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80022f2:	2100      	movs	r1, #0
 80022f4:	4804      	ldr	r0, [pc, #16]	@ (8002308 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80022f6:	f003 fb53 	bl	80059a0 <HAL_RTCEx_BKUPRead>
 80022fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80022fc:	687b      	ldr	r3, [r7, #4]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20008328 	.word	0x20008328

0800230c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002316:	2101      	movs	r1, #1
 8002318:	4804      	ldr	r0, [pc, #16]	@ (800232c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800231a:	f003 fb41 	bl	80059a0 <HAL_RTCEx_BKUPRead>
 800231e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002320:	687b      	ldr	r3, [r7, #4]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20008328 	.word	0x20008328

08002330 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	2102      	movs	r1, #2
 800233c:	4803      	ldr	r0, [pc, #12]	@ (800234c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800233e:	f003 fb17 	bl	8005970 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20008328 	.word	0x20008328

08002350 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002356:	2102      	movs	r1, #2
 8002358:	4804      	ldr	r0, [pc, #16]	@ (800236c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800235a:	f003 fb21 	bl	80059a0 <HAL_RTCEx_BKUPRead>
 800235e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002360:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20008328 	.word	0x20008328

08002370 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002376:	480b      	ldr	r0, [pc, #44]	@ (80023a4 <GetTimerTicks+0x34>)
 8002378:	f7ff fdd8 	bl	8001f2c <LL_RTC_TIME_GetSubSecond>
 800237c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800237e:	e003      	b.n	8002388 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002380:	4808      	ldr	r0, [pc, #32]	@ (80023a4 <GetTimerTicks+0x34>)
 8002382:	f7ff fdd3 	bl	8001f2c <LL_RTC_TIME_GetSubSecond>
 8002386:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002388:	4806      	ldr	r0, [pc, #24]	@ (80023a4 <GetTimerTicks+0x34>)
 800238a:	f7ff fdcf 	bl	8001f2c <LL_RTC_TIME_GetSubSecond>
 800238e:	4602      	mov	r2, r0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4293      	cmp	r3, r2
 8002394:	d1f4      	bne.n	8002380 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40002800 	.word	0x40002800

080023a8 <LL_AHB2_GRP1_EnableClock>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4313      	orrs	r3, r2
 80023be:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4013      	ands	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023cc:	68fb      	ldr	r3, [r7, #12]
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <LL_APB1_GRP1_EnableClock>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023fc:	68fb      	ldr	r3, [r7, #12]
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <LL_APB1_GRP1_DisableClock>:
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002414:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	43db      	mvns	r3, r3
 800241a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800241e:	4013      	ands	r3, r2
 8002420:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <LL_APB2_GRP1_EnableClock>:
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002438:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800243a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4313      	orrs	r3, r2
 8002442:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002448:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4013      	ands	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002450:	68fb      	ldr	r3, [r7, #12]
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <LL_APB2_GRP1_DisableClock>:
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002468:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	43db      	mvns	r3, r3
 800246e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002472:	4013      	ands	r3, r2
 8002474:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <MX_USART2_UART_Init>:
/* USART2 init function */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002484:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 8002486:	4a23      	ldr	r2, [pc, #140]	@ (8002514 <MX_USART2_UART_Init+0x94>)
 8002488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800248a:	4b21      	ldr	r3, [pc, #132]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 800248c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002492:	4b1f      	ldr	r3, [pc, #124]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002498:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800249e:	4b1c      	ldr	r3, [pc, #112]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 80024a6:	220c      	movs	r2, #12
 80024a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024aa:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b0:	4b17      	ldr	r3, [pc, #92]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024b6:	4b16      	ldr	r3, [pc, #88]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024bc:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 80024be:	2200      	movs	r2, #0
 80024c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c2:	4b13      	ldr	r3, [pc, #76]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024c8:	4811      	ldr	r0, [pc, #68]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 80024ca:	f003 ff5a 	bl	8006382 <HAL_UART_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80024d4:	f7ff f9b2 	bl	800183c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d8:	2100      	movs	r1, #0
 80024da:	480d      	ldr	r0, [pc, #52]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 80024dc:	f006 f87a 	bl	80085d4 <HAL_UARTEx_SetTxFifoThreshold>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80024e6:	f7ff f9a9 	bl	800183c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024ea:	2100      	movs	r1, #0
 80024ec:	4808      	ldr	r0, [pc, #32]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 80024ee:	f006 f8af 	bl	8008650 <HAL_UARTEx_SetRxFifoThreshold>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80024f8:	f7ff f9a0 	bl	800183c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80024fc:	4804      	ldr	r0, [pc, #16]	@ (8002510 <MX_USART2_UART_Init+0x90>)
 80024fe:	f006 f831 	bl	8008564 <HAL_UARTEx_DisableFifoMode>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002508:	f7ff f998 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	2000837c 	.word	0x2000837c
 8002514:	40004400 	.word	0x40004400

08002518 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b096      	sub	sp, #88	@ 0x58
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002530:	f107 030c 	add.w	r3, r7, #12
 8002534:	2238      	movs	r2, #56	@ 0x38
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f00c fc4d 	bl	800edd8 <memset>
    if(uartHandle->Instance==USART1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a49      	ldr	r2, [pc, #292]	@ (8002668 <HAL_UART_MspInit+0x150>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d126      	bne.n	8002596 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002548:	2301      	movs	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800254c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002550:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	4618      	mov	r0, r3
 8002558:	f002 fd92 	bl	8005080 <HAL_RCCEx_PeriphCLKConfig>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002562:	f7ff f96b 	bl	800183c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002566:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800256a:	f7ff ff5f 	bl	800242c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	2002      	movs	r0, #2
 8002570:	f7ff ff1a 	bl	80023a8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002574:	23c0      	movs	r3, #192	@ 0xc0
 8002576:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002580:	2300      	movs	r3, #0
 8002582:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002584:	2307      	movs	r3, #7
 8002586:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002588:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800258c:	4619      	mov	r1, r3
 800258e:	4837      	ldr	r0, [pc, #220]	@ (800266c <HAL_UART_MspInit+0x154>)
 8002590:	f001 f858 	bl	8003644 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002594:	e064      	b.n	8002660 <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a35      	ldr	r2, [pc, #212]	@ (8002670 <HAL_UART_MspInit+0x158>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d15f      	bne.n	8002660 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025a0:	2302      	movs	r3, #2
 80025a2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80025a4:	4b33      	ldr	r3, [pc, #204]	@ (8002674 <HAL_UART_MspInit+0x15c>)
 80025a6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	4618      	mov	r0, r3
 80025ae:	f002 fd67 	bl	8005080 <HAL_RCCEx_PeriphCLKConfig>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_UART_MspInit+0xa4>
      Error_Handler();
 80025b8:	f7ff f940 	bl	800183c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025bc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80025c0:	f7ff ff0a 	bl	80023d8 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c4:	2001      	movs	r0, #1
 80025c6:	f7ff feef 	bl	80023a8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 80025ca:	230c      	movs	r3, #12
 80025cc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d6:	2303      	movs	r3, #3
 80025d8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025da:	2307      	movs	r3, #7
 80025dc:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025de:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80025e2:	4619      	mov	r1, r3
 80025e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e8:	f001 f82c 	bl	8003644 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80025ec:	4b22      	ldr	r3, [pc, #136]	@ (8002678 <HAL_UART_MspInit+0x160>)
 80025ee:	4a23      	ldr	r2, [pc, #140]	@ (800267c <HAL_UART_MspInit+0x164>)
 80025f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80025f2:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <HAL_UART_MspInit+0x160>)
 80025f4:	2214      	movs	r2, #20
 80025f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002678 <HAL_UART_MspInit+0x160>)
 80025fa:	2210      	movs	r2, #16
 80025fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002678 <HAL_UART_MspInit+0x160>)
 8002600:	2200      	movs	r2, #0
 8002602:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002604:	4b1c      	ldr	r3, [pc, #112]	@ (8002678 <HAL_UART_MspInit+0x160>)
 8002606:	2280      	movs	r2, #128	@ 0x80
 8002608:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800260a:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <HAL_UART_MspInit+0x160>)
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002610:	4b19      	ldr	r3, [pc, #100]	@ (8002678 <HAL_UART_MspInit+0x160>)
 8002612:	2200      	movs	r2, #0
 8002614:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002616:	4b18      	ldr	r3, [pc, #96]	@ (8002678 <HAL_UART_MspInit+0x160>)
 8002618:	2200      	movs	r2, #0
 800261a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800261c:	4b16      	ldr	r3, [pc, #88]	@ (8002678 <HAL_UART_MspInit+0x160>)
 800261e:	2200      	movs	r2, #0
 8002620:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002622:	4815      	ldr	r0, [pc, #84]	@ (8002678 <HAL_UART_MspInit+0x160>)
 8002624:	f000 fbf6 	bl	8002e14 <HAL_DMA_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 800262e:	f7ff f905 	bl	800183c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002632:	2110      	movs	r1, #16
 8002634:	4810      	ldr	r0, [pc, #64]	@ (8002678 <HAL_UART_MspInit+0x160>)
 8002636:	f000 ff2d 	bl	8003494 <HAL_DMA_ConfigChannelAttributes>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_UART_MspInit+0x12c>
      Error_Handler();
 8002640:	f7ff f8fc 	bl	800183c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a0c      	ldr	r2, [pc, #48]	@ (8002678 <HAL_UART_MspInit+0x160>)
 8002648:	67da      	str	r2, [r3, #124]	@ 0x7c
 800264a:	4a0b      	ldr	r2, [pc, #44]	@ (8002678 <HAL_UART_MspInit+0x160>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	2100      	movs	r1, #0
 8002654:	2025      	movs	r0, #37	@ 0x25
 8002656:	f000 fba6 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800265a:	2025      	movs	r0, #37	@ 0x25
 800265c:	f000 fbbd 	bl	8002dda <HAL_NVIC_EnableIRQ>
}
 8002660:	bf00      	nop
 8002662:	3758      	adds	r7, #88	@ 0x58
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40013800 	.word	0x40013800
 800266c:	48000400 	.word	0x48000400
 8002670:	40004400 	.word	0x40004400
 8002674:	000c0004 	.word	0x000c0004
 8002678:	20008410 	.word	0x20008410
 800267c:	40020058 	.word	0x40020058

08002680 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a12      	ldr	r2, [pc, #72]	@ (80026d8 <HAL_UART_MspDeInit+0x58>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d108      	bne.n	80026a4 <HAL_UART_MspDeInit+0x24>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002692:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002696:	f7ff fee1 	bl	800245c <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 800269a:	21c0      	movs	r1, #192	@ 0xc0
 800269c:	480f      	ldr	r0, [pc, #60]	@ (80026dc <HAL_UART_MspDeInit+0x5c>)
 800269e:	f001 f931 	bl	8003904 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80026a2:	e015      	b.n	80026d0 <HAL_UART_MspDeInit+0x50>
  else if(uartHandle->Instance==USART2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <HAL_UART_MspDeInit+0x60>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d110      	bne.n	80026d0 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART2_CLK_DISABLE();
 80026ae:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80026b2:	f7ff fea9 	bl	8002408 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, USART2_RX_Pin|USART2_TX_Pin);
 80026b6:	210c      	movs	r1, #12
 80026b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026bc:	f001 f922 	bl	8003904 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fc4d 	bl	8002f64 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80026ca:	2025      	movs	r0, #37	@ 0x25
 80026cc:	f000 fb93 	bl	8002df6 <HAL_NVIC_DisableIRQ>
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40013800 	.word	0x40013800
 80026dc:	48000400 	.word	0x48000400
 80026e0:	40004400 	.word	0x40004400

080026e4 <LL_APB1_GRP1_ForceReset>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80026ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <LL_APB1_GRP1_ReleaseReset>:
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800270e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	43db      	mvns	r3, r3
 8002718:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800271c:	4013      	ands	r3, r2
 800271e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
	...

0800272c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <LL_EXTI_EnableIT_0_31+0x24>)
 8002736:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800273a:	4905      	ldr	r1, [pc, #20]	@ (8002750 <LL_EXTI_EnableIT_0_31+0x24>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	58000800 	.word	0x58000800

08002754 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800275c:	4a07      	ldr	r2, [pc, #28]	@ (800277c <vcom_Init+0x28>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002762:	f7fe fd5d 	bl	8001220 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002766:	f7ff fe8b 	bl	8002480 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 800276a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800276e:	f7ff ffdd 	bl	800272c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002772:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20008474 	.word	0x20008474

08002780 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002784:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002788:	f7ff ffac 	bl	80026e4 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 800278c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002790:	f7ff ffb9 	bl	8002706 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002794:	4804      	ldr	r0, [pc, #16]	@ (80027a8 <vcom_DeInit+0x28>)
 8002796:	f7ff ff73 	bl	8002680 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800279a:	200f      	movs	r0, #15
 800279c:	f000 fb2b 	bl	8002df6 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80027a0:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000837c 	.word	0x2000837c

080027ac <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	461a      	mov	r2, r3
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4804      	ldr	r0, [pc, #16]	@ (80027d0 <vcom_Trace_DMA+0x24>)
 80027c0:	f003 fe7c 	bl	80064bc <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80027c4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2000837c 	.word	0x2000837c

080027d4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80027dc:	4a19      	ldr	r2, [pc, #100]	@ (8002844 <vcom_ReceiveInit+0x70>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80027e2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027e6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80027e8:	f107 0308 	add.w	r3, r7, #8
 80027ec:	e893 0006 	ldmia.w	r3, {r1, r2}
 80027f0:	4815      	ldr	r0, [pc, #84]	@ (8002848 <vcom_ReceiveInit+0x74>)
 80027f2:	f005 fe2a 	bl	800844a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80027f6:	bf00      	nop
 80027f8:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <vcom_ReceiveInit+0x74>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002806:	d0f7      	beq.n	80027f8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002808:	bf00      	nop
 800280a:	4b0f      	ldr	r3, [pc, #60]	@ (8002848 <vcom_ReceiveInit+0x74>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002814:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002818:	d1f7      	bne.n	800280a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <vcom_ReceiveInit+0x74>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <vcom_ReceiveInit+0x74>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002828:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800282a:	4807      	ldr	r0, [pc, #28]	@ (8002848 <vcom_ReceiveInit+0x74>)
 800282c:	f005 fe68 	bl	8008500 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002830:	2201      	movs	r2, #1
 8002832:	4906      	ldr	r1, [pc, #24]	@ (800284c <vcom_ReceiveInit+0x78>)
 8002834:	4804      	ldr	r0, [pc, #16]	@ (8002848 <vcom_ReceiveInit+0x74>)
 8002836:	f003 fdf5 	bl	8006424 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800283a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20008478 	.word	0x20008478
 8002848:	2000837c 	.word	0x2000837c
 800284c:	20008470 	.word	0x20008470

08002850 <vcom_Resume>:

void vcom_Resume(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002854:	4808      	ldr	r0, [pc, #32]	@ (8002878 <vcom_Resume+0x28>)
 8002856:	f003 fd94 	bl	8006382 <HAL_UART_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002860:	f7fe ffec 	bl	800183c <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002864:	4805      	ldr	r0, [pc, #20]	@ (800287c <vcom_Resume+0x2c>)
 8002866:	f000 fad5 	bl	8002e14 <HAL_DMA_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002870:	f7fe ffe4 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	2000837c 	.word	0x2000837c
 800287c:	20008410 	.word	0x20008410

08002880 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <HAL_UART_TxCpltCallback+0x24>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d103      	bne.n	800289a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002892:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <HAL_UART_TxCpltCallback+0x28>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2000      	movs	r0, #0
 8002898:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40004400 	.word	0x40004400
 80028a8:	20008474 	.word	0x20008474

080028ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	@ (80028f0 <HAL_UART_RxCpltCallback+0x44>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d113      	bne.n	80028e6 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80028be:	4b0d      	ldr	r3, [pc, #52]	@ (80028f4 <HAL_UART_RxCpltCallback+0x48>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_UART_RxCpltCallback+0x30>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80028d0:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <HAL_UART_RxCpltCallback+0x48>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2200      	movs	r2, #0
 80028d6:	2101      	movs	r1, #1
 80028d8:	4807      	ldr	r0, [pc, #28]	@ (80028f8 <HAL_UART_RxCpltCallback+0x4c>)
 80028da:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80028dc:	2201      	movs	r2, #1
 80028de:	4906      	ldr	r1, [pc, #24]	@ (80028f8 <HAL_UART_RxCpltCallback+0x4c>)
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f003 fd9f 	bl	8006424 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40004400 	.word	0x40004400
 80028f4:	20008478 	.word	0x20008478
 80028f8:	20008470 	.word	0x20008470

080028fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028fc:	480d      	ldr	r0, [pc, #52]	@ (8002934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002900:	f7ff fb0e 	bl	8001f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002904:	480c      	ldr	r0, [pc, #48]	@ (8002938 <LoopForever+0x6>)
  ldr r1, =_edata
 8002906:	490d      	ldr	r1, [pc, #52]	@ (800293c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002908:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <LoopForever+0xe>)
  movs r3, #0
 800290a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800290c:	e002      	b.n	8002914 <LoopCopyDataInit>

0800290e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002912:	3304      	adds	r3, #4

08002914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002918:	d3f9      	bcc.n	800290e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291a:	4a0a      	ldr	r2, [pc, #40]	@ (8002944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800291c:	4c0a      	ldr	r4, [pc, #40]	@ (8002948 <LoopForever+0x16>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002920:	e001      	b.n	8002926 <LoopFillZerobss>

08002922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002924:	3204      	adds	r2, #4

08002926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002928:	d3fb      	bcc.n	8002922 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800292a:	f00c fa99 	bl	800ee60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800292e:	f7fe fd37 	bl	80013a0 <main>

08002932 <LoopForever>:

LoopForever:
    b LoopForever
 8002932:	e7fe      	b.n	8002932 <LoopForever>
  ldr   r0, =_estack
 8002934:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800293c:	200042d8 	.word	0x200042d8
  ldr r2, =_sidata
 8002940:	080114a8 	.word	0x080114a8
  ldr r2, =_sbss
 8002944:	200042d8 	.word	0x200042d8
  ldr r4, =_ebss
 8002948:	20008d18 	.word	0x20008d18

0800294c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800294c:	e7fe      	b.n	800294c <ADC_IRQHandler>

0800294e <LL_AHB2_GRP1_EnableClock>:
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800295c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4313      	orrs	r3, r2
 8002964:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4013      	ands	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002972:	68fb      	ldr	r3, [r7, #12]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
	...

08002980 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8002994:	2004      	movs	r0, #4
 8002996:	f7ff ffda 	bl	800294e <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800299a:	2310      	movs	r3, #16
 800299c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800299e:	2301      	movs	r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a6:	2303      	movs	r3, #3
 80029a8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4812      	ldr	r0, [pc, #72]	@ (80029f8 <BSP_RADIO_Init+0x78>)
 80029b0:	f000 fe48 	bl	8003644 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80029b4:	2320      	movs	r3, #32
 80029b6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	4619      	mov	r1, r3
 80029bc:	480e      	ldr	r0, [pc, #56]	@ (80029f8 <BSP_RADIO_Init+0x78>)
 80029be:	f000 fe41 	bl	8003644 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80029c2:	2308      	movs	r3, #8
 80029c4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	480b      	ldr	r0, [pc, #44]	@ (80029f8 <BSP_RADIO_Init+0x78>)
 80029cc:	f000 fe3a 	bl	8003644 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80029d0:	2200      	movs	r2, #0
 80029d2:	2120      	movs	r1, #32
 80029d4:	4808      	ldr	r0, [pc, #32]	@ (80029f8 <BSP_RADIO_Init+0x78>)
 80029d6:	f001 f863 	bl	8003aa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80029da:	2200      	movs	r2, #0
 80029dc:	2110      	movs	r1, #16
 80029de:	4806      	ldr	r0, [pc, #24]	@ (80029f8 <BSP_RADIO_Init+0x78>)
 80029e0:	f001 f85e 	bl	8003aa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80029e4:	2200      	movs	r2, #0
 80029e6:	2108      	movs	r1, #8
 80029e8:	4803      	ldr	r0, [pc, #12]	@ (80029f8 <BSP_RADIO_Init+0x78>)
 80029ea:	f001 f859 	bl	8003aa0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	48000800 	.word	0x48000800

080029fc <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d84b      	bhi.n	8002aa4 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8002a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a14 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a25 	.word	0x08002a25
 8002a18:	08002a45 	.word	0x08002a45
 8002a1c:	08002a65 	.word	0x08002a65
 8002a20:	08002a85 	.word	0x08002a85
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2108      	movs	r1, #8
 8002a28:	4821      	ldr	r0, [pc, #132]	@ (8002ab0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a2a:	f001 f839 	bl	8003aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2110      	movs	r1, #16
 8002a32:	481f      	ldr	r0, [pc, #124]	@ (8002ab0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a34:	f001 f834 	bl	8003aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	481c      	ldr	r0, [pc, #112]	@ (8002ab0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a3e:	f001 f82f 	bl	8003aa0 <HAL_GPIO_WritePin>
      break;      
 8002a42:	e030      	b.n	8002aa6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002a44:	2201      	movs	r2, #1
 8002a46:	2108      	movs	r1, #8
 8002a48:	4819      	ldr	r0, [pc, #100]	@ (8002ab0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a4a:	f001 f829 	bl	8003aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002a4e:	2201      	movs	r2, #1
 8002a50:	2110      	movs	r1, #16
 8002a52:	4817      	ldr	r0, [pc, #92]	@ (8002ab0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a54:	f001 f824 	bl	8003aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2120      	movs	r1, #32
 8002a5c:	4814      	ldr	r0, [pc, #80]	@ (8002ab0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a5e:	f001 f81f 	bl	8003aa0 <HAL_GPIO_WritePin>
      break;
 8002a62:	e020      	b.n	8002aa6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002a64:	2201      	movs	r2, #1
 8002a66:	2108      	movs	r1, #8
 8002a68:	4811      	ldr	r0, [pc, #68]	@ (8002ab0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a6a:	f001 f819 	bl	8003aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002a6e:	2201      	movs	r2, #1
 8002a70:	2110      	movs	r1, #16
 8002a72:	480f      	ldr	r0, [pc, #60]	@ (8002ab0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a74:	f001 f814 	bl	8003aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002a78:	2201      	movs	r2, #1
 8002a7a:	2120      	movs	r1, #32
 8002a7c:	480c      	ldr	r0, [pc, #48]	@ (8002ab0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a7e:	f001 f80f 	bl	8003aa0 <HAL_GPIO_WritePin>
      break;
 8002a82:	e010      	b.n	8002aa6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002a84:	2201      	movs	r2, #1
 8002a86:	2108      	movs	r1, #8
 8002a88:	4809      	ldr	r0, [pc, #36]	@ (8002ab0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a8a:	f001 f809 	bl	8003aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2110      	movs	r1, #16
 8002a92:	4807      	ldr	r0, [pc, #28]	@ (8002ab0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a94:	f001 f804 	bl	8003aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002a98:	2201      	movs	r2, #1
 8002a9a:	2120      	movs	r1, #32
 8002a9c:	4804      	ldr	r0, [pc, #16]	@ (8002ab0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002a9e:	f000 ffff 	bl	8003aa0 <HAL_GPIO_WritePin>
      break;
 8002aa2:	e000      	b.n	8002aa6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8002aa4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	48000800 	.word	0x48000800

08002ab4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002ad4:	2301      	movs	r3, #1
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d102      	bne.n	8002af4 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002aee:	230f      	movs	r3, #15
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e001      	b.n	8002af8 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002af4:	2316      	movs	r3, #22
 8002af6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002af8:	68fb      	ldr	r3, [r7, #12]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b08:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a03      	ldr	r2, [pc, #12]	@ (8002b1c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	6053      	str	r3, [r2, #4]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	e0042000 	.word	0xe0042000

08002b20 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002b24:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a03      	ldr	r2, [pc, #12]	@ (8002b38 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002b2a:	f023 0302 	bic.w	r3, r3, #2
 8002b2e:	6053      	str	r3, [r2, #4]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	e0042000 	.word	0xe0042000

08002b3c <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002b40:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4a03      	ldr	r2, [pc, #12]	@ (8002b54 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002b46:	f023 0304 	bic.w	r3, r3, #4
 8002b4a:	6053      	str	r3, [r2, #4]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	e0042000 	.word	0xe0042000

08002b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b62:	2003      	movs	r0, #3
 8002b64:	f000 f914 	bl	8002d90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b68:	f002 f8ac 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4a09      	ldr	r2, [pc, #36]	@ (8002b94 <HAL_Init+0x3c>)
 8002b70:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b72:	200f      	movs	r0, #15
 8002b74:	f7ff f892 	bl	8001c9c <HAL_InitTick>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	71fb      	strb	r3, [r7, #7]
 8002b82:	e001      	b.n	8002b88 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b84:	f7fe ff53 	bl	8001a2e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b88:	79fb      	ldrb	r3, [r7, #7]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000004 	.word	0x20000004

08002b98 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b9c:	4b04      	ldr	r3, [pc, #16]	@ (8002bb0 <HAL_SuspendTick+0x18>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a03      	ldr	r2, [pc, #12]	@ (8002bb0 <HAL_SuspendTick+0x18>)
 8002ba2:	f023 0302 	bic.w	r3, r3, #2
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	e000e010 	.word	0xe000e010

08002bb4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002bb8:	4b04      	ldr	r3, [pc, #16]	@ (8002bcc <HAL_ResumeTick+0x18>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a03      	ldr	r2, [pc, #12]	@ (8002bcc <HAL_ResumeTick+0x18>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	6013      	str	r3, [r2, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002bd4:	f7ff ff96 	bl	8002b04 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002be0:	f7ff ff9e 	bl	8002b20 <LL_DBGMCU_DisableDBGStopMode>
}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002bec:	f7ff ffa6 	bl	8002b3c <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c04:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c26:	4a04      	ldr	r2, [pc, #16]	@ (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	60d3      	str	r3, [r2, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c40:	4b04      	ldr	r3, [pc, #16]	@ (8002c54 <__NVIC_GetPriorityGrouping+0x18>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 0307 	and.w	r3, r3, #7
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	db0b      	blt.n	8002c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	4906      	ldr	r1, [pc, #24]	@ (8002c8c <__NVIC_EnableIRQ+0x34>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2001      	movs	r0, #1
 8002c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e100 	.word	0xe000e100

08002c90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db12      	blt.n	8002cc8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	490a      	ldr	r1, [pc, #40]	@ (8002cd4 <__NVIC_DisableIRQ+0x44>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	3320      	adds	r3, #32
 8002cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002cbc:	f3bf 8f4f 	dsb	sy
}
 8002cc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cc2:	f3bf 8f6f 	isb	sy
}
 8002cc6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000e100 	.word	0xe000e100

08002cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	db0a      	blt.n	8002d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	490c      	ldr	r1, [pc, #48]	@ (8002d24 <__NVIC_SetPriority+0x4c>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d00:	e00a      	b.n	8002d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4908      	ldr	r1, [pc, #32]	@ (8002d28 <__NVIC_SetPriority+0x50>)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	3b04      	subs	r3, #4
 8002d10:	0112      	lsls	r2, r2, #4
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	440b      	add	r3, r1
 8002d16:	761a      	strb	r2, [r3, #24]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000e100 	.word	0xe000e100
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	@ 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f1c3 0307 	rsb	r3, r3, #7
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	bf28      	it	cs
 8002d4a:	2304      	movcs	r3, #4
 8002d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d902      	bls.n	8002d5c <NVIC_EncodePriority+0x30>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3b03      	subs	r3, #3
 8002d5a:	e000      	b.n	8002d5e <NVIC_EncodePriority+0x32>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	401a      	ands	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	43d9      	mvns	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	4313      	orrs	r3, r2
         );
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	@ 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff2b 	bl	8002bf4 <__NVIC_SetPriorityGrouping>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002db4:	f7ff ff42 	bl	8002c3c <__NVIC_GetPriorityGrouping>
 8002db8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f7ff ffb4 	bl	8002d2c <NVIC_EncodePriority>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff83 	bl	8002cd8 <__NVIC_SetPriority>
}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff35 	bl	8002c58 <__NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff43 	bl	8002c90 <__NVIC_DisableIRQ>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e08e      	b.n	8002f44 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b47      	ldr	r3, [pc, #284]	@ (8002f4c <HAL_DMA_Init+0x138>)
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d80f      	bhi.n	8002e52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b45      	ldr	r3, [pc, #276]	@ (8002f50 <HAL_DMA_Init+0x13c>)
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4a45      	ldr	r2, [pc, #276]	@ (8002f54 <HAL_DMA_Init+0x140>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	009a      	lsls	r2, r3, #2
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a42      	ldr	r2, [pc, #264]	@ (8002f58 <HAL_DMA_Init+0x144>)
 8002e4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e50:	e00e      	b.n	8002e70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b40      	ldr	r3, [pc, #256]	@ (8002f5c <HAL_DMA_Init+0x148>)
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a3d      	ldr	r2, [pc, #244]	@ (8002f54 <HAL_DMA_Init+0x140>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	091b      	lsrs	r3, r3, #4
 8002e64:	009a      	lsls	r2, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a3c      	ldr	r2, [pc, #240]	@ (8002f60 <HAL_DMA_Init+0x14c>)
 8002e6e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e8a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fb52 	bl	800356c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ed0:	d102      	bne.n	8002ed8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ee0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ee4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002eee:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <HAL_DMA_Init+0x106>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d80c      	bhi.n	8002f1a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fb7b 	bl	80035fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	e008      	b.n	8002f2c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40020407 	.word	0x40020407
 8002f50:	bffdfff8 	.word	0xbffdfff8
 8002f54:	cccccccd 	.word	0xcccccccd
 8002f58:	40020000 	.word	0x40020000
 8002f5c:	bffdfbf8 	.word	0xbffdfbf8
 8002f60:	40020400 	.word	0x40020400

08002f64 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e07b      	b.n	800306e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8003078 <HAL_DMA_DeInit+0x114>)
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d80f      	bhi.n	8002fb2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b38      	ldr	r3, [pc, #224]	@ (800307c <HAL_DMA_DeInit+0x118>)
 8002f9a:	4413      	add	r3, r2
 8002f9c:	4a38      	ldr	r2, [pc, #224]	@ (8003080 <HAL_DMA_DeInit+0x11c>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	009a      	lsls	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a35      	ldr	r2, [pc, #212]	@ (8003084 <HAL_DMA_DeInit+0x120>)
 8002fae:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fb0:	e00e      	b.n	8002fd0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b33      	ldr	r3, [pc, #204]	@ (8003088 <HAL_DMA_DeInit+0x124>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a30      	ldr	r2, [pc, #192]	@ (8003080 <HAL_DMA_DeInit+0x11c>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	009a      	lsls	r2, r3, #2
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800308c <HAL_DMA_DeInit+0x128>)
 8002fce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fdc:	f003 021c 	and.w	r2, r3, #28
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fea:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fabd 	bl	800356c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003002:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00f      	beq.n	800302c <HAL_DMA_DeInit+0xc8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b04      	cmp	r3, #4
 8003012:	d80b      	bhi.n	800302c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 faf1 	bl	80035fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800302a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40020407 	.word	0x40020407
 800307c:	bffdfff8 	.word	0xbffdfff8
 8003080:	cccccccd 	.word	0xcccccccd
 8003084:	40020000 	.word	0x40020000
 8003088:	bffdfbf8 	.word	0xbffdfbf8
 800308c:	40020400 	.word	0x40020400

08003090 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_DMA_Start_IT+0x20>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e069      	b.n	8003184 <HAL_DMA_Start_IT+0xf4>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d155      	bne.n	8003170 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0201 	bic.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fa02 	bl	80034f2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 020e 	orr.w	r2, r2, #14
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e00f      	b.n	8003128 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0204 	bic.w	r2, r2, #4
 8003116:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 020a 	orr.w	r2, r2, #10
 8003126:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003140:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003144:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003158:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800315c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e008      	b.n	8003182 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2280      	movs	r2, #128	@ 0x80
 8003174:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003182:	7dfb      	ldrb	r3, [r7, #23]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e04f      	b.n	800323e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d008      	beq.n	80031bc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2204      	movs	r2, #4
 80031ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e040      	b.n	800323e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 020e 	bic.w	r2, r2, #14
 80031ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f0:	f003 021c 	and.w	r2, r3, #28
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f202 	lsl.w	r2, r1, r2
 80031fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003208:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00c      	beq.n	800322c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003220:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800322a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d005      	beq.n	800326c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2204      	movs	r2, #4
 8003264:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
 800326a:	e047      	b.n	80032fc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 020e 	bic.w	r2, r2, #14
 800327a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003296:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800329a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a0:	f003 021c 	and.w	r2, r3, #28
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80032da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
    }
  }
  return status;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003324:	f003 031c 	and.w	r3, r3, #28
 8003328:	2204      	movs	r2, #4
 800332a:	409a      	lsls	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d027      	beq.n	8003384 <HAL_DMA_IRQHandler+0x7c>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d022      	beq.n	8003384 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0204 	bic.w	r2, r2, #4
 800335a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003360:	f003 021c 	and.w	r2, r3, #28
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	2104      	movs	r1, #4
 800336a:	fa01 f202 	lsl.w	r2, r1, r2
 800336e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8081 	beq.w	800347c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003382:	e07b      	b.n	800347c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003388:	f003 031c 	and.w	r3, r3, #28
 800338c:	2202      	movs	r2, #2
 800338e:	409a      	lsls	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d03d      	beq.n	8003414 <HAL_DMA_IRQHandler+0x10c>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d038      	beq.n	8003414 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 020a 	bic.w	r2, r2, #10
 80033be:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003488 <HAL_DMA_IRQHandler+0x180>)
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d909      	bls.n	80033e8 <HAL_DMA_IRQHandler+0xe0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d8:	f003 031c 	and.w	r3, r3, #28
 80033dc:	4a2b      	ldr	r2, [pc, #172]	@ (800348c <HAL_DMA_IRQHandler+0x184>)
 80033de:	2102      	movs	r1, #2
 80033e0:	fa01 f303 	lsl.w	r3, r1, r3
 80033e4:	6053      	str	r3, [r2, #4]
 80033e6:	e008      	b.n	80033fa <HAL_DMA_IRQHandler+0xf2>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ec:	f003 031c 	and.w	r3, r3, #28
 80033f0:	4a27      	ldr	r2, [pc, #156]	@ (8003490 <HAL_DMA_IRQHandler+0x188>)
 80033f2:	2102      	movs	r1, #2
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d038      	beq.n	800347c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003412:	e033      	b.n	800347c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003418:	f003 031c 	and.w	r3, r3, #28
 800341c:	2208      	movs	r2, #8
 800341e:	409a      	lsls	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d02a      	beq.n	800347e <HAL_DMA_IRQHandler+0x176>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d025      	beq.n	800347e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 020e 	bic.w	r2, r2, #14
 8003440:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003446:	f003 021c 	and.w	r2, r3, #28
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	2101      	movs	r1, #1
 8003450:	fa01 f202 	lsl.w	r2, r1, r2
 8003454:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003470:	2b00      	cmp	r3, #0
 8003472:	d004      	beq.n	800347e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800347c:	bf00      	nop
 800347e:	bf00      	nop
}
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40020080 	.word	0x40020080
 800348c:	40020400 	.word	0x40020400
 8003490:	40020000 	.word	0x40020000

08003494 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d103      	bne.n	80034b0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	72fb      	strb	r3, [r7, #11]
    return status;
 80034ac:	7afb      	ldrb	r3, [r7, #11]
 80034ae:	e01b      	b.n	80034e8 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00d      	beq.n	80034de <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	e003      	b.n	80034de <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80034dc:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	601a      	str	r2, [r3, #0]

  return status;
 80034e6:	7afb      	ldrb	r3, [r7, #11]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003508:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	2b00      	cmp	r3, #0
 8003510:	d004      	beq.n	800351c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800351a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003520:	f003 021c 	and.w	r2, r3, #28
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f202 	lsl.w	r2, r1, r2
 800352e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b10      	cmp	r3, #16
 800353e:	d108      	bne.n	8003552 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003550:	e007      	b.n	8003562 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	60da      	str	r2, [r3, #12]
}
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	4b1c      	ldr	r3, [pc, #112]	@ (80035ec <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800357c:	429a      	cmp	r2, r3
 800357e:	d813      	bhi.n	80035a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800358c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	3b08      	subs	r3, #8
 800359c:	4a14      	ldr	r2, [pc, #80]	@ (80035f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	e011      	b.n	80035cc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	009a      	lsls	r2, r3, #2
 80035b0:	4b10      	ldr	r3, [pc, #64]	@ (80035f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80035b2:	4413      	add	r3, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	3b08      	subs	r3, #8
 80035c0:	4a0b      	ldr	r2, [pc, #44]	@ (80035f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	3307      	adds	r3, #7
 80035ca:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a0a      	ldr	r2, [pc, #40]	@ (80035f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80035d0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	2201      	movs	r2, #1
 80035da:	409a      	lsls	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40020407 	.word	0x40020407
 80035f0:	cccccccd 	.word	0xcccccccd
 80035f4:	4002081c 	.word	0x4002081c
 80035f8:	40020880 	.word	0x40020880

080035fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800360c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	461a      	mov	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a08      	ldr	r2, [pc, #32]	@ (8003640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003620:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3b01      	subs	r3, #1
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2201      	movs	r2, #1
 800362c:	409a      	lsls	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	1000823f 	.word	0x1000823f
 8003640:	40020940 	.word	0x40020940

08003644 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003652:	e140      	b.n	80038d6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2101      	movs	r1, #1
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	4013      	ands	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8132 	beq.w	80038d0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d005      	beq.n	8003684 <HAL_GPIO_Init+0x40>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d130      	bne.n	80036e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	2203      	movs	r2, #3
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ba:	2201      	movs	r2, #1
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 0201 	and.w	r2, r3, #1
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d017      	beq.n	8003722 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2203      	movs	r2, #3
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d123      	bne.n	8003776 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	08da      	lsrs	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3208      	adds	r2, #8
 8003736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800373a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	220f      	movs	r2, #15
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4013      	ands	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	08da      	lsrs	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3208      	adds	r2, #8
 8003770:	6939      	ldr	r1, [r7, #16]
 8003772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	2203      	movs	r2, #3
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4013      	ands	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 0203 	and.w	r2, r3, #3
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 808c 	beq.w	80038d0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80037b8:	4a4e      	ldr	r2, [pc, #312]	@ (80038f4 <HAL_GPIO_Init+0x2b0>)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	089b      	lsrs	r3, r3, #2
 80037be:	3302      	adds	r3, #2
 80037c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	2207      	movs	r2, #7
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4013      	ands	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80037e2:	d00d      	beq.n	8003800 <HAL_GPIO_Init+0x1bc>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a44      	ldr	r2, [pc, #272]	@ (80038f8 <HAL_GPIO_Init+0x2b4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d007      	beq.n	80037fc <HAL_GPIO_Init+0x1b8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a43      	ldr	r2, [pc, #268]	@ (80038fc <HAL_GPIO_Init+0x2b8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d101      	bne.n	80037f8 <HAL_GPIO_Init+0x1b4>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e004      	b.n	8003802 <HAL_GPIO_Init+0x1be>
 80037f8:	2307      	movs	r3, #7
 80037fa:	e002      	b.n	8003802 <HAL_GPIO_Init+0x1be>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <HAL_GPIO_Init+0x1be>
 8003800:	2300      	movs	r3, #0
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	f002 0203 	and.w	r2, r2, #3
 8003808:	0092      	lsls	r2, r2, #2
 800380a:	4093      	lsls	r3, r2
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003812:	4938      	ldr	r1, [pc, #224]	@ (80038f4 <HAL_GPIO_Init+0x2b0>)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	3302      	adds	r3, #2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003820:	4b37      	ldr	r3, [pc, #220]	@ (8003900 <HAL_GPIO_Init+0x2bc>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003844:	4a2e      	ldr	r2, [pc, #184]	@ (8003900 <HAL_GPIO_Init+0x2bc>)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800384a:	4b2d      	ldr	r3, [pc, #180]	@ (8003900 <HAL_GPIO_Init+0x2bc>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800386e:	4a24      	ldr	r2, [pc, #144]	@ (8003900 <HAL_GPIO_Init+0x2bc>)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003874:	4b22      	ldr	r3, [pc, #136]	@ (8003900 <HAL_GPIO_Init+0x2bc>)
 8003876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800387a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800389a:	4a19      	ldr	r2, [pc, #100]	@ (8003900 <HAL_GPIO_Init+0x2bc>)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80038a2:	4b17      	ldr	r3, [pc, #92]	@ (8003900 <HAL_GPIO_Init+0x2bc>)
 80038a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038a8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80038c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003900 <HAL_GPIO_Init+0x2bc>)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	3301      	adds	r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f47f aeb7 	bne.w	8003654 <HAL_GPIO_Init+0x10>
  }
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40010000 	.word	0x40010000
 80038f8:	48000400 	.word	0x48000400
 80038fc:	48000800 	.word	0x48000800
 8003900:	58000800 	.word	0x58000800

08003904 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003912:	e0af      	b.n	8003a74 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003914:	2201      	movs	r2, #1
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80a2 	beq.w	8003a6e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800392a:	4a59      	ldr	r2, [pc, #356]	@ (8003a90 <HAL_GPIO_DeInit+0x18c>)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	089b      	lsrs	r3, r3, #2
 8003930:	3302      	adds	r3, #2
 8003932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003936:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	2207      	movs	r2, #7
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4013      	ands	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003952:	d00d      	beq.n	8003970 <HAL_GPIO_DeInit+0x6c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a4f      	ldr	r2, [pc, #316]	@ (8003a94 <HAL_GPIO_DeInit+0x190>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <HAL_GPIO_DeInit+0x68>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a4e      	ldr	r2, [pc, #312]	@ (8003a98 <HAL_GPIO_DeInit+0x194>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <HAL_GPIO_DeInit+0x64>
 8003964:	2302      	movs	r3, #2
 8003966:	e004      	b.n	8003972 <HAL_GPIO_DeInit+0x6e>
 8003968:	2307      	movs	r3, #7
 800396a:	e002      	b.n	8003972 <HAL_GPIO_DeInit+0x6e>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <HAL_GPIO_DeInit+0x6e>
 8003970:	2300      	movs	r3, #0
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	f002 0203 	and.w	r2, r2, #3
 8003978:	0092      	lsls	r2, r2, #2
 800397a:	4093      	lsls	r3, r2
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	429a      	cmp	r2, r3
 8003980:	d136      	bne.n	80039f0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8003982:	4b46      	ldr	r3, [pc, #280]	@ (8003a9c <HAL_GPIO_DeInit+0x198>)
 8003984:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	43db      	mvns	r3, r3
 800398c:	4943      	ldr	r1, [pc, #268]	@ (8003a9c <HAL_GPIO_DeInit+0x198>)
 800398e:	4013      	ands	r3, r2
 8003990:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003994:	4b41      	ldr	r3, [pc, #260]	@ (8003a9c <HAL_GPIO_DeInit+0x198>)
 8003996:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	43db      	mvns	r3, r3
 800399e:	493f      	ldr	r1, [pc, #252]	@ (8003a9c <HAL_GPIO_DeInit+0x198>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80039a6:	4b3d      	ldr	r3, [pc, #244]	@ (8003a9c <HAL_GPIO_DeInit+0x198>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	493b      	ldr	r1, [pc, #236]	@ (8003a9c <HAL_GPIO_DeInit+0x198>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80039b4:	4b39      	ldr	r3, [pc, #228]	@ (8003a9c <HAL_GPIO_DeInit+0x198>)
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	43db      	mvns	r3, r3
 80039bc:	4937      	ldr	r1, [pc, #220]	@ (8003a9c <HAL_GPIO_DeInit+0x198>)
 80039be:	4013      	ands	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	2207      	movs	r2, #7
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80039d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003a90 <HAL_GPIO_DeInit+0x18c>)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	43da      	mvns	r2, r3
 80039e2:	482b      	ldr	r0, [pc, #172]	@ (8003a90 <HAL_GPIO_DeInit+0x18c>)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	400a      	ands	r2, r1
 80039ea:	3302      	adds	r3, #2
 80039ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	2103      	movs	r1, #3
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	08da      	lsrs	r2, r3, #3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3208      	adds	r2, #8
 8003a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	220f      	movs	r2, #15
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	08d2      	lsrs	r2, r2, #3
 8003a24:	4019      	ands	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3208      	adds	r2, #8
 8003a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	2103      	movs	r1, #3
 8003a38:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	401a      	ands	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	2101      	movs	r1, #1
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	401a      	ands	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2103      	movs	r1, #3
 8003a62:	fa01 f303 	lsl.w	r3, r1, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	401a      	ands	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	3301      	adds	r3, #1
 8003a72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f47f af49 	bne.w	8003914 <HAL_GPIO_DeInit+0x10>
  }
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40010000 	.word	0x40010000
 8003a94:	48000400 	.word	0x48000400
 8003a98:	48000800 	.word	0x48000800
 8003a9c:	58000800 	.word	0x58000800

08003aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	807b      	strh	r3, [r7, #2]
 8003aac:	4613      	mov	r3, r2
 8003aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ab0:	787b      	ldrb	r3, [r7, #1]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ab6:	887a      	ldrh	r2, [r7, #2]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003abc:	e002      	b.n	8003ac4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003abe:	887a      	ldrh	r2, [r7, #2]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ada:	4b08      	ldr	r3, [pc, #32]	@ (8003afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d006      	beq.n	8003af4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ae6:	4a05      	ldr	r2, [pc, #20]	@ (8003afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f806 	bl	8003b00 <HAL_GPIO_EXTI_Callback>
  }
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	58000800 	.word	0x58000800

08003b00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b18:	4b04      	ldr	r3, [pc, #16]	@ (8003b2c <HAL_PWR_EnableBkUpAccess+0x18>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a03      	ldr	r2, [pc, #12]	@ (8003b2c <HAL_PWR_EnableBkUpAccess+0x18>)
 8003b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	58000400 	.word	0x58000400

08003b30 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003b42:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b4e:	d10d      	bne.n	8003b6c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003b50:	f000 f83c 	bl	8003bcc <HAL_PWREx_DisableLowPowerRunMode>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8003b5a:	e015      	b.n	8003b88 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003b68:	f000 f822 	bl	8003bb0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003b6c:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	4a08      	ldr	r2, [pc, #32]	@ (8003b94 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003b72:	f023 0304 	bic.w	r3, r3, #4
 8003b76:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003b7e:	bf30      	wfi
 8003b80:	e002      	b.n	8003b88 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003b82:	bf40      	sev
    __WFE();
 8003b84:	bf20      	wfe
    __WFE();
 8003b86:	bf20      	wfe
  }
}
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	58000400 	.word	0x58000400
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003b9c:	4b03      	ldr	r3, [pc, #12]	@ (8003bac <HAL_PWREx_GetVoltageRange+0x14>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	58000400 	.word	0x58000400

08003bb0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003bb4:	4b04      	ldr	r3, [pc, #16]	@ (8003bc8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a03      	ldr	r2, [pc, #12]	@ (8003bc8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8003bba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bbe:	6013      	str	r3, [r2, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	58000400 	.word	0x58000400

08003bcc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003bd2:	4b16      	ldr	r3, [pc, #88]	@ (8003c2c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a15      	ldr	r2, [pc, #84]	@ (8003c2c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8003bd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8003bde:	4b14      	ldr	r3, [pc, #80]	@ (8003c30 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2232      	movs	r2, #50	@ 0x32
 8003be4:	fb02 f303 	mul.w	r3, r2, r3
 8003be8:	4a12      	ldr	r2, [pc, #72]	@ (8003c34 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	0c9b      	lsrs	r3, r3, #18
 8003bf0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003bf2:	e002      	b.n	8003bfa <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c06:	d102      	bne.n	8003c0e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f2      	bne.n	8003bf4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003c0e:	4b07      	ldr	r3, [pc, #28]	@ (8003c2c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c1a:	d101      	bne.n	8003c20 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e000      	b.n	8003c22 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	58000400 	.word	0x58000400
 8003c30:	20000004 	.word	0x20000004
 8003c34:	431bde83 	.word	0x431bde83

08003c38 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8003c42:	4b10      	ldr	r3, [pc, #64]	@ (8003c84 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 0307 	bic.w	r3, r3, #7
 8003c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8003c84 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8003c4c:	f043 0302 	orr.w	r3, r3, #2
 8003c50:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003c52:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	4a0c      	ldr	r2, [pc, #48]	@ (8003c88 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003c64:	bf30      	wfi
 8003c66:	e002      	b.n	8003c6e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003c68:	bf40      	sev
    __WFE();
 8003c6a:	bf20      	wfe
    __WFE();
 8003c6c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003c6e:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	4a05      	ldr	r2, [pc, #20]	@ (8003c88 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003c74:	f023 0304 	bic.w	r3, r3, #4
 8003c78:	6113      	str	r3, [r2, #16]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	58000400 	.word	0x58000400
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <LL_PWR_IsEnabledBkUpAccess>:
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003c90:	4b06      	ldr	r3, [pc, #24]	@ (8003cac <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c9c:	d101      	bne.n	8003ca2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr
 8003cac:	58000400 	.word	0x58000400

08003cb0 <LL_RCC_HSE_EnableTcxo>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003cc2:	6013      	str	r3, [r2, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <LL_RCC_HSE_DisableTcxo>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cde:	6013      	str	r3, [r2, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cfa:	d101      	bne.n	8003d00 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <LL_RCC_HSE_Enable>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <LL_RCC_HSE_Disable>:
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
}
 8003d3a:	bf00      	nop
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <LL_RCC_HSE_IsReady>:
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d54:	d101      	bne.n	8003d5a <LL_RCC_HSE_IsReady+0x18>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <LL_RCC_HSE_IsReady+0x1a>
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <LL_RCC_HSI_Enable>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d76:	6013      	str	r3, [r2, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr

08003d80 <LL_RCC_HSI_Disable>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d92:	6013      	str	r3, [r2, #0]
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <LL_RCC_HSI_IsReady>:
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dae:	d101      	bne.n	8003db4 <LL_RCC_HSI_IsReady+0x18>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <LL_RCC_HSI_IsReady+0x1a>
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <LL_RCC_HSI_SetCalibTrimming>:
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	061b      	lsls	r3, r3, #24
 8003dd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <LL_RCC_LSE_IsReady>:
{
 8003de6:	b480      	push	{r7}
 8003de8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d101      	bne.n	8003dfe <LL_RCC_LSE_IsReady+0x18>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <LL_RCC_LSE_IsReady+0x1a>
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <LL_RCC_LSI_Enable>:
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <LL_RCC_LSI_Disable>:
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <LL_RCC_LSI_IsReady>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d101      	bne.n	8003e60 <LL_RCC_LSI_IsReady+0x18>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <LL_RCC_LSI_IsReady+0x1a>
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr

08003e6a <LL_RCC_MSI_Enable>:
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6013      	str	r3, [r2, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <LL_RCC_MSI_Disable>:
{
 8003e86:	b480      	push	{r7}
 8003e88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	6013      	str	r3, [r2, #0]
}
 8003e9a:	bf00      	nop
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr

08003ea2 <LL_RCC_MSI_IsReady>:
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d101      	bne.n	8003eb8 <LL_RCC_MSI_IsReady+0x16>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <LL_RCC_MSI_IsReady+0x18>
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr

08003ec2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d101      	bne.n	8003ed8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr

08003ee2 <LL_RCC_MSI_GetRange>:
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <LL_RCC_SetSysClkSource>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f023 0203 	bic.w	r2, r3, #3
 8003f4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	608b      	str	r3, [r1, #8]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <LL_RCC_GetSysClkSource>:
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr

08003f74 <LL_RCC_SetAHBPrescaler>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr

08003f9a <LL_C2_RCC_SetAHBPrescaler>:
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fa6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003faa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <LL_RCC_SetAHB3Prescaler>:
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fd0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003fd4:	f023 020f 	bic.w	r2, r3, #15
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	091b      	lsrs	r3, r3, #4
 8003fdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <LL_RCC_SetAPB1Prescaler>:
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003ff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004002:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4313      	orrs	r3, r2
 800400a:	608b      	str	r3, [r1, #8]
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <LL_RCC_SetAPB2Prescaler>:
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800401e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004028:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4313      	orrs	r3, r2
 8004030:	608b      	str	r3, [r1, #8]
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <LL_RCC_GetAHBPrescaler>:
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800404a:	4618      	mov	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr

08004052 <LL_RCC_GetAHB3Prescaler>:
{
 8004052:	b480      	push	{r7}
 8004054:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800405a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <LL_RCC_GetAPB1Prescaler>:
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800407a:	4618      	mov	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <LL_RCC_GetAPB2Prescaler>:
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004090:	4618      	mov	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800409c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040aa:	6013      	str	r3, [r2, #0]
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040c6:	6013      	str	r3, [r2, #0]
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80040d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040e2:	d101      	bne.n	80040e8 <LL_RCC_PLL_IsReady+0x18>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <LL_RCC_PLL_IsReady+0x1a>
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr

080040f2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80040f2:	b480      	push	{r7}
 80040f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80040f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	0a1b      	lsrs	r3, r3, #8
 80040fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004102:	4618      	mov	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr

0800410a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800410e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800412e:	4618      	mov	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800413a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0303 	and.w	r3, r3, #3
}
 8004144:	4618      	mov	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800415a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800415e:	d101      	bne.n	8004164 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr

0800416e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800416e:	b480      	push	{r7}
 8004170:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004176:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004182:	d101      	bne.n	8004188 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800419a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800419e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a6:	d101      	bne.n	80041ac <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr

080041b6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80041ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041c8:	d101      	bne.n	80041ce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041ea:	d101      	bne.n	80041f0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e36f      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800420e:	f7ff fea6 	bl	8003f5e <LL_RCC_GetSysClkSource>
 8004212:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004214:	f7ff ff8f 	bl	8004136 <LL_RCC_PLL_GetMainSource>
 8004218:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80c4 	beq.w	80043b0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_RCC_OscConfig+0x3e>
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	2b0c      	cmp	r3, #12
 8004232:	d176      	bne.n	8004322 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d173      	bne.n	8004322 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e353      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800424a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_RCC_OscConfig+0x68>
 8004258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004262:	e006      	b.n	8004272 <HAL_RCC_OscConfig+0x76>
 8004264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004272:	4293      	cmp	r3, r2
 8004274:	d222      	bcs.n	80042bc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fd5a 	bl	8004d34 <RCC_SetFlashLatencyFromMSIRange>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e331      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800428a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004294:	f043 0308 	orr.w	r3, r3, #8
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042ac:	4313      	orrs	r3, r2
 80042ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff fe2b 	bl	8003f10 <LL_RCC_MSI_SetCalibTrimming>
 80042ba:	e021      	b.n	8004300 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042c6:	f043 0308 	orr.w	r3, r3, #8
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fe12 	bl	8003f10 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fd1f 	bl	8004d34 <RCC_SetFlashLatencyFromMSIRange>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e2f6      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004300:	f000 fce0 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004304:	4603      	mov	r3, r0
 8004306:	4aa7      	ldr	r2, [pc, #668]	@ (80045a4 <HAL_RCC_OscConfig+0x3a8>)
 8004308:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800430a:	4ba7      	ldr	r3, [pc, #668]	@ (80045a8 <HAL_RCC_OscConfig+0x3ac>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7fd fcc4 	bl	8001c9c <HAL_InitTick>
 8004314:	4603      	mov	r3, r0
 8004316:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d047      	beq.n	80043ae <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	e2e5      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d02c      	beq.n	8004384 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800432a:	f7ff fd9e 	bl	8003e6a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800432e:	f7fd fcbf 	bl	8001cb0 <HAL_GetTick>
 8004332:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004336:	f7fd fcbb 	bl	8001cb0 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e2d2      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004348:	f7ff fdab 	bl	8003ea2 <LL_RCC_MSI_IsReady>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f1      	beq.n	8004336 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800435c:	f043 0308 	orr.w	r3, r3, #8
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004374:	4313      	orrs	r3, r2
 8004376:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fdc7 	bl	8003f10 <LL_RCC_MSI_SetCalibTrimming>
 8004382:	e015      	b.n	80043b0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004384:	f7ff fd7f 	bl	8003e86 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004388:	f7fd fc92 	bl	8001cb0 <HAL_GetTick>
 800438c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004390:	f7fd fc8e 	bl	8001cb0 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e2a5      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80043a2:	f7ff fd7e 	bl	8003ea2 <LL_RCC_MSI_IsReady>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f1      	bne.n	8004390 <HAL_RCC_OscConfig+0x194>
 80043ac:	e000      	b.n	80043b0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80043ae:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d058      	beq.n	800446e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d005      	beq.n	80043ce <HAL_RCC_OscConfig+0x1d2>
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	d108      	bne.n	80043da <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d105      	bne.n	80043da <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d14b      	bne.n	800446e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e289      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80043da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043ec:	4313      	orrs	r3, r2
 80043ee:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f8:	d102      	bne.n	8004400 <HAL_RCC_OscConfig+0x204>
 80043fa:	f7ff fc86 	bl	8003d0a <LL_RCC_HSE_Enable>
 80043fe:	e00d      	b.n	800441c <HAL_RCC_OscConfig+0x220>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004408:	d104      	bne.n	8004414 <HAL_RCC_OscConfig+0x218>
 800440a:	f7ff fc51 	bl	8003cb0 <LL_RCC_HSE_EnableTcxo>
 800440e:	f7ff fc7c 	bl	8003d0a <LL_RCC_HSE_Enable>
 8004412:	e003      	b.n	800441c <HAL_RCC_OscConfig+0x220>
 8004414:	f7ff fc87 	bl	8003d26 <LL_RCC_HSE_Disable>
 8004418:	f7ff fc58 	bl	8003ccc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d012      	beq.n	800444a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fd fc44 	bl	8001cb0 <HAL_GetTick>
 8004428:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800442c:	f7fd fc40 	bl	8001cb0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	@ 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e257      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800443e:	f7ff fc80 	bl	8003d42 <LL_RCC_HSE_IsReady>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f1      	beq.n	800442c <HAL_RCC_OscConfig+0x230>
 8004448:	e011      	b.n	800446e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444a:	f7fd fc31 	bl	8001cb0 <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004452:	f7fd fc2d 	bl	8001cb0 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b64      	cmp	r3, #100	@ 0x64
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e244      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004464:	f7ff fc6d 	bl	8003d42 <LL_RCC_HSE_IsReady>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f1      	bne.n	8004452 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d046      	beq.n	8004508 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d005      	beq.n	800448c <HAL_RCC_OscConfig+0x290>
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b0c      	cmp	r3, #12
 8004484:	d10e      	bne.n	80044a4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d10b      	bne.n	80044a4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e22a      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fc8e 	bl	8003dbe <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80044a2:	e031      	b.n	8004508 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d019      	beq.n	80044e0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ac:	f7ff fc5a 	bl	8003d64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fd fbfe 	bl	8001cb0 <HAL_GetTick>
 80044b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b8:	f7fd fbfa 	bl	8001cb0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e211      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80044ca:	f7ff fc67 	bl	8003d9c <LL_RCC_HSI_IsReady>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f1      	beq.n	80044b8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fc70 	bl	8003dbe <LL_RCC_HSI_SetCalibTrimming>
 80044de:	e013      	b.n	8004508 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e0:	f7ff fc4e 	bl	8003d80 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fd fbe4 	bl	8001cb0 <HAL_GetTick>
 80044e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ec:	f7fd fbe0 	bl	8001cb0 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e1f7      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80044fe:	f7ff fc4d 	bl	8003d9c <LL_RCC_HSI_IsReady>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1f1      	bne.n	80044ec <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d06e      	beq.n	80045f2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d056      	beq.n	80045ca <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800451c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004524:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69da      	ldr	r2, [r3, #28]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	429a      	cmp	r2, r3
 8004532:	d031      	beq.n	8004598 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d006      	beq.n	800454c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e1d0      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d013      	beq.n	800457e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004556:	f7ff fc67 	bl	8003e28 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800455a:	f7fd fba9 	bl	8001cb0 <HAL_GetTick>
 800455e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004562:	f7fd fba5 	bl	8001cb0 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b11      	cmp	r3, #17
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e1bc      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004574:	f7ff fc68 	bl	8003e48 <LL_RCC_LSI_IsReady>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f1      	bne.n	8004562 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800457e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004586:	f023 0210 	bic.w	r2, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004598:	f7ff fc36 	bl	8003e08 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459c:	f7fd fb88 	bl	8001cb0 <HAL_GetTick>
 80045a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80045a2:	e00c      	b.n	80045be <HAL_RCC_OscConfig+0x3c2>
 80045a4:	20000004 	.word	0x20000004
 80045a8:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ac:	f7fd fb80 	bl	8001cb0 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b11      	cmp	r3, #17
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e197      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80045be:	f7ff fc43 	bl	8003e48 <LL_RCC_LSI_IsReady>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f1      	beq.n	80045ac <HAL_RCC_OscConfig+0x3b0>
 80045c8:	e013      	b.n	80045f2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ca:	f7ff fc2d 	bl	8003e28 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fd fb6f 	bl	8001cb0 <HAL_GetTick>
 80045d2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d6:	f7fd fb6b 	bl	8001cb0 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b11      	cmp	r3, #17
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e182      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80045e8:	f7ff fc2e 	bl	8003e48 <LL_RCC_LSI_IsReady>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f1      	bne.n	80045d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80d8 	beq.w	80047b0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004600:	f7ff fb44 	bl	8003c8c <LL_PWR_IsEnabledBkUpAccess>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d113      	bne.n	8004632 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800460a:	f7ff fa83 	bl	8003b14 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460e:	f7fd fb4f 	bl	8001cb0 <HAL_GetTick>
 8004612:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004616:	f7fd fb4b 	bl	8001cb0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e162      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004628:	f7ff fb30 	bl	8003c8c <LL_PWR_IsEnabledBkUpAccess>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f1      	beq.n	8004616 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d07b      	beq.n	8004732 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b85      	cmp	r3, #133	@ 0x85
 8004640:	d003      	beq.n	800464a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d109      	bne.n	800465e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800464a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004652:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004656:	f043 0304 	orr.w	r3, r3, #4
 800465a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465e:	f7fd fb27 	bl	8001cb0 <HAL_GetTick>
 8004662:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800466c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004678:	e00a      	b.n	8004690 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467a:	f7fd fb19 	bl	8001cb0 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004688:	4293      	cmp	r3, r2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e12e      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004690:	f7ff fba9 	bl	8003de6 <LL_RCC_LSE_IsReady>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0ef      	beq.n	800467a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b81      	cmp	r3, #129	@ 0x81
 80046a0:	d003      	beq.n	80046aa <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2b85      	cmp	r3, #133	@ 0x85
 80046a8:	d121      	bne.n	80046ee <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046aa:	f7fd fb01 	bl	8001cb0 <HAL_GetTick>
 80046ae:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80046c4:	e00a      	b.n	80046dc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c6:	f7fd faf3 	bl	8001cb0 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e108      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80046dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0ec      	beq.n	80046c6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80046ec:	e060      	b.n	80047b0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ee:	f7fd fadf 	bl	8001cb0 <HAL_GetTick>
 80046f2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004700:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004708:	e00a      	b.n	8004720 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470a:	f7fd fad1 	bl	8001cb0 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e0e6      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ec      	bne.n	800470a <HAL_RCC_OscConfig+0x50e>
 8004730:	e03e      	b.n	80047b0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004732:	f7fd fabd 	bl	8001cb0 <HAL_GetTick>
 8004736:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800474c:	e00a      	b.n	8004764 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474e:	f7fd faaf 	bl	8001cb0 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e0c4      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1ec      	bne.n	800474e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004774:	f7fd fa9c 	bl	8001cb0 <HAL_GetTick>
 8004778:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800477a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004782:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004790:	f7fd fa8e 	bl	8001cb0 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e0a3      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80047a6:	f7ff fb1e 	bl	8003de6 <LL_RCC_LSE_IsReady>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1ef      	bne.n	8004790 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8099 	beq.w	80048ec <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	2b0c      	cmp	r3, #12
 80047be:	d06c      	beq.n	800489a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d14b      	bne.n	8004860 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c8:	f7ff fc74 	bl	80040b4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fd fa70 	bl	8001cb0 <HAL_GetTick>
 80047d0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d4:	f7fd fa6c 	bl	8001cb0 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b0a      	cmp	r3, #10
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e083      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80047e6:	f7ff fc73 	bl	80040d0 <LL_RCC_PLL_IsReady>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f1      	bne.n	80047d4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	4b40      	ldr	r3, [pc, #256]	@ (80048f8 <HAL_RCC_OscConfig+0x6fc>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004802:	4311      	orrs	r1, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004808:	0212      	lsls	r2, r2, #8
 800480a:	4311      	orrs	r1, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004810:	4311      	orrs	r1, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800481c:	430a      	orrs	r2, r1
 800481e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004822:	4313      	orrs	r3, r2
 8004824:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004826:	f7ff fc37 	bl	8004098 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800482a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004838:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483a:	f7fd fa39 	bl	8001cb0 <HAL_GetTick>
 800483e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004842:	f7fd fa35 	bl	8001cb0 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b0a      	cmp	r3, #10
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e04c      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004854:	f7ff fc3c 	bl	80040d0 <LL_RCC_PLL_IsReady>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f1      	beq.n	8004842 <HAL_RCC_OscConfig+0x646>
 800485e:	e045      	b.n	80048ec <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004860:	f7ff fc28 	bl	80040b4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004864:	f7fd fa24 	bl	8001cb0 <HAL_GetTick>
 8004868:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486c:	f7fd fa20 	bl	8001cb0 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b0a      	cmp	r3, #10
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e037      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800487e:	f7ff fc27 	bl	80040d0 <LL_RCC_PLL_IsReady>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f1      	bne.n	800486c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004892:	4b1a      	ldr	r3, [pc, #104]	@ (80048fc <HAL_RCC_OscConfig+0x700>)
 8004894:	4013      	ands	r3, r2
 8004896:	60cb      	str	r3, [r1, #12]
 8004898:	e028      	b.n	80048ec <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e023      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	f003 0203 	and.w	r2, r3, #3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d115      	bne.n	80048e8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d10e      	bne.n	80048e8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d106      	bne.n	80048e8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3720      	adds	r7, #32
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	11c1808c 	.word	0x11c1808c
 80048fc:	eefefffc 	.word	0xeefefffc

08004900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e12c      	b.n	8004b6e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004914:	4b98      	ldr	r3, [pc, #608]	@ (8004b78 <HAL_RCC_ClockConfig+0x278>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d91b      	bls.n	800495a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b95      	ldr	r3, [pc, #596]	@ (8004b78 <HAL_RCC_ClockConfig+0x278>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 0207 	bic.w	r2, r3, #7
 800492a:	4993      	ldr	r1, [pc, #588]	@ (8004b78 <HAL_RCC_ClockConfig+0x278>)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	4313      	orrs	r3, r2
 8004930:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004932:	f7fd f9bd 	bl	8001cb0 <HAL_GetTick>
 8004936:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004938:	e008      	b.n	800494c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800493a:	f7fd f9b9 	bl	8001cb0 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e110      	b.n	8004b6e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494c:	4b8a      	ldr	r3, [pc, #552]	@ (8004b78 <HAL_RCC_ClockConfig+0x278>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d1ef      	bne.n	800493a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d016      	beq.n	8004994 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fb02 	bl	8003f74 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004970:	f7fd f99e 	bl	8001cb0 <HAL_GetTick>
 8004974:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004978:	f7fd f99a 	bl	8001cb0 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e0f1      	b.n	8004b6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800498a:	f7ff fbdf 	bl	800414c <LL_RCC_IsActiveFlag_HPRE>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f1      	beq.n	8004978 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d016      	beq.n	80049ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff faf8 	bl	8003f9a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049aa:	f7fd f981 	bl	8001cb0 <HAL_GetTick>
 80049ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049b2:	f7fd f97d 	bl	8001cb0 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e0d4      	b.n	8004b6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80049c4:	f7ff fbd3 	bl	800416e <LL_RCC_IsActiveFlag_C2HPRE>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f1      	beq.n	80049b2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d016      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff faf0 	bl	8003fc4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049e4:	f7fd f964 	bl	8001cb0 <HAL_GetTick>
 80049e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049ec:	f7fd f960 	bl	8001cb0 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e0b7      	b.n	8004b6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80049fe:	f7ff fbc8 	bl	8004192 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f1      	beq.n	80049ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d016      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fae9 	bl	8003ff0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a1e:	f7fd f947 	bl	8001cb0 <HAL_GetTick>
 8004a22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a26:	f7fd f943 	bl	8001cb0 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e09a      	b.n	8004b6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a38:	f7ff fbbd 	bl	80041b6 <LL_RCC_IsActiveFlag_PPRE1>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f1      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d017      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff fade 	bl	8004016 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a5a:	f7fd f929 	bl	8001cb0 <HAL_GetTick>
 8004a5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a62:	f7fd f925 	bl	8001cb0 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e07c      	b.n	8004b6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004a74:	f7ff fbb0 	bl	80041d8 <LL_RCC_IsActiveFlag_PPRE2>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f1      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d043      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d106      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004a92:	f7ff f956 	bl	8003d42 <LL_RCC_HSE_IsReady>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d11e      	bne.n	8004ada <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e066      	b.n	8004b6e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d106      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004aa8:	f7ff fb12 	bl	80040d0 <LL_RCC_PLL_IsReady>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d113      	bne.n	8004ada <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e05b      	b.n	8004b6e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004abe:	f7ff f9f0 	bl	8003ea2 <LL_RCC_MSI_IsReady>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d108      	bne.n	8004ada <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e050      	b.n	8004b6e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004acc:	f7ff f966 	bl	8003d9c <LL_RCC_HSI_IsReady>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e049      	b.n	8004b6e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fa2a 	bl	8003f38 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ae4:	f7fd f8e4 	bl	8001cb0 <HAL_GetTick>
 8004ae8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	e00a      	b.n	8004b02 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aec:	f7fd f8e0 	bl	8001cb0 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e035      	b.n	8004b6e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	f7ff fa2c 	bl	8003f5e <LL_RCC_GetSysClkSource>
 8004b06:	4602      	mov	r2, r0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d1ec      	bne.n	8004aec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b12:	4b19      	ldr	r3, [pc, #100]	@ (8004b78 <HAL_RCC_ClockConfig+0x278>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d21b      	bcs.n	8004b58 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b20:	4b15      	ldr	r3, [pc, #84]	@ (8004b78 <HAL_RCC_ClockConfig+0x278>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f023 0207 	bic.w	r2, r3, #7
 8004b28:	4913      	ldr	r1, [pc, #76]	@ (8004b78 <HAL_RCC_ClockConfig+0x278>)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b30:	f7fd f8be 	bl	8001cb0 <HAL_GetTick>
 8004b34:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b38:	f7fd f8ba 	bl	8001cb0 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e011      	b.n	8004b6e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b78 <HAL_RCC_ClockConfig+0x278>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d1ef      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b58:	f000 f8b4 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	4a07      	ldr	r2, [pc, #28]	@ (8004b7c <HAL_RCC_ClockConfig+0x27c>)
 8004b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8004b62:	4b07      	ldr	r3, [pc, #28]	@ (8004b80 <HAL_RCC_ClockConfig+0x280>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fd f898 	bl	8001c9c <HAL_InitTick>
 8004b6c:	4603      	mov	r3, r0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	58004000 	.word	0x58004000
 8004b7c:	20000004 	.word	0x20000004
 8004b80:	20000008 	.word	0x20000008

08004b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b84:	b590      	push	{r4, r7, lr}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b92:	f7ff f9e4 	bl	8003f5e <LL_RCC_GetSysClkSource>
 8004b96:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b98:	f7ff facd 	bl	8004136 <LL_RCC_PLL_GetMainSource>
 8004b9c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x2c>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	d139      	bne.n	8004c1e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d136      	bne.n	8004c1e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004bb0:	f7ff f987 	bl	8003ec2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d115      	bne.n	8004be6 <HAL_RCC_GetSysClockFreq+0x62>
 8004bba:	f7ff f982 	bl	8003ec2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x4e>
 8004bc4:	f7ff f98d 	bl	8003ee2 <LL_RCC_MSI_GetRange>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	e005      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x5a>
 8004bd2:	f7ff f991 	bl	8003ef8 <LL_RCC_MSI_GetRangeAfterStandby>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	0a1b      	lsrs	r3, r3, #8
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	4a36      	ldr	r2, [pc, #216]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x134>)
 8004be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be4:	e014      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x8c>
 8004be6:	f7ff f96c 	bl	8003ec2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d106      	bne.n	8004bfe <HAL_RCC_GetSysClockFreq+0x7a>
 8004bf0:	f7ff f977 	bl	8003ee2 <LL_RCC_MSI_GetRange>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	091b      	lsrs	r3, r3, #4
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	e005      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x86>
 8004bfe:	f7ff f97b 	bl	8003ef8 <LL_RCC_MSI_GetRangeAfterStandby>
 8004c02:	4603      	mov	r3, r0
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	4a2b      	ldr	r2, [pc, #172]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x134>)
 8004c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c10:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d115      	bne.n	8004c44 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c1c:	e012      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d102      	bne.n	8004c2a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c24:	4b25      	ldr	r3, [pc, #148]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x138>)
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e00c      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d109      	bne.n	8004c44 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c30:	f7ff f85a 	bl	8003ce8 <LL_RCC_HSE_IsEnabledDiv2>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d102      	bne.n	8004c40 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004c3a:	4b20      	ldr	r3, [pc, #128]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x138>)
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	e001      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004c40:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004c42:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c44:	f7ff f98b 	bl	8003f5e <LL_RCC_GetSysClkSource>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d12f      	bne.n	8004cae <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004c4e:	f7ff fa72 	bl	8004136 <LL_RCC_PLL_GetMainSource>
 8004c52:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d003      	beq.n	8004c62 <HAL_RCC_GetSysClockFreq+0xde>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d003      	beq.n	8004c68 <HAL_RCC_GetSysClockFreq+0xe4>
 8004c60:	e00d      	b.n	8004c7e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004c62:	4b16      	ldr	r3, [pc, #88]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x138>)
 8004c64:	60fb      	str	r3, [r7, #12]
        break;
 8004c66:	e00d      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c68:	f7ff f83e 	bl	8003ce8 <LL_RCC_HSE_IsEnabledDiv2>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d102      	bne.n	8004c78 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004c72:	4b12      	ldr	r3, [pc, #72]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x138>)
 8004c74:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004c76:	e005      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004c78:	4b11      	ldr	r3, [pc, #68]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004c7a:	60fb      	str	r3, [r7, #12]
        break;
 8004c7c:	e002      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	60fb      	str	r3, [r7, #12]
        break;
 8004c82:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004c84:	f7ff fa35 	bl	80040f2 <LL_RCC_PLL_GetN>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	fb03 f402 	mul.w	r4, r3, r2
 8004c90:	f7ff fa46 	bl	8004120 <LL_RCC_PLL_GetDivider>
 8004c94:	4603      	mov	r3, r0
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	3301      	adds	r3, #1
 8004c9a:	fbb4 f4f3 	udiv	r4, r4, r3
 8004c9e:	f7ff fa34 	bl	800410a <LL_RCC_PLL_GetR>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	0f5b      	lsrs	r3, r3, #29
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	fbb4 f3f3 	udiv	r3, r4, r3
 8004cac:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004cae:	697b      	ldr	r3, [r7, #20]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd90      	pop	{r4, r7, pc}
 8004cb8:	08010f20 	.word	0x08010f20
 8004cbc:	00f42400 	.word	0x00f42400
 8004cc0:	01e84800 	.word	0x01e84800

08004cc4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc4:	b598      	push	{r3, r4, r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004cc8:	f7ff ff5c 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8004ccc:	4604      	mov	r4, r0
 8004cce:	f7ff f9b5 	bl	800403c <LL_RCC_GetAHBPrescaler>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	4a03      	ldr	r2, [pc, #12]	@ (8004ce8 <HAL_RCC_GetHCLKFreq+0x24>)
 8004cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd98      	pop	{r3, r4, r7, pc}
 8004ce8:	08010ec0 	.word	0x08010ec0

08004cec <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cec:	b598      	push	{r3, r4, r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004cf0:	f7ff ffe8 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	f7ff f9b9 	bl	800406c <LL_RCC_GetAPB1Prescaler>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	0a1b      	lsrs	r3, r3, #8
 8004cfe:	4a03      	ldr	r2, [pc, #12]	@ (8004d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d04:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd98      	pop	{r3, r4, r7, pc}
 8004d0c:	08010f00 	.word	0x08010f00

08004d10 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d10:	b598      	push	{r3, r4, r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004d14:	f7ff ffd6 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004d18:	4604      	mov	r4, r0
 8004d1a:	f7ff f9b2 	bl	8004082 <LL_RCC_GetAPB2Prescaler>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	0adb      	lsrs	r3, r3, #11
 8004d22:	4a03      	ldr	r2, [pc, #12]	@ (8004d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d28:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	bd98      	pop	{r3, r4, r7, pc}
 8004d30:	08010f00 	.word	0x08010f00

08004d34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004d34:	b590      	push	{r4, r7, lr}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	4a10      	ldr	r2, [pc, #64]	@ (8004d88 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004d4c:	f7ff f981 	bl	8004052 <LL_RCC_GetAHB3Prescaler>
 8004d50:	4603      	mov	r3, r0
 8004d52:	091b      	lsrs	r3, r3, #4
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	4a0c      	ldr	r2, [pc, #48]	@ (8004d8c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4a09      	ldr	r2, [pc, #36]	@ (8004d90 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	0c9c      	lsrs	r4, r3, #18
 8004d70:	f7fe ff12 	bl	8003b98 <HAL_PWREx_GetVoltageRange>
 8004d74:	4603      	mov	r3, r0
 8004d76:	4619      	mov	r1, r3
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f000 f80b 	bl	8004d94 <RCC_SetFlashLatency>
 8004d7e:	4603      	mov	r3, r0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd90      	pop	{r4, r7, pc}
 8004d88:	08010f20 	.word	0x08010f20
 8004d8c:	08010ec0 	.word	0x08010ec0
 8004d90:	431bde83 	.word	0x431bde83

08004d94 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08e      	sub	sp, #56	@ 0x38
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004d9e:	4a3a      	ldr	r2, [pc, #232]	@ (8004e88 <RCC_SetFlashLatency+0xf4>)
 8004da0:	f107 0320 	add.w	r3, r7, #32
 8004da4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004da8:	6018      	str	r0, [r3, #0]
 8004daa:	3304      	adds	r3, #4
 8004dac:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004dae:	4a37      	ldr	r2, [pc, #220]	@ (8004e8c <RCC_SetFlashLatency+0xf8>)
 8004db0:	f107 0318 	add.w	r3, r7, #24
 8004db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004db8:	6018      	str	r0, [r3, #0]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004dbe:	4a34      	ldr	r2, [pc, #208]	@ (8004e90 <RCC_SetFlashLatency+0xfc>)
 8004dc0:	f107 030c 	add.w	r3, r7, #12
 8004dc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004dca:	2300      	movs	r3, #0
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dd4:	d11b      	bne.n	8004e0e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dda:	e014      	b.n	8004e06 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	3338      	adds	r3, #56	@ 0x38
 8004de2:	443b      	add	r3, r7
 8004de4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004de8:	461a      	mov	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d807      	bhi.n	8004e00 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	3338      	adds	r3, #56	@ 0x38
 8004df6:	443b      	add	r3, r7
 8004df8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004dfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dfe:	e021      	b.n	8004e44 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e02:	3301      	adds	r3, #1
 8004e04:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d9e7      	bls.n	8004ddc <RCC_SetFlashLatency+0x48>
 8004e0c:	e01a      	b.n	8004e44 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e0e:	2300      	movs	r3, #0
 8004e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e12:	e014      	b.n	8004e3e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	3338      	adds	r3, #56	@ 0x38
 8004e1a:	443b      	add	r3, r7
 8004e1c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004e20:	461a      	mov	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d807      	bhi.n	8004e38 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	3338      	adds	r3, #56	@ 0x38
 8004e2e:	443b      	add	r3, r7
 8004e30:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004e34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e36:	e005      	b.n	8004e44 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d9e7      	bls.n	8004e14 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e44:	4b13      	ldr	r3, [pc, #76]	@ (8004e94 <RCC_SetFlashLatency+0x100>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 0207 	bic.w	r2, r3, #7
 8004e4c:	4911      	ldr	r1, [pc, #68]	@ (8004e94 <RCC_SetFlashLatency+0x100>)
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e50:	4313      	orrs	r3, r2
 8004e52:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e54:	f7fc ff2c 	bl	8001cb0 <HAL_GetTick>
 8004e58:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e5a:	e008      	b.n	8004e6e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e5c:	f7fc ff28 	bl	8001cb0 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e007      	b.n	8004e7e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e6e:	4b09      	ldr	r3, [pc, #36]	@ (8004e94 <RCC_SetFlashLatency+0x100>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d1ef      	bne.n	8004e5c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3738      	adds	r7, #56	@ 0x38
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	08010a24 	.word	0x08010a24
 8004e8c:	08010a2c 	.word	0x08010a2c
 8004e90:	08010a34 	.word	0x08010a34
 8004e94:	58004000 	.word	0x58004000

08004e98 <LL_RCC_LSE_IsReady>:
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d101      	bne.n	8004eb0 <LL_RCC_LSE_IsReady+0x18>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <LL_RCC_LSE_IsReady+0x1a>
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <LL_RCC_SetUSARTClockSource>:
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ec6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	0c1b      	lsrs	r3, r3, #16
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	401a      	ands	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr

08004eea <LL_RCC_SetI2SClockSource>:
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004efe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <LL_RCC_SetLPUARTClockSource>:
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f24:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr

08004f3e <LL_RCC_SetI2CClockSource>:
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004f56:	43db      	mvns	r3, r3
 8004f58:	401a      	ands	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004f62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <LL_RCC_SetLPTIMClockSource>:
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f82:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	401a      	ands	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	041b      	lsls	r3, r3, #16
 8004f94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr

08004fa8 <LL_RCC_SetRNGClockSource>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004fbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr

08004fd2 <LL_RCC_SetADCClockSource>:
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004fe6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <LL_RCC_SetRTCClockSource>:
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005010:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr

08005026 <LL_RCC_GetRTCClockSource>:
{
 8005026:	b480      	push	{r7}
 8005028:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800502a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005036:	4618      	mov	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr

0800503e <LL_RCC_ForceBackupDomainReset>:
{
 800503e:	b480      	push	{r7}
 8005040:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800504e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005052:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005056:	bf00      	nop
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr

0800505e <LL_RCC_ReleaseBackupDomainReset>:
{
 800505e:	b480      	push	{r7}
 8005060:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800506e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005072:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005076:	bf00      	nop
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr
	...

08005080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800508c:	2300      	movs	r3, #0
 800508e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005090:	2300      	movs	r3, #0
 8005092:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d058      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80050a0:	f7fe fd38 	bl	8003b14 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050a4:	f7fc fe04 	bl	8001cb0 <HAL_GetTick>
 80050a8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80050aa:	e009      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ac:	f7fc fe00 	bl	8001cb0 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d902      	bls.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	74fb      	strb	r3, [r7, #19]
        break;
 80050be:	e006      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80050c0:	4b7b      	ldr	r3, [pc, #492]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050cc:	d1ee      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80050ce:	7cfb      	ldrb	r3, [r7, #19]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d13c      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80050d4:	f7ff ffa7 	bl	8005026 <LL_RCC_GetRTCClockSource>
 80050d8:	4602      	mov	r2, r0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050de:	429a      	cmp	r2, r3
 80050e0:	d00f      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ee:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050f0:	f7ff ffa5 	bl	800503e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050f4:	f7ff ffb3 	bl	800505e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d014      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fc fdd0 	bl	8001cb0 <HAL_GetTick>
 8005110:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8005112:	e00b      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005114:	f7fc fdcc 	bl	8001cb0 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005122:	4293      	cmp	r3, r2
 8005124:	d902      	bls.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	74fb      	strb	r3, [r7, #19]
            break;
 800512a:	e004      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800512c:	f7ff feb4 	bl	8004e98 <LL_RCC_LSE_IsReady>
 8005130:	4603      	mov	r3, r0
 8005132:	2b01      	cmp	r3, #1
 8005134:	d1ee      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005136:	7cfb      	ldrb	r3, [r7, #19]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d105      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ff5b 	bl	8004ffc <LL_RCC_SetRTCClockSource>
 8005146:	e004      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005148:	7cfb      	ldrb	r3, [r7, #19]
 800514a:	74bb      	strb	r3, [r7, #18]
 800514c:	e001      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514e:	7cfb      	ldrb	r3, [r7, #19]
 8005150:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff fea9 	bl	8004eba <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d004      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fe9e 	bl	8004eba <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d004      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff fec0 	bl	8004f14 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fee6 	bl	8004f76 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d004      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff fedb 	bl	8004f76 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fed0 	bl	8004f76 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff fea9 	bl	8004f3e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d004      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff fe9e 	bl	8004f3e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d004      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff fe93 	bl	8004f3e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2b00      	cmp	r3, #0
 8005222:	d011      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff fe5e 	bl	8004eea <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005236:	d107      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005242:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005246:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d010      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fea5 	bl	8004fa8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005262:	2b00      	cmp	r3, #0
 8005264:	d107      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005270:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005274:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d011      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff fea3 	bl	8004fd2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005294:	d107      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80052a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	58000400 	.word	0x58000400

080052b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d071      	beq.n	80053aa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fc fb30 	bl	8001940 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80052e8:	4b32      	ldr	r3, [pc, #200]	@ (80053b4 <HAL_RTC_Init+0x100>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d051      	beq.n	8005398 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052f4:	4b2f      	ldr	r3, [pc, #188]	@ (80053b4 <HAL_RTC_Init+0x100>)
 80052f6:	22ca      	movs	r2, #202	@ 0xca
 80052f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80052fa:	4b2e      	ldr	r3, [pc, #184]	@ (80053b4 <HAL_RTC_Init+0x100>)
 80052fc:	2253      	movs	r2, #83	@ 0x53
 80052fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fa11 	bl	8005728 <RTC_EnterInitMode>
 8005306:	4603      	mov	r3, r0
 8005308:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d13f      	bne.n	8005390 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005310:	4b28      	ldr	r3, [pc, #160]	@ (80053b4 <HAL_RTC_Init+0x100>)
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	4a27      	ldr	r2, [pc, #156]	@ (80053b4 <HAL_RTC_Init+0x100>)
 8005316:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800531a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800531e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005320:	4b24      	ldr	r3, [pc, #144]	@ (80053b4 <HAL_RTC_Init+0x100>)
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6859      	ldr	r1, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	4319      	orrs	r1, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	430b      	orrs	r3, r1
 8005334:	491f      	ldr	r1, [pc, #124]	@ (80053b4 <HAL_RTC_Init+0x100>)
 8005336:	4313      	orrs	r3, r2
 8005338:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	041b      	lsls	r3, r3, #16
 8005344:	491b      	ldr	r1, [pc, #108]	@ (80053b4 <HAL_RTC_Init+0x100>)
 8005346:	4313      	orrs	r3, r2
 8005348:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800534a:	4b1a      	ldr	r3, [pc, #104]	@ (80053b4 <HAL_RTC_Init+0x100>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535a:	430b      	orrs	r3, r1
 800535c:	4915      	ldr	r1, [pc, #84]	@ (80053b4 <HAL_RTC_Init+0x100>)
 800535e:	4313      	orrs	r3, r2
 8005360:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fa14 	bl	8005790 <RTC_ExitInitMode>
 8005368:	4603      	mov	r3, r0
 800536a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10e      	bne.n	8005390 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8005372:	4b10      	ldr	r3, [pc, #64]	@ (80053b4 <HAL_RTC_Init+0x100>)
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a19      	ldr	r1, [r3, #32]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	4319      	orrs	r1, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	430b      	orrs	r3, r1
 800538a:	490a      	ldr	r1, [pc, #40]	@ (80053b4 <HAL_RTC_Init+0x100>)
 800538c:	4313      	orrs	r3, r2
 800538e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005390:	4b08      	ldr	r3, [pc, #32]	@ (80053b4 <HAL_RTC_Init+0x100>)
 8005392:	22ff      	movs	r2, #255	@ 0xff
 8005394:	625a      	str	r2, [r3, #36]	@ 0x24
 8005396:	e001      	b.n	800539c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40002800 	.word	0x40002800

080053b8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80053b8:	b590      	push	{r4, r7, lr}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_RTC_SetAlarm_IT+0x1e>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0f3      	b.n	80055be <HAL_RTC_SetAlarm_IT+0x206>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2202      	movs	r2, #2
 80053e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80053e6:	4b78      	ldr	r3, [pc, #480]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ee:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f6:	d06a      	beq.n	80054ce <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d13a      	bne.n	8005474 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80053fe:	4b72      	ldr	r3, [pc, #456]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2200      	movs	r2, #0
 800540e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f000 f9f5 	bl	800580c <RTC_ByteToBcd2>
 8005422:	4603      	mov	r3, r0
 8005424:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	785b      	ldrb	r3, [r3, #1]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f9ee 	bl	800580c <RTC_ByteToBcd2>
 8005430:	4603      	mov	r3, r0
 8005432:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005434:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	789b      	ldrb	r3, [r3, #2]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f9e6 	bl	800580c <RTC_ByteToBcd2>
 8005440:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005442:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	78db      	ldrb	r3, [r3, #3]
 800544a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800544c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f9d8 	bl	800580c <RTC_ByteToBcd2>
 800545c:	4603      	mov	r3, r0
 800545e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005460:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005468:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e02c      	b.n	80054ce <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 800547c:	d00d      	beq.n	800549a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005486:	d008      	beq.n	800549a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005488:	4b4f      	ldr	r3, [pc, #316]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2200      	movs	r2, #0
 8005498:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	785b      	ldrb	r3, [r3, #1]
 80054a4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054a6:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054ac:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	78db      	ldrb	r3, [r3, #3]
 80054b2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054b4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054bc:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054be:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054c4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054ce:	4b3e      	ldr	r3, [pc, #248]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80054d0:	22ca      	movs	r2, #202	@ 0xca
 80054d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80054d4:	4b3c      	ldr	r3, [pc, #240]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80054d6:	2253      	movs	r2, #83	@ 0x53
 80054d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e2:	d12c      	bne.n	800553e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80054e4:	4b38      	ldr	r3, [pc, #224]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	4a37      	ldr	r2, [pc, #220]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80054ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80054ee:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80054f0:	4b35      	ldr	r3, [pc, #212]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054fc:	d107      	bne.n	800550e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	4930      	ldr	r1, [pc, #192]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8005508:	4313      	orrs	r3, r2
 800550a:	644b      	str	r3, [r1, #68]	@ 0x44
 800550c:	e006      	b.n	800551c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800550e:	4a2e      	ldr	r2, [pc, #184]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005514:	4a2c      	ldr	r2, [pc, #176]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800551c:	4a2a      	ldr	r2, [pc, #168]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005528:	f043 0201 	orr.w	r2, r3, #1
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005530:	4b25      	ldr	r3, [pc, #148]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	4a24      	ldr	r2, [pc, #144]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8005536:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800553a:	6193      	str	r3, [r2, #24]
 800553c:	e02b      	b.n	8005596 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800553e:	4b22      	ldr	r3, [pc, #136]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	4a21      	ldr	r2, [pc, #132]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8005544:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8005548:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800554a:	4b1f      	ldr	r3, [pc, #124]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 800554c:	2202      	movs	r2, #2
 800554e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005556:	d107      	bne.n	8005568 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	699a      	ldr	r2, [r3, #24]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	4919      	ldr	r1, [pc, #100]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8005562:	4313      	orrs	r3, r2
 8005564:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8005566:	e006      	b.n	8005576 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005568:	4a17      	ldr	r2, [pc, #92]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800556e:	4a16      	ldr	r2, [pc, #88]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005576:	4a14      	ldr	r2, [pc, #80]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005582:	f043 0202 	orr.w	r2, r3, #2
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800558a:	4b0f      	ldr	r3, [pc, #60]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	4a0e      	ldr	r2, [pc, #56]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8005590:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8005594:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005596:	4b0d      	ldr	r3, [pc, #52]	@ (80055cc <HAL_RTC_SetAlarm_IT+0x214>)
 8005598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800559c:	4a0b      	ldr	r2, [pc, #44]	@ (80055cc <HAL_RTC_SetAlarm_IT+0x214>)
 800559e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a6:	4b08      	ldr	r3, [pc, #32]	@ (80055c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80055a8:	22ff      	movs	r2, #255	@ 0xff
 80055aa:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd90      	pop	{r4, r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40002800 	.word	0x40002800
 80055cc:	58000800 	.word	0x58000800

080055d0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_RTC_DeactivateAlarm+0x18>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e048      	b.n	800567a <HAL_RTC_DeactivateAlarm+0xaa>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055f8:	4b22      	ldr	r3, [pc, #136]	@ (8005684 <HAL_RTC_DeactivateAlarm+0xb4>)
 80055fa:	22ca      	movs	r2, #202	@ 0xca
 80055fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80055fe:	4b21      	ldr	r3, [pc, #132]	@ (8005684 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005600:	2253      	movs	r2, #83	@ 0x53
 8005602:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800560a:	d115      	bne.n	8005638 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800560c:	4b1d      	ldr	r3, [pc, #116]	@ (8005684 <HAL_RTC_DeactivateAlarm+0xb4>)
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	4a1c      	ldr	r2, [pc, #112]	@ (8005684 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005612:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005616:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005618:	4b1a      	ldr	r3, [pc, #104]	@ (8005684 <HAL_RTC_DeactivateAlarm+0xb4>)
 800561a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561c:	4a19      	ldr	r2, [pc, #100]	@ (8005684 <HAL_RTC_DeactivateAlarm+0xb4>)
 800561e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005622:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005628:	f023 0201 	bic.w	r2, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005630:	4b14      	ldr	r3, [pc, #80]	@ (8005684 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005632:	2201      	movs	r2, #1
 8005634:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005636:	e014      	b.n	8005662 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005638:	4b12      	ldr	r3, [pc, #72]	@ (8005684 <HAL_RTC_DeactivateAlarm+0xb4>)
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	4a11      	ldr	r2, [pc, #68]	@ (8005684 <HAL_RTC_DeactivateAlarm+0xb4>)
 800563e:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8005642:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005644:	4b0f      	ldr	r3, [pc, #60]	@ (8005684 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005648:	4a0e      	ldr	r2, [pc, #56]	@ (8005684 <HAL_RTC_DeactivateAlarm+0xb4>)
 800564a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800564e:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005654:	f023 0202 	bic.w	r2, r3, #2
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800565c:	4b09      	ldr	r3, [pc, #36]	@ (8005684 <HAL_RTC_DeactivateAlarm+0xb4>)
 800565e:	2202      	movs	r2, #2
 8005660:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005662:	4b08      	ldr	r3, [pc, #32]	@ (8005684 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005664:	22ff      	movs	r2, #255	@ 0xff
 8005666:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr
 8005684:	40002800 	.word	0x40002800

08005688 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005690:	4b11      	ldr	r3, [pc, #68]	@ (80056d8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005692:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80056a6:	4b0c      	ldr	r3, [pc, #48]	@ (80056d8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7fc fd9a 	bl	80021e6 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80056bc:	4b06      	ldr	r3, [pc, #24]	@ (80056d8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80056be:	2202      	movs	r2, #2
 80056c0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f94a 	bl	800595c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80056d0:	bf00      	nop
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40002800 	.word	0x40002800

080056dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80056e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005724 <HAL_RTC_WaitForSynchro+0x48>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005724 <HAL_RTC_WaitForSynchro+0x48>)
 80056ea:	f023 0320 	bic.w	r3, r3, #32
 80056ee:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80056f0:	f7fc fade 	bl	8001cb0 <HAL_GetTick>
 80056f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80056f6:	e009      	b.n	800570c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056f8:	f7fc fada 	bl	8001cb0 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005706:	d901      	bls.n	800570c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e006      	b.n	800571a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800570c:	4b05      	ldr	r3, [pc, #20]	@ (8005724 <HAL_RTC_WaitForSynchro+0x48>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ef      	beq.n	80056f8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40002800 	.word	0x40002800

08005728 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005734:	4b15      	ldr	r3, [pc, #84]	@ (800578c <RTC_EnterInitMode+0x64>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d120      	bne.n	8005782 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005740:	4b12      	ldr	r3, [pc, #72]	@ (800578c <RTC_EnterInitMode+0x64>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4a11      	ldr	r2, [pc, #68]	@ (800578c <RTC_EnterInitMode+0x64>)
 8005746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800574a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800574c:	f7fc fab0 	bl	8001cb0 <HAL_GetTick>
 8005750:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005752:	e00d      	b.n	8005770 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005754:	f7fc faac 	bl	8001cb0 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005762:	d905      	bls.n	8005770 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2203      	movs	r2, #3
 800576c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005770:	4b06      	ldr	r3, [pc, #24]	@ (800578c <RTC_EnterInitMode+0x64>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <RTC_EnterInitMode+0x5a>
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	2b03      	cmp	r3, #3
 8005780:	d1e8      	bne.n	8005754 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005782:	7bfb      	ldrb	r3, [r7, #15]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40002800 	.word	0x40002800

08005790 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800579c:	4b1a      	ldr	r3, [pc, #104]	@ (8005808 <RTC_ExitInitMode+0x78>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	4a19      	ldr	r2, [pc, #100]	@ (8005808 <RTC_ExitInitMode+0x78>)
 80057a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057a6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80057a8:	4b17      	ldr	r3, [pc, #92]	@ (8005808 <RTC_ExitInitMode+0x78>)
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10c      	bne.n	80057ce <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7ff ff91 	bl	80056dc <HAL_RTC_WaitForSynchro>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01e      	beq.n	80057fe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2203      	movs	r2, #3
 80057c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	73fb      	strb	r3, [r7, #15]
 80057cc:	e017      	b.n	80057fe <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005808 <RTC_ExitInitMode+0x78>)
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005808 <RTC_ExitInitMode+0x78>)
 80057d4:	f023 0320 	bic.w	r3, r3, #32
 80057d8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff ff7e 	bl	80056dc <HAL_RTC_WaitForSynchro>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2203      	movs	r2, #3
 80057ea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057f2:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <RTC_ExitInitMode+0x78>)
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	4a04      	ldr	r2, [pc, #16]	@ (8005808 <RTC_ExitInitMode+0x78>)
 80057f8:	f043 0320 	orr.w	r3, r3, #32
 80057fc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40002800 	.word	0x40002800

0800580c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800581e:	e005      	b.n	800582c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3301      	adds	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8005826:	7afb      	ldrb	r3, [r7, #11]
 8005828:	3b0a      	subs	r3, #10
 800582a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800582c:	7afb      	ldrb	r3, [r7, #11]
 800582e:	2b09      	cmp	r3, #9
 8005830:	d8f6      	bhi.n	8005820 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	b2da      	uxtb	r2, r3
 800583a:	7afb      	ldrb	r3, [r7, #11]
 800583c:	4313      	orrs	r3, r2
 800583e:	b2db      	uxtb	r3, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr
	...

0800584c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_RTCEx_EnableBypassShadow+0x16>
 800585e:	2302      	movs	r3, #2
 8005860:	e01f      	b.n	80058a2 <HAL_RTCEx_EnableBypassShadow+0x56>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2202      	movs	r2, #2
 800586e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005872:	4b0e      	ldr	r3, [pc, #56]	@ (80058ac <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005874:	22ca      	movs	r2, #202	@ 0xca
 8005876:	625a      	str	r2, [r3, #36]	@ 0x24
 8005878:	4b0c      	ldr	r3, [pc, #48]	@ (80058ac <HAL_RTCEx_EnableBypassShadow+0x60>)
 800587a:	2253      	movs	r2, #83	@ 0x53
 800587c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800587e:	4b0b      	ldr	r3, [pc, #44]	@ (80058ac <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	4a0a      	ldr	r2, [pc, #40]	@ (80058ac <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005884:	f043 0320 	orr.w	r3, r3, #32
 8005888:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800588a:	4b08      	ldr	r3, [pc, #32]	@ (80058ac <HAL_RTCEx_EnableBypassShadow+0x60>)
 800588c:	22ff      	movs	r2, #255	@ 0xff
 800588e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr
 80058ac:	40002800 	.word	0x40002800

080058b0 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_RTCEx_SetSSRU_IT+0x16>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e027      	b.n	8005916 <HAL_RTCEx_SetSSRU_IT+0x66>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058d6:	4b12      	ldr	r3, [pc, #72]	@ (8005920 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80058d8:	22ca      	movs	r2, #202	@ 0xca
 80058da:	625a      	str	r2, [r3, #36]	@ 0x24
 80058dc:	4b10      	ldr	r3, [pc, #64]	@ (8005920 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80058de:	2253      	movs	r2, #83	@ 0x53
 80058e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80058e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005920 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005920 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80058e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ec:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80058ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005924 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80058f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005924 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80058f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058fa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058fe:	4b08      	ldr	r3, [pc, #32]	@ (8005920 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005900:	22ff      	movs	r2, #255	@ 0xff
 8005902:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr
 8005920:	40002800 	.word	0x40002800
 8005924:	58000800 	.word	0x58000800

08005928 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005930:	4b09      	ldr	r3, [pc, #36]	@ (8005958 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8005932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800593c:	4b06      	ldr	r3, [pc, #24]	@ (8005958 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800593e:	2240      	movs	r2, #64	@ 0x40
 8005940:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fc fc59 	bl	80021fa <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40002800 	.word	0x40002800

0800595c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	4770      	bx	lr
	...

08005970 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800597c:	4b07      	ldr	r3, [pc, #28]	@ (800599c <HAL_RTCEx_BKUPWrite+0x2c>)
 800597e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4413      	add	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	601a      	str	r2, [r3, #0]
}
 8005990:	bf00      	nop
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	4000b100 	.word	0x4000b100

080059a0 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80059aa:	4b07      	ldr	r3, [pc, #28]	@ (80059c8 <HAL_RTCEx_BKUPRead+0x28>)
 80059ac:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	4000b100 	.word	0x4000b100

080059cc <LL_PWR_SetRadioBusyTrigger>:
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80059d4:	4b06      	ldr	r3, [pc, #24]	@ (80059f0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059dc:	4904      	ldr	r1, [pc, #16]	@ (80059f0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	608b      	str	r3, [r1, #8]
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bc80      	pop	{r7}
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	58000400 	.word	0x58000400

080059f4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80059f8:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80059fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fe:	4a04      	ldr	r2, [pc, #16]	@ (8005a10 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005a08:	bf00      	nop
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr
 8005a10:	58000400 	.word	0x58000400

08005a14 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a18:	4b05      	ldr	r3, [pc, #20]	@ (8005a30 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a1e:	4a04      	ldr	r2, [pc, #16]	@ (8005a30 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005a20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005a28:	bf00      	nop
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr
 8005a30:	58000400 	.word	0x58000400

08005a34 <LL_PWR_ClearFlag_RFBUSY>:
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005a38:	4b03      	ldr	r3, [pc, #12]	@ (8005a48 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8005a3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a3e:	619a      	str	r2, [r3, #24]
}
 8005a40:	bf00      	nop
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr
 8005a48:	58000400 	.word	0x58000400

08005a4c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005a50:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d101      	bne.n	8005a60 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e000      	b.n	8005a62 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	58000400 	.word	0x58000400

08005a70 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005a74:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d101      	bne.n	8005a84 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005a80:	2301      	movs	r3, #1
 8005a82:	e000      	b.n	8005a86 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	58000400 	.word	0x58000400

08005a94 <LL_RCC_RF_DisableReset>:
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aa4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005aa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005aac:	bf00      	nop
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr

08005ab4 <LL_RCC_IsRFUnderReset>:
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ac8:	d101      	bne.n	8005ace <LL_RCC_IsRFUnderReset+0x1a>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <LL_RCC_IsRFUnderReset+0x1c>
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr

08005ad8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005ae0:	4b06      	ldr	r3, [pc, #24]	@ (8005afc <LL_EXTI_EnableIT_32_63+0x24>)
 8005ae2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005ae6:	4905      	ldr	r1, [pc, #20]	@ (8005afc <LL_EXTI_EnableIT_32_63+0x24>)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	58000800 	.word	0x58000800

08005b00 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d103      	bne.n	8005b16 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	73fb      	strb	r3, [r7, #15]
    return status;
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	e052      	b.n	8005bbc <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	799b      	ldrb	r3, [r3, #6]
 8005b1e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005b20:	7bbb      	ldrb	r3, [r7, #14]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_SUBGHZ_Init+0x2c>
 8005b26:	7bbb      	ldrb	r3, [r7, #14]
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d109      	bne.n	8005b40 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fc f820 	bl	8001b78 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8005b38:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005b3c:	f7ff ffcc 	bl	8005ad8 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005b40:	7bbb      	ldrb	r3, [r7, #14]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d126      	bne.n	8005b94 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8005b4c:	f7ff ffa2 	bl	8005a94 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005b50:	4b1c      	ldr	r3, [pc, #112]	@ (8005bc4 <HAL_SUBGHZ_Init+0xc4>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4613      	mov	r3, r2
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	1a9b      	subs	r3, r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	0cdb      	lsrs	r3, r3, #19
 8005b5e:	2264      	movs	r2, #100	@ 0x64
 8005b60:	fb02 f303 	mul.w	r3, r2, r3
 8005b64:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d105      	bne.n	8005b78 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	609a      	str	r2, [r3, #8]
        break;
 8005b76:	e007      	b.n	8005b88 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8005b7e:	f7ff ff99 	bl	8005ab4 <LL_RCC_IsRFUnderReset>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1ee      	bne.n	8005b66 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005b88:	f7ff ff34 	bl	80059f4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005b8c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005b90:	f7ff ff1c 	bl	80059cc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005b94:	f7ff ff4e 	bl	8005a34 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 faac 	bl	8006100 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	719a      	strb	r2, [r3, #6]

  return status;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000004 	.word	0x20000004

08005bc8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	817b      	strh	r3, [r7, #10]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	799b      	ldrb	r3, [r3, #6]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d14a      	bne.n	8005c7c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	795b      	ldrb	r3, [r3, #5]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e045      	b.n	8005c7e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 fb4c 	bl	800629c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005c04:	f7ff ff06 	bl	8005a14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005c08:	210d      	movs	r1, #13
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fa98 	bl	8006140 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005c10:	897b      	ldrh	r3, [r7, #10]
 8005c12:	0a1b      	lsrs	r3, r3, #8
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	4619      	mov	r1, r3
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 fa90 	bl	8006140 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005c20:	897b      	ldrh	r3, [r7, #10]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	4619      	mov	r1, r3
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fa8a 	bl	8006140 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	82bb      	strh	r3, [r7, #20]
 8005c30:	e00a      	b.n	8005c48 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005c32:	8abb      	ldrh	r3, [r7, #20]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fa7f 	bl	8006140 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005c42:	8abb      	ldrh	r3, [r7, #20]
 8005c44:	3301      	adds	r3, #1
 8005c46:	82bb      	strh	r3, [r7, #20]
 8005c48:	8aba      	ldrh	r2, [r7, #20]
 8005c4a:	893b      	ldrh	r3, [r7, #8]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d3f0      	bcc.n	8005c32 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005c50:	f7ff fed0 	bl	80059f4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 fb45 	bl	80062e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	75fb      	strb	r3, [r7, #23]
 8005c66:	e001      	b.n	8005c6c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	715a      	strb	r2, [r3, #5]

    return status;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	e000      	b.n	8005c7e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b088      	sub	sp, #32
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	461a      	mov	r2, r3
 8005c92:	460b      	mov	r3, r1
 8005c94:	817b      	strh	r3, [r7, #10]
 8005c96:	4613      	mov	r3, r2
 8005c98:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	799b      	ldrb	r3, [r3, #6]
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d14a      	bne.n	8005d3e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	795b      	ldrb	r3, [r3, #5]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e045      	b.n	8005d40 <HAL_SUBGHZ_ReadRegisters+0xba>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 faee 	bl	800629c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005cc0:	f7ff fea8 	bl	8005a14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005cc4:	211d      	movs	r1, #29
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fa3a 	bl	8006140 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005ccc:	897b      	ldrh	r3, [r7, #10]
 8005cce:	0a1b      	lsrs	r3, r3, #8
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 fa32 	bl	8006140 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005cdc:	897b      	ldrh	r3, [r7, #10]
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 fa2c 	bl	8006140 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005ce8:	2100      	movs	r1, #0
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 fa28 	bl	8006140 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	82fb      	strh	r3, [r7, #22]
 8005cf4:	e009      	b.n	8005d0a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005cf6:	69b9      	ldr	r1, [r7, #24]
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 fa77 	bl	80061ec <SUBGHZSPI_Receive>
      pData++;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	3301      	adds	r3, #1
 8005d02:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005d04:	8afb      	ldrh	r3, [r7, #22]
 8005d06:	3301      	adds	r3, #1
 8005d08:	82fb      	strh	r3, [r7, #22]
 8005d0a:	8afa      	ldrh	r2, [r7, #22]
 8005d0c:	893b      	ldrh	r3, [r7, #8]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d3f1      	bcc.n	8005cf6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005d12:	f7ff fe6f 	bl	80059f4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 fae4 	bl	80062e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	77fb      	strb	r3, [r7, #31]
 8005d28:	e001      	b.n	8005d2e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	715a      	strb	r2, [r3, #5]

    return status;
 8005d3a:	7ffb      	ldrb	r3, [r7, #31]
 8005d3c:	e000      	b.n	8005d40 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005d3e:	2302      	movs	r3, #2
  }
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3720      	adds	r7, #32
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	461a      	mov	r2, r3
 8005d54:	460b      	mov	r3, r1
 8005d56:	72fb      	strb	r3, [r7, #11]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	799b      	ldrb	r3, [r3, #6]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d14a      	bne.n	8005dfc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	795b      	ldrb	r3, [r3, #5]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e045      	b.n	8005dfe <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fa8f 	bl	800629c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	2b84      	cmp	r3, #132	@ 0x84
 8005d82:	d002      	beq.n	8005d8a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8005d84:	7afb      	ldrb	r3, [r7, #11]
 8005d86:	2b94      	cmp	r3, #148	@ 0x94
 8005d88:	d103      	bne.n	8005d92 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	711a      	strb	r2, [r3, #4]
 8005d90:	e002      	b.n	8005d98 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005d98:	f7ff fe3c 	bl	8005a14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005d9c:	7afb      	ldrb	r3, [r7, #11]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f9cd 	bl	8006140 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005da6:	2300      	movs	r3, #0
 8005da8:	82bb      	strh	r3, [r7, #20]
 8005daa:	e00a      	b.n	8005dc2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005dac:	8abb      	ldrh	r3, [r7, #20]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	4413      	add	r3, r2
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	4619      	mov	r1, r3
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f9c2 	bl	8006140 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005dbc:	8abb      	ldrh	r3, [r7, #20]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	82bb      	strh	r3, [r7, #20]
 8005dc2:	8aba      	ldrh	r2, [r7, #20]
 8005dc4:	893b      	ldrh	r3, [r7, #8]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d3f0      	bcc.n	8005dac <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005dca:	f7ff fe13 	bl	80059f4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005dce:	7afb      	ldrb	r3, [r7, #11]
 8005dd0:	2b84      	cmp	r3, #132	@ 0x84
 8005dd2:	d002      	beq.n	8005dda <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fa85 	bl	80062e4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	75fb      	strb	r3, [r7, #23]
 8005de6:	e001      	b.n	8005dec <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	715a      	strb	r2, [r3, #5]

    return status;
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
 8005dfa:	e000      	b.n	8005dfe <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005dfc:	2302      	movs	r3, #2
  }
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b088      	sub	sp, #32
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	461a      	mov	r2, r3
 8005e12:	460b      	mov	r3, r1
 8005e14:	72fb      	strb	r3, [r7, #11]
 8005e16:	4613      	mov	r3, r2
 8005e18:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	799b      	ldrb	r3, [r3, #6]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d13d      	bne.n	8005ea4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	795b      	ldrb	r3, [r3, #5]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e038      	b.n	8005ea6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 fa2e 	bl	800629c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005e40:	f7ff fde8 	bl	8005a14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005e44:	7afb      	ldrb	r3, [r7, #11]
 8005e46:	4619      	mov	r1, r3
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f979 	bl	8006140 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005e4e:	2100      	movs	r1, #0
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f975 	bl	8006140 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005e56:	2300      	movs	r3, #0
 8005e58:	82fb      	strh	r3, [r7, #22]
 8005e5a:	e009      	b.n	8005e70 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f9c4 	bl	80061ec <SUBGHZSPI_Receive>
      pData++;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	3301      	adds	r3, #1
 8005e68:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005e6a:	8afb      	ldrh	r3, [r7, #22]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	82fb      	strh	r3, [r7, #22]
 8005e70:	8afa      	ldrh	r2, [r7, #22]
 8005e72:	893b      	ldrh	r3, [r7, #8]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d3f1      	bcc.n	8005e5c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005e78:	f7ff fdbc 	bl	80059f4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fa31 	bl	80062e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	77fb      	strb	r3, [r7, #31]
 8005e8e:	e001      	b.n	8005e94 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	715a      	strb	r2, [r3, #5]

    return status;
 8005ea0:	7ffb      	ldrb	r3, [r7, #31]
 8005ea2:	e000      	b.n	8005ea6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005ea4:	2302      	movs	r3, #2
  }
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3720      	adds	r7, #32
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b086      	sub	sp, #24
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	460b      	mov	r3, r1
 8005ebc:	72fb      	strb	r3, [r7, #11]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	799b      	ldrb	r3, [r3, #6]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d13e      	bne.n	8005f4a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	795b      	ldrb	r3, [r3, #5]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e039      	b.n	8005f4c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f9dc 	bl	800629c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005ee4:	f7ff fd96 	bl	8005a14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005ee8:	210e      	movs	r1, #14
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 f928 	bl	8006140 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005ef0:	7afb      	ldrb	r3, [r7, #11]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f923 	bl	8006140 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005efa:	2300      	movs	r3, #0
 8005efc:	82bb      	strh	r3, [r7, #20]
 8005efe:	e00a      	b.n	8005f16 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005f00:	8abb      	ldrh	r3, [r7, #20]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	4413      	add	r3, r2
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f918 	bl	8006140 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005f10:	8abb      	ldrh	r3, [r7, #20]
 8005f12:	3301      	adds	r3, #1
 8005f14:	82bb      	strh	r3, [r7, #20]
 8005f16:	8aba      	ldrh	r2, [r7, #20]
 8005f18:	893b      	ldrh	r3, [r7, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d3f0      	bcc.n	8005f00 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005f1e:	f7ff fd69 	bl	80059f4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f9de 	bl	80062e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	75fb      	strb	r3, [r7, #23]
 8005f34:	e001      	b.n	8005f3a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	715a      	strb	r2, [r3, #5]

    return status;
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
 8005f48:	e000      	b.n	8005f4c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005f4a:	2302      	movs	r3, #2
  }
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	460b      	mov	r3, r1
 8005f62:	72fb      	strb	r3, [r7, #11]
 8005f64:	4613      	mov	r3, r2
 8005f66:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	799b      	ldrb	r3, [r3, #6]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d141      	bne.n	8005ffa <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	795b      	ldrb	r3, [r3, #5]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e03c      	b.n	8005ffc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f987 	bl	800629c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005f8e:	f7ff fd41 	bl	8005a14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005f92:	211e      	movs	r1, #30
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 f8d3 	bl	8006140 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005f9a:	7afb      	ldrb	r3, [r7, #11]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f8ce 	bl	8006140 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f8ca 	bl	8006140 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005fac:	2300      	movs	r3, #0
 8005fae:	82fb      	strh	r3, [r7, #22]
 8005fb0:	e009      	b.n	8005fc6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005fb2:	69b9      	ldr	r1, [r7, #24]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f919 	bl	80061ec <SUBGHZSPI_Receive>
      pData++;
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005fc0:	8afb      	ldrh	r3, [r7, #22]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	82fb      	strh	r3, [r7, #22]
 8005fc6:	8afa      	ldrh	r2, [r7, #22]
 8005fc8:	893b      	ldrh	r3, [r7, #8]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d3f1      	bcc.n	8005fb2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005fce:	f7ff fd11 	bl	80059f4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f986 	bl	80062e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	e001      	b.n	8005fea <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	715a      	strb	r2, [r3, #5]

    return status;
 8005ff6:	7ffb      	ldrb	r3, [r7, #31]
 8005ff8:	e000      	b.n	8005ffc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005ffa:	2302      	movs	r3, #2
  }
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3720      	adds	r7, #32
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800600c:	2300      	movs	r3, #0
 800600e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006010:	f107 020c 	add.w	r2, r7, #12
 8006014:	2302      	movs	r3, #2
 8006016:	2112      	movs	r1, #18
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff fef4 	bl	8005e06 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800601e:	7b3b      	ldrb	r3, [r7, #12]
 8006020:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006022:	89fb      	ldrh	r3, [r7, #14]
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	b21a      	sxth	r2, r3
 8006028:	7b7b      	ldrb	r3, [r7, #13]
 800602a:	b21b      	sxth	r3, r3
 800602c:	4313      	orrs	r3, r2
 800602e:	b21b      	sxth	r3, r3
 8006030:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006032:	f107 020c 	add.w	r2, r7, #12
 8006036:	2302      	movs	r3, #2
 8006038:	2102      	movs	r1, #2
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff fe84 	bl	8005d48 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006040:	89fb      	ldrh	r3, [r7, #14]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f005 fbf0 	bl	800b830 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006050:	89fb      	ldrh	r3, [r7, #14]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f005 fbf6 	bl	800b84c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006060:	89fb      	ldrh	r3, [r7, #14]
 8006062:	f003 0304 	and.w	r3, r3, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f005 fc46 	bl	800b8fc <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006070:	89fb      	ldrh	r3, [r7, #14]
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f005 fc4c 	bl	800b918 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006080:	89fb      	ldrh	r3, [r7, #14]
 8006082:	f003 0310 	and.w	r3, r3, #16
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f005 fc52 	bl	800b934 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006090:	89fb      	ldrh	r3, [r7, #14]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f005 fc20 	bl	800b8e0 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80060a0:	89fb      	ldrh	r3, [r7, #14]
 80060a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f005 fbdc 	bl	800b868 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80060b0:	89fb      	ldrh	r3, [r7, #14]
 80060b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00d      	beq.n	80060d6 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80060ba:	89fb      	ldrh	r3, [r7, #14]
 80060bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d004      	beq.n	80060ce <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80060c4:	2101      	movs	r1, #1
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f005 fbdc 	bl	800b884 <HAL_SUBGHZ_CADStatusCallback>
 80060cc:	e003      	b.n	80060d6 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80060ce:	2100      	movs	r1, #0
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f005 fbd7 	bl	800b884 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80060d6:	89fb      	ldrh	r3, [r7, #14]
 80060d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f005 fbed 	bl	800b8c0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80060e6:	89fb      	ldrh	r3, [r7, #14]
 80060e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f005 fc2d 	bl	800b950 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80060f6:	bf00      	nop
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006108:	4b0c      	ldr	r3, [pc, #48]	@ (800613c <SUBGHZSPI_Init+0x3c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a0b      	ldr	r2, [pc, #44]	@ (800613c <SUBGHZSPI_Init+0x3c>)
 800610e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006112:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006114:	4a09      	ldr	r2, [pc, #36]	@ (800613c <SUBGHZSPI_Init+0x3c>)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 800611c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800611e:	4b07      	ldr	r3, [pc, #28]	@ (800613c <SUBGHZSPI_Init+0x3c>)
 8006120:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8006124:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006126:	4b05      	ldr	r3, [pc, #20]	@ (800613c <SUBGHZSPI_Init+0x3c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a04      	ldr	r2, [pc, #16]	@ (800613c <SUBGHZSPI_Init+0x3c>)
 800612c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006130:	6013      	str	r3, [r2, #0]
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr
 800613c:	58010000 	.word	0x58010000

08006140 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006150:	4b23      	ldr	r3, [pc, #140]	@ (80061e0 <SUBGHZSPI_Transmit+0xa0>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	0cdb      	lsrs	r3, r3, #19
 800615e:	2264      	movs	r2, #100	@ 0x64
 8006160:	fb02 f303 	mul.w	r3, r2, r3
 8006164:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d105      	bne.n	8006178 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	609a      	str	r2, [r3, #8]
      break;
 8006176:	e008      	b.n	800618a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3b01      	subs	r3, #1
 800617c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800617e:	4b19      	ldr	r3, [pc, #100]	@ (80061e4 <SUBGHZSPI_Transmit+0xa4>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b02      	cmp	r3, #2
 8006188:	d1ed      	bne.n	8006166 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800618a:	4b17      	ldr	r3, [pc, #92]	@ (80061e8 <SUBGHZSPI_Transmit+0xa8>)
 800618c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	78fa      	ldrb	r2, [r7, #3]
 8006192:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006194:	4b12      	ldr	r3, [pc, #72]	@ (80061e0 <SUBGHZSPI_Transmit+0xa0>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	1a9b      	subs	r3, r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	0cdb      	lsrs	r3, r3, #19
 80061a2:	2264      	movs	r2, #100	@ 0x64
 80061a4:	fb02 f303 	mul.w	r3, r2, r3
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d105      	bne.n	80061bc <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	609a      	str	r2, [r3, #8]
      break;
 80061ba:	e008      	b.n	80061ce <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3b01      	subs	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80061c2:	4b08      	ldr	r3, [pc, #32]	@ (80061e4 <SUBGHZSPI_Transmit+0xa4>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d1ed      	bne.n	80061aa <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80061ce:	4b05      	ldr	r3, [pc, #20]	@ (80061e4 <SUBGHZSPI_Transmit+0xa4>)
 80061d0:	68db      	ldr	r3, [r3, #12]

  return status;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20000004 	.word	0x20000004
 80061e4:	58010000 	.word	0x58010000
 80061e8:	5801000c 	.word	0x5801000c

080061ec <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80061fa:	4b25      	ldr	r3, [pc, #148]	@ (8006290 <SUBGHZSPI_Receive+0xa4>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4613      	mov	r3, r2
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	0cdb      	lsrs	r3, r3, #19
 8006208:	2264      	movs	r2, #100	@ 0x64
 800620a:	fb02 f303 	mul.w	r3, r2, r3
 800620e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d105      	bne.n	8006222 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	609a      	str	r2, [r3, #8]
      break;
 8006220:	e008      	b.n	8006234 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3b01      	subs	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006228:	4b1a      	ldr	r3, [pc, #104]	@ (8006294 <SUBGHZSPI_Receive+0xa8>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b02      	cmp	r3, #2
 8006232:	d1ed      	bne.n	8006210 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006234:	4b18      	ldr	r3, [pc, #96]	@ (8006298 <SUBGHZSPI_Receive+0xac>)
 8006236:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	22ff      	movs	r2, #255	@ 0xff
 800623c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800623e:	4b14      	ldr	r3, [pc, #80]	@ (8006290 <SUBGHZSPI_Receive+0xa4>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4613      	mov	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	1a9b      	subs	r3, r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	0cdb      	lsrs	r3, r3, #19
 800624c:	2264      	movs	r2, #100	@ 0x64
 800624e:	fb02 f303 	mul.w	r3, r2, r3
 8006252:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	609a      	str	r2, [r3, #8]
      break;
 8006264:	e008      	b.n	8006278 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3b01      	subs	r3, #1
 800626a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800626c:	4b09      	ldr	r3, [pc, #36]	@ (8006294 <SUBGHZSPI_Receive+0xa8>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b01      	cmp	r3, #1
 8006276:	d1ed      	bne.n	8006254 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006278:	4b06      	ldr	r3, [pc, #24]	@ (8006294 <SUBGHZSPI_Receive+0xa8>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	701a      	strb	r2, [r3, #0]

  return status;
 8006282:	7dfb      	ldrb	r3, [r7, #23]
}
 8006284:	4618      	mov	r0, r3
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	bc80      	pop	{r7}
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	20000004 	.word	0x20000004
 8006294:	58010000 	.word	0x58010000
 8006298:	5801000c 	.word	0x5801000c

0800629c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	791b      	ldrb	r3, [r3, #4]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d111      	bne.n	80062d0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80062ac:	4b0c      	ldr	r3, [pc, #48]	@ (80062e0 <SUBGHZ_CheckDeviceReady+0x44>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	4413      	add	r3, r2
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	0c1b      	lsrs	r3, r3, #16
 80062ba:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80062bc:	f7ff fbaa 	bl	8005a14 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f9      	bne.n	80062c0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80062cc:	f7ff fb92 	bl	80059f4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f807 	bl	80062e4 <SUBGHZ_WaitOnBusy>
 80062d6:	4603      	mov	r3, r0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20000004 	.word	0x20000004

080062e4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80062f0:	4b12      	ldr	r3, [pc, #72]	@ (800633c <SUBGHZ_WaitOnBusy+0x58>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	4613      	mov	r3, r2
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	4413      	add	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	0d1b      	lsrs	r3, r3, #20
 80062fe:	2264      	movs	r2, #100	@ 0x64
 8006300:	fb02 f303 	mul.w	r3, r2, r3
 8006304:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8006306:	f7ff fbb3 	bl	8005a70 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800630a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d105      	bne.n	800631e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2202      	movs	r2, #2
 800631a:	609a      	str	r2, [r3, #8]
      break;
 800631c:	e009      	b.n	8006332 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3b01      	subs	r3, #1
 8006322:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006324:	f7ff fb92 	bl	8005a4c <LL_PWR_IsActiveFlag_RFBUSYS>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	4013      	ands	r3, r2
 800632e:	2b01      	cmp	r3, #1
 8006330:	d0e9      	beq.n	8006306 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8006332:	7dfb      	ldrb	r3, [r7, #23]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20000004 	.word	0x20000004

08006340 <LL_RCC_GetUSARTClockSource>:
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800634c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	401a      	ands	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	041b      	lsls	r3, r3, #16
 8006358:	4313      	orrs	r3, r2
}
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	bc80      	pop	{r7}
 8006362:	4770      	bx	lr

08006364 <LL_RCC_GetLPUARTClockSource>:
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800636c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006370:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4013      	ands	r3, r2
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	bc80      	pop	{r7}
 8006380:	4770      	bx	lr

08006382 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e042      	b.n	800641a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fc f8b6 	bl	8002518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2224      	movs	r2, #36	@ 0x24
 80063b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0201 	bic.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fc3b 	bl	8006c40 <UART_SetConfig>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e022      	b.n	800641a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fea3 	bl	8007128 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006400:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0201 	orr.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 ff29 	bl	800726a <UART_CheckIdleState>
 8006418:	4603      	mov	r3, r0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	@ 0x28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	4613      	mov	r3, r2
 8006430:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006438:	2b20      	cmp	r3, #32
 800643a:	d137      	bne.n	80064ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <HAL_UART_Receive_IT+0x24>
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e030      	b.n	80064ae <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a18      	ldr	r2, [pc, #96]	@ (80064b8 <HAL_UART_Receive_IT+0x94>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d01f      	beq.n	800649c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d018      	beq.n	800649c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	613b      	str	r3, [r7, #16]
   return(result);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800647e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	461a      	mov	r2, r3
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	623b      	str	r3, [r7, #32]
 800648a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	69f9      	ldr	r1, [r7, #28]
 800648e:	6a3a      	ldr	r2, [r7, #32]
 8006490:	e841 2300 	strex	r3, r2, [r1]
 8006494:	61bb      	str	r3, [r7, #24]
   return(result);
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e6      	bne.n	800646a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	461a      	mov	r2, r3
 80064a0:	68b9      	ldr	r1, [r7, #8]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fff8 	bl	8007498 <UART_Start_Receive_IT>
 80064a8:	4603      	mov	r3, r0
 80064aa:	e000      	b.n	80064ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
  }
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3728      	adds	r7, #40	@ 0x28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	40008000 	.word	0x40008000

080064bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	@ 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d167      	bne.n	80065a4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_UART_Transmit_DMA+0x24>
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e060      	b.n	80065a6 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	88fa      	ldrh	r2, [r7, #6]
 80064ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	88fa      	ldrh	r2, [r7, #6]
 80064f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2221      	movs	r2, #33	@ 0x21
 8006506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d028      	beq.n	8006564 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006516:	4a26      	ldr	r2, [pc, #152]	@ (80065b0 <HAL_UART_Transmit_DMA+0xf4>)
 8006518:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800651e:	4a25      	ldr	r2, [pc, #148]	@ (80065b4 <HAL_UART_Transmit_DMA+0xf8>)
 8006520:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006526:	4a24      	ldr	r2, [pc, #144]	@ (80065b8 <HAL_UART_Transmit_DMA+0xfc>)
 8006528:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800652e:	2200      	movs	r2, #0
 8006530:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800653a:	4619      	mov	r1, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3328      	adds	r3, #40	@ 0x28
 8006542:	461a      	mov	r2, r3
 8006544:	88fb      	ldrh	r3, [r7, #6]
 8006546:	f7fc fda3 	bl	8003090 <HAL_DMA_Start_IT>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d009      	beq.n	8006564 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2210      	movs	r2, #16
 8006554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e020      	b.n	80065a6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2240      	movs	r2, #64	@ 0x40
 800656a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3308      	adds	r3, #8
 8006572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	613b      	str	r3, [r7, #16]
   return(result);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006582:	627b      	str	r3, [r7, #36]	@ 0x24
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3308      	adds	r3, #8
 800658a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800658c:	623a      	str	r2, [r7, #32]
 800658e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	69f9      	ldr	r1, [r7, #28]
 8006592:	6a3a      	ldr	r2, [r7, #32]
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	61bb      	str	r3, [r7, #24]
   return(result);
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e5      	bne.n	800656c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e000      	b.n	80065a6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80065a4:	2302      	movs	r3, #2
  }
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3728      	adds	r7, #40	@ 0x28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	08007823 	.word	0x08007823
 80065b4:	080078bd 	.word	0x080078bd
 80065b8:	080078d9 	.word	0x080078d9

080065bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b0ba      	sub	sp, #232	@ 0xe8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80065e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80065ea:	4013      	ands	r3, r2
 80065ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80065f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d11b      	bne.n	8006630 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b00      	cmp	r3, #0
 8006602:	d015      	beq.n	8006630 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d009      	beq.n	8006630 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 82e3 	beq.w	8006bec <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
      }
      return;
 800662e:	e2dd      	b.n	8006bec <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006630:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 8123 	beq.w	8006880 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800663a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800663e:	4b8d      	ldr	r3, [pc, #564]	@ (8006874 <HAL_UART_IRQHandler+0x2b8>)
 8006640:	4013      	ands	r3, r2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006646:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800664a:	4b8b      	ldr	r3, [pc, #556]	@ (8006878 <HAL_UART_IRQHandler+0x2bc>)
 800664c:	4013      	ands	r3, r2
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 8116 	beq.w	8006880 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d011      	beq.n	8006684 <HAL_UART_IRQHandler+0xc8>
 8006660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2201      	movs	r2, #1
 8006672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667a:	f043 0201 	orr.w	r2, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d011      	beq.n	80066b4 <HAL_UART_IRQHandler+0xf8>
 8006690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2202      	movs	r2, #2
 80066a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066aa:	f043 0204 	orr.w	r2, r3, #4
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d011      	beq.n	80066e4 <HAL_UART_IRQHandler+0x128>
 80066c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2204      	movs	r2, #4
 80066d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066da:	f043 0202 	orr.w	r2, r3, #2
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d017      	beq.n	8006720 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d105      	bne.n	8006708 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006700:	4b5c      	ldr	r3, [pc, #368]	@ (8006874 <HAL_UART_IRQHandler+0x2b8>)
 8006702:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2208      	movs	r2, #8
 800670e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006716:	f043 0208 	orr.w	r2, r3, #8
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006724:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006728:	2b00      	cmp	r3, #0
 800672a:	d012      	beq.n	8006752 <HAL_UART_IRQHandler+0x196>
 800672c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006730:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00c      	beq.n	8006752 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006740:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006748:	f043 0220 	orr.w	r2, r3, #32
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 8249 	beq.w	8006bf0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800675e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d013      	beq.n	8006792 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800676a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b00      	cmp	r3, #0
 8006774:	d105      	bne.n	8006782 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800677a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006798:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a6:	2b40      	cmp	r3, #64	@ 0x40
 80067a8:	d005      	beq.n	80067b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d054      	beq.n	8006860 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 ffce 	bl	8007758 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c6:	2b40      	cmp	r3, #64	@ 0x40
 80067c8:	d146      	bne.n	8006858 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3308      	adds	r3, #8
 80067d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3308      	adds	r3, #8
 80067f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006802:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800680e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1d9      	bne.n	80067ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800681c:	2b00      	cmp	r3, #0
 800681e:	d017      	beq.n	8006850 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006826:	4a15      	ldr	r2, [pc, #84]	@ (800687c <HAL_UART_IRQHandler+0x2c0>)
 8006828:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006830:	4618      	mov	r0, r3
 8006832:	f7fc fd09 	bl	8003248 <HAL_DMA_Abort_IT>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d019      	beq.n	8006870 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800684a:	4610      	mov	r0, r2
 800684c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684e:	e00f      	b.n	8006870 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f9e0 	bl	8006c16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006856:	e00b      	b.n	8006870 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f9dc 	bl	8006c16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800685e:	e007      	b.n	8006870 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f9d8 	bl	8006c16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800686e:	e1bf      	b.n	8006bf0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006870:	bf00      	nop
    return;
 8006872:	e1bd      	b.n	8006bf0 <HAL_UART_IRQHandler+0x634>
 8006874:	10000001 	.word	0x10000001
 8006878:	04000120 	.word	0x04000120
 800687c:	08007959 	.word	0x08007959

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006884:	2b01      	cmp	r3, #1
 8006886:	f040 8153 	bne.w	8006b30 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800688a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800688e:	f003 0310 	and.w	r3, r3, #16
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 814c 	beq.w	8006b30 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800689c:	f003 0310 	and.w	r3, r3, #16
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 8145 	beq.w	8006b30 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2210      	movs	r2, #16
 80068ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b8:	2b40      	cmp	r3, #64	@ 0x40
 80068ba:	f040 80bb 	bne.w	8006a34 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 818f 	beq.w	8006bf4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80068dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068e0:	429a      	cmp	r2, r3
 80068e2:	f080 8187 	bcs.w	8006bf4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0320 	and.w	r3, r3, #32
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f040 8087 	bne.w	8006a12 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006918:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800691c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800692e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006932:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800693a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1da      	bne.n	8006904 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3308      	adds	r3, #8
 8006954:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800695e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3308      	adds	r3, #8
 800696e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006972:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006976:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800697a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e1      	bne.n	800694e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3308      	adds	r3, #8
 8006990:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800699a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800699c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3308      	adds	r3, #8
 80069aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e3      	bne.n	800698a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069e0:	f023 0310 	bic.w	r3, r3, #16
 80069e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e4      	bne.n	80069d0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fc fbbd 	bl	800318c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f8fb 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a32:	e0df      	b.n	8006bf4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80d1 	beq.w	8006bf8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006a56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 80cc 	beq.w	8006bf8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a84:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e4      	bne.n	8006a60 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3308      	adds	r3, #8
 8006a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3308      	adds	r3, #8
 8006aba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006abe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e1      	bne.n	8006a96 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0310 	bic.w	r3, r3, #16
 8006afa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b08:	61fb      	str	r3, [r7, #28]
 8006b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	69b9      	ldr	r1, [r7, #24]
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	617b      	str	r3, [r7, #20]
   return(result);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e4      	bne.n	8006ae6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f87d 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b2e:	e063      	b.n	8006bf8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00e      	beq.n	8006b5a <HAL_UART_IRQHandler+0x59e>
 8006b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fc5e 	bl	8008414 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b58:	e051      	b.n	8006bfe <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d014      	beq.n	8006b90 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d105      	bne.n	8006b7e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d008      	beq.n	8006b90 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d03a      	beq.n	8006bfc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	4798      	blx	r3
    }
    return;
 8006b8e:	e035      	b.n	8006bfc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d009      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x5f4>
 8006b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 feeb 	bl	8007984 <UART_EndTransmit_IT>
    return;
 8006bae:	e026      	b.n	8006bfe <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d009      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x614>
 8006bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bc0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 fc35 	bl	8008438 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bce:	e016      	b.n	8006bfe <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d010      	beq.n	8006bfe <HAL_UART_IRQHandler+0x642>
 8006bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	da0c      	bge.n	8006bfe <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 fc1e 	bl	8008426 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bea:	e008      	b.n	8006bfe <HAL_UART_IRQHandler+0x642>
      return;
 8006bec:	bf00      	nop
 8006bee:	e006      	b.n	8006bfe <HAL_UART_IRQHandler+0x642>
    return;
 8006bf0:	bf00      	nop
 8006bf2:	e004      	b.n	8006bfe <HAL_UART_IRQHandler+0x642>
      return;
 8006bf4:	bf00      	nop
 8006bf6:	e002      	b.n	8006bfe <HAL_UART_IRQHandler+0x642>
      return;
 8006bf8:	bf00      	nop
 8006bfa:	e000      	b.n	8006bfe <HAL_UART_IRQHandler+0x642>
    return;
 8006bfc:	bf00      	nop
  }
}
 8006bfe:	37e8      	adds	r7, #232	@ 0xe8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr

08006c16 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr

08006c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr
	...

08006c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c44:	b08c      	sub	sp, #48	@ 0x30
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	4b94      	ldr	r3, [pc, #592]	@ (8006ec0 <UART_SetConfig+0x280>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a89      	ldr	r2, [pc, #548]	@ (8006ec4 <UART_SetConfig+0x284>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d004      	beq.n	8006cac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006cb6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	6812      	ldr	r2, [r2, #0]
 8006cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cca:	f023 010f 	bic.w	r1, r3, #15
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a7a      	ldr	r2, [pc, #488]	@ (8006ec8 <UART_SetConfig+0x288>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d127      	bne.n	8006d34 <UART_SetConfig+0xf4>
 8006ce4:	2003      	movs	r0, #3
 8006ce6:	f7ff fb2b 	bl	8006340 <LL_RCC_GetUSARTClockSource>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d81b      	bhi.n	8006d2c <UART_SetConfig+0xec>
 8006cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <UART_SetConfig+0xbc>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d0d 	.word	0x08006d0d
 8006d00:	08006d1d 	.word	0x08006d1d
 8006d04:	08006d15 	.word	0x08006d15
 8006d08:	08006d25 	.word	0x08006d25
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d12:	e080      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006d14:	2302      	movs	r3, #2
 8006d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d1a:	e07c      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006d1c:	2304      	movs	r3, #4
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d22:	e078      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006d24:	2308      	movs	r3, #8
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d2a:	e074      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d32:	e070      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a64      	ldr	r2, [pc, #400]	@ (8006ecc <UART_SetConfig+0x28c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d138      	bne.n	8006db0 <UART_SetConfig+0x170>
 8006d3e:	200c      	movs	r0, #12
 8006d40:	f7ff fafe 	bl	8006340 <LL_RCC_GetUSARTClockSource>
 8006d44:	4603      	mov	r3, r0
 8006d46:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8006d4a:	2b0c      	cmp	r3, #12
 8006d4c:	d82c      	bhi.n	8006da8 <UART_SetConfig+0x168>
 8006d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d54 <UART_SetConfig+0x114>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d89 	.word	0x08006d89
 8006d58:	08006da9 	.word	0x08006da9
 8006d5c:	08006da9 	.word	0x08006da9
 8006d60:	08006da9 	.word	0x08006da9
 8006d64:	08006d99 	.word	0x08006d99
 8006d68:	08006da9 	.word	0x08006da9
 8006d6c:	08006da9 	.word	0x08006da9
 8006d70:	08006da9 	.word	0x08006da9
 8006d74:	08006d91 	.word	0x08006d91
 8006d78:	08006da9 	.word	0x08006da9
 8006d7c:	08006da9 	.word	0x08006da9
 8006d80:	08006da9 	.word	0x08006da9
 8006d84:	08006da1 	.word	0x08006da1
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d8e:	e042      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006d90:	2302      	movs	r3, #2
 8006d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d96:	e03e      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d9e:	e03a      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006da0:	2308      	movs	r3, #8
 8006da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006da6:	e036      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006da8:	2310      	movs	r3, #16
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dae:	e032      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a43      	ldr	r2, [pc, #268]	@ (8006ec4 <UART_SetConfig+0x284>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d12a      	bne.n	8006e10 <UART_SetConfig+0x1d0>
 8006dba:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8006dbe:	f7ff fad1 	bl	8006364 <LL_RCC_GetLPUARTClockSource>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dc8:	d01a      	beq.n	8006e00 <UART_SetConfig+0x1c0>
 8006dca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dce:	d81b      	bhi.n	8006e08 <UART_SetConfig+0x1c8>
 8006dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dd4:	d00c      	beq.n	8006df0 <UART_SetConfig+0x1b0>
 8006dd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dda:	d815      	bhi.n	8006e08 <UART_SetConfig+0x1c8>
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <UART_SetConfig+0x1a8>
 8006de0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de4:	d008      	beq.n	8006df8 <UART_SetConfig+0x1b8>
 8006de6:	e00f      	b.n	8006e08 <UART_SetConfig+0x1c8>
 8006de8:	2300      	movs	r3, #0
 8006dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dee:	e012      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006df0:	2302      	movs	r3, #2
 8006df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006df6:	e00e      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006df8:	2304      	movs	r3, #4
 8006dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dfe:	e00a      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006e00:	2308      	movs	r3, #8
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e06:	e006      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006e08:	2310      	movs	r3, #16
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e0e:	e002      	b.n	8006e16 <UART_SetConfig+0x1d6>
 8006e10:	2310      	movs	r3, #16
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8006ec4 <UART_SetConfig+0x284>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	f040 80a4 	bne.w	8006f6a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d823      	bhi.n	8006e72 <UART_SetConfig+0x232>
 8006e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e30 <UART_SetConfig+0x1f0>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006e55 	.word	0x08006e55
 8006e34:	08006e73 	.word	0x08006e73
 8006e38:	08006e5d 	.word	0x08006e5d
 8006e3c:	08006e73 	.word	0x08006e73
 8006e40:	08006e63 	.word	0x08006e63
 8006e44:	08006e73 	.word	0x08006e73
 8006e48:	08006e73 	.word	0x08006e73
 8006e4c:	08006e73 	.word	0x08006e73
 8006e50:	08006e6b 	.word	0x08006e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e54:	f7fd ff4a 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 8006e58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e5a:	e010      	b.n	8006e7e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ed0 <UART_SetConfig+0x290>)
 8006e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e60:	e00d      	b.n	8006e7e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e62:	f7fd fe8f 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8006e66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e68:	e009      	b.n	8006e7e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e70:	e005      	b.n	8006e7e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 8137 	beq.w	80070f4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8a:	4a12      	ldr	r2, [pc, #72]	@ (8006ed4 <UART_SetConfig+0x294>)
 8006e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e90:	461a      	mov	r2, r3
 8006e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	4413      	add	r3, r2
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d305      	bcc.n	8006eb6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d910      	bls.n	8006ed8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ebc:	e11a      	b.n	80070f4 <UART_SetConfig+0x4b4>
 8006ebe:	bf00      	nop
 8006ec0:	cfff69f3 	.word	0xcfff69f3
 8006ec4:	40008000 	.word	0x40008000
 8006ec8:	40013800 	.word	0x40013800
 8006ecc:	40004400 	.word	0x40004400
 8006ed0:	00f42400 	.word	0x00f42400
 8006ed4:	08010fb0 	.word	0x08010fb0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	2200      	movs	r2, #0
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	60fa      	str	r2, [r7, #12]
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee4:	4a8e      	ldr	r2, [pc, #568]	@ (8007120 <UART_SetConfig+0x4e0>)
 8006ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	2200      	movs	r2, #0
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	607a      	str	r2, [r7, #4]
 8006ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006efa:	f7fa f801 	bl	8000f00 <__aeabi_uldivmod>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4610      	mov	r0, r2
 8006f04:	4619      	mov	r1, r3
 8006f06:	f04f 0200 	mov.w	r2, #0
 8006f0a:	f04f 0300 	mov.w	r3, #0
 8006f0e:	020b      	lsls	r3, r1, #8
 8006f10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f14:	0202      	lsls	r2, r0, #8
 8006f16:	6979      	ldr	r1, [r7, #20]
 8006f18:	6849      	ldr	r1, [r1, #4]
 8006f1a:	0849      	lsrs	r1, r1, #1
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	4605      	mov	r5, r0
 8006f22:	eb12 0804 	adds.w	r8, r2, r4
 8006f26:	eb43 0905 	adc.w	r9, r3, r5
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	469a      	mov	sl, r3
 8006f32:	4693      	mov	fp, r2
 8006f34:	4652      	mov	r2, sl
 8006f36:	465b      	mov	r3, fp
 8006f38:	4640      	mov	r0, r8
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	f7f9 ffe0 	bl	8000f00 <__aeabi_uldivmod>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4613      	mov	r3, r2
 8006f46:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f4e:	d308      	bcc.n	8006f62 <UART_SetConfig+0x322>
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f56:	d204      	bcs.n	8006f62 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6a3a      	ldr	r2, [r7, #32]
 8006f5e:	60da      	str	r2, [r3, #12]
 8006f60:	e0c8      	b.n	80070f4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f68:	e0c4      	b.n	80070f4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f72:	d167      	bne.n	8007044 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006f74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d828      	bhi.n	8006fce <UART_SetConfig+0x38e>
 8006f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f84 <UART_SetConfig+0x344>)
 8006f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f82:	bf00      	nop
 8006f84:	08006fa9 	.word	0x08006fa9
 8006f88:	08006fb1 	.word	0x08006fb1
 8006f8c:	08006fb9 	.word	0x08006fb9
 8006f90:	08006fcf 	.word	0x08006fcf
 8006f94:	08006fbf 	.word	0x08006fbf
 8006f98:	08006fcf 	.word	0x08006fcf
 8006f9c:	08006fcf 	.word	0x08006fcf
 8006fa0:	08006fcf 	.word	0x08006fcf
 8006fa4:	08006fc7 	.word	0x08006fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa8:	f7fd fea0 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 8006fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fae:	e014      	b.n	8006fda <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fb0:	f7fd feae 	bl	8004d10 <HAL_RCC_GetPCLK2Freq>
 8006fb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fb6:	e010      	b.n	8006fda <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8007124 <UART_SetConfig+0x4e4>)
 8006fba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fbc:	e00d      	b.n	8006fda <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fbe:	f7fd fde1 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8006fc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fc4:	e009      	b.n	8006fda <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fcc:	e005      	b.n	8006fda <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006fd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 8089 	beq.w	80070f4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe6:	4a4e      	ldr	r2, [pc, #312]	@ (8007120 <UART_SetConfig+0x4e0>)
 8006fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fec:	461a      	mov	r2, r3
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ff4:	005a      	lsls	r2, r3, #1
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	441a      	add	r2, r3
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	fbb2 f3f3 	udiv	r3, r2, r3
 8007006:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	2b0f      	cmp	r3, #15
 800700c:	d916      	bls.n	800703c <UART_SetConfig+0x3fc>
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007014:	d212      	bcs.n	800703c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	b29b      	uxth	r3, r3
 800701a:	f023 030f 	bic.w	r3, r3, #15
 800701e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	b29b      	uxth	r3, r3
 8007026:	f003 0307 	and.w	r3, r3, #7
 800702a:	b29a      	uxth	r2, r3
 800702c:	8bfb      	ldrh	r3, [r7, #30]
 800702e:	4313      	orrs	r3, r2
 8007030:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	8bfa      	ldrh	r2, [r7, #30]
 8007038:	60da      	str	r2, [r3, #12]
 800703a:	e05b      	b.n	80070f4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007042:	e057      	b.n	80070f4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007044:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007048:	2b08      	cmp	r3, #8
 800704a:	d828      	bhi.n	800709e <UART_SetConfig+0x45e>
 800704c:	a201      	add	r2, pc, #4	@ (adr r2, 8007054 <UART_SetConfig+0x414>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	08007079 	.word	0x08007079
 8007058:	08007081 	.word	0x08007081
 800705c:	08007089 	.word	0x08007089
 8007060:	0800709f 	.word	0x0800709f
 8007064:	0800708f 	.word	0x0800708f
 8007068:	0800709f 	.word	0x0800709f
 800706c:	0800709f 	.word	0x0800709f
 8007070:	0800709f 	.word	0x0800709f
 8007074:	08007097 	.word	0x08007097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007078:	f7fd fe38 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 800707c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800707e:	e014      	b.n	80070aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007080:	f7fd fe46 	bl	8004d10 <HAL_RCC_GetPCLK2Freq>
 8007084:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007086:	e010      	b.n	80070aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007088:	4b26      	ldr	r3, [pc, #152]	@ (8007124 <UART_SetConfig+0x4e4>)
 800708a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800708c:	e00d      	b.n	80070aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800708e:	f7fd fd79 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8007092:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007094:	e009      	b.n	80070aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800709a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800709c:	e005      	b.n	80070aa <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070a8:	bf00      	nop
    }

    if (pclk != 0U)
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d021      	beq.n	80070f4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b4:	4a1a      	ldr	r2, [pc, #104]	@ (8007120 <UART_SetConfig+0x4e0>)
 80070b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ba:	461a      	mov	r2, r3
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	fbb3 f2f2 	udiv	r2, r3, r2
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	085b      	lsrs	r3, r3, #1
 80070c8:	441a      	add	r2, r3
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	2b0f      	cmp	r3, #15
 80070d8:	d909      	bls.n	80070ee <UART_SetConfig+0x4ae>
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070e0:	d205      	bcs.n	80070ee <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	60da      	str	r2, [r3, #12]
 80070ec:	e002      	b.n	80070f4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2201      	movs	r2, #1
 8007100:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2200      	movs	r2, #0
 8007108:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2200      	movs	r2, #0
 800710e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007110:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007114:	4618      	mov	r0, r3
 8007116:	3730      	adds	r7, #48	@ 0x30
 8007118:	46bd      	mov	sp, r7
 800711a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800711e:	bf00      	nop
 8007120:	08010fb0 	.word	0x08010fb0
 8007124:	00f42400 	.word	0x00f42400

08007128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00a      	beq.n	8007152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719a:	f003 0308 	and.w	r3, r3, #8
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071de:	f003 0320 	and.w	r3, r3, #32
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01a      	beq.n	800723e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007226:	d10a      	bne.n	800723e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	605a      	str	r2, [r3, #4]
  }
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr

0800726a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b086      	sub	sp, #24
 800726e:	af02      	add	r7, sp, #8
 8007270:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800727a:	f7fa fd19 	bl	8001cb0 <HAL_GetTick>
 800727e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b08      	cmp	r3, #8
 800728c:	d10e      	bne.n	80072ac <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f832 	bl	8007306 <UART_WaitOnFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e028      	b.n	80072fe <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0304 	and.w	r3, r3, #4
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d10e      	bne.n	80072d8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f81c 	bl	8007306 <UART_WaitOnFlagUntilTimeout>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e012      	b.n	80072fe <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2220      	movs	r2, #32
 80072dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b09c      	sub	sp, #112	@ 0x70
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	603b      	str	r3, [r7, #0]
 8007312:	4613      	mov	r3, r2
 8007314:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007316:	e0a9      	b.n	800746c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007318:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800731e:	f000 80a5 	beq.w	800746c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007322:	f7fa fcc5 	bl	8001cb0 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800732e:	429a      	cmp	r2, r3
 8007330:	d302      	bcc.n	8007338 <UART_WaitOnFlagUntilTimeout+0x32>
 8007332:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007334:	2b00      	cmp	r3, #0
 8007336:	d140      	bne.n	80073ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007348:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800734c:	667b      	str	r3, [r7, #100]	@ 0x64
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007356:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007358:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800735c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e6      	bne.n	8007338 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800737a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	663b      	str	r3, [r7, #96]	@ 0x60
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3308      	adds	r3, #8
 8007388:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800738a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800738c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e5      	bne.n	800736a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e069      	b.n	800748e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d051      	beq.n	800746c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073d6:	d149      	bne.n	800746c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ea:	e853 3f00 	ldrex	r3, [r3]
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80073f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	461a      	mov	r2, r3
 80073fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007400:	637b      	str	r3, [r7, #52]	@ 0x34
 8007402:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007406:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007408:	e841 2300 	strex	r3, r2, [r1]
 800740c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800740e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e6      	bne.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3308      	adds	r3, #8
 800741a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	e853 3f00 	ldrex	r3, [r3]
 8007422:	613b      	str	r3, [r7, #16]
   return(result);
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f023 0301 	bic.w	r3, r3, #1
 800742a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3308      	adds	r3, #8
 8007432:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007434:	623a      	str	r2, [r7, #32]
 8007436:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	69f9      	ldr	r1, [r7, #28]
 800743a:	6a3a      	ldr	r2, [r7, #32]
 800743c:	e841 2300 	strex	r3, r2, [r1]
 8007440:	61bb      	str	r3, [r7, #24]
   return(result);
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e5      	bne.n	8007414 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2220      	movs	r2, #32
 800745c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e010      	b.n	800748e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69da      	ldr	r2, [r3, #28]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	4013      	ands	r3, r2
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	429a      	cmp	r2, r3
 800747a:	bf0c      	ite	eq
 800747c:	2301      	moveq	r3, #1
 800747e:	2300      	movne	r3, #0
 8007480:	b2db      	uxtb	r3, r3
 8007482:	461a      	mov	r2, r3
 8007484:	79fb      	ldrb	r3, [r7, #7]
 8007486:	429a      	cmp	r2, r3
 8007488:	f43f af46 	beq.w	8007318 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3770      	adds	r7, #112	@ 0x70
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007498:	b480      	push	{r7}
 800749a:	b0a3      	sub	sp, #140	@ 0x8c
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	4613      	mov	r3, r2
 80074a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	88fa      	ldrh	r2, [r7, #6]
 80074b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	88fa      	ldrh	r2, [r7, #6]
 80074b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ca:	d10e      	bne.n	80074ea <UART_Start_Receive_IT+0x52>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d105      	bne.n	80074e0 <UART_Start_Receive_IT+0x48>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80074da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074de:	e02d      	b.n	800753c <UART_Start_Receive_IT+0xa4>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	22ff      	movs	r2, #255	@ 0xff
 80074e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074e8:	e028      	b.n	800753c <UART_Start_Receive_IT+0xa4>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10d      	bne.n	800750e <UART_Start_Receive_IT+0x76>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d104      	bne.n	8007504 <UART_Start_Receive_IT+0x6c>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	22ff      	movs	r2, #255	@ 0xff
 80074fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007502:	e01b      	b.n	800753c <UART_Start_Receive_IT+0xa4>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	227f      	movs	r2, #127	@ 0x7f
 8007508:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800750c:	e016      	b.n	800753c <UART_Start_Receive_IT+0xa4>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007516:	d10d      	bne.n	8007534 <UART_Start_Receive_IT+0x9c>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d104      	bne.n	800752a <UART_Start_Receive_IT+0x92>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	227f      	movs	r2, #127	@ 0x7f
 8007524:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007528:	e008      	b.n	800753c <UART_Start_Receive_IT+0xa4>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	223f      	movs	r2, #63	@ 0x3f
 800752e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007532:	e003      	b.n	800753c <UART_Start_Receive_IT+0xa4>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2222      	movs	r2, #34	@ 0x22
 8007548:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3308      	adds	r3, #8
 8007552:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800755c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800755e:	f043 0301 	orr.w	r3, r3, #1
 8007562:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007570:	673a      	str	r2, [r7, #112]	@ 0x70
 8007572:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007576:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800757e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e3      	bne.n	800754c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007588:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800758c:	d14f      	bne.n	800762e <UART_Start_Receive_IT+0x196>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007594:	88fa      	ldrh	r2, [r7, #6]
 8007596:	429a      	cmp	r2, r3
 8007598:	d349      	bcc.n	800762e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a2:	d107      	bne.n	80075b4 <UART_Start_Receive_IT+0x11c>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4a46      	ldr	r2, [pc, #280]	@ (80076c8 <UART_Start_Receive_IT+0x230>)
 80075b0:	675a      	str	r2, [r3, #116]	@ 0x74
 80075b2:	e002      	b.n	80075ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4a45      	ldr	r2, [pc, #276]	@ (80076cc <UART_Start_Receive_IT+0x234>)
 80075b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d01a      	beq.n	80075f8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ca:	e853 3f00 	ldrex	r3, [r3]
 80075ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80075d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80075e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075e6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80075ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80075f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e4      	bne.n	80075c2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3308      	adds	r3, #8
 80075fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800760e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3308      	adds	r3, #8
 8007616:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007618:	64ba      	str	r2, [r7, #72]	@ 0x48
 800761a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800761e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e5      	bne.n	80075f8 <UART_Start_Receive_IT+0x160>
 800762c:	e046      	b.n	80076bc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007636:	d107      	bne.n	8007648 <UART_Start_Receive_IT+0x1b0>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d103      	bne.n	8007648 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a23      	ldr	r2, [pc, #140]	@ (80076d0 <UART_Start_Receive_IT+0x238>)
 8007644:	675a      	str	r2, [r3, #116]	@ 0x74
 8007646:	e002      	b.n	800764e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4a22      	ldr	r2, [pc, #136]	@ (80076d4 <UART_Start_Receive_IT+0x23c>)
 800764c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d019      	beq.n	800768a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765e:	e853 3f00 	ldrex	r3, [r3]
 8007662:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007666:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800766a:	677b      	str	r3, [r7, #116]	@ 0x74
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007674:	637b      	str	r3, [r7, #52]	@ 0x34
 8007676:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800767a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e6      	bne.n	8007656 <UART_Start_Receive_IT+0x1be>
 8007688:	e018      	b.n	80076bc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	e853 3f00 	ldrex	r3, [r3]
 8007696:	613b      	str	r3, [r7, #16]
   return(result);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f043 0320 	orr.w	r3, r3, #32
 800769e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076a8:	623b      	str	r3, [r7, #32]
 80076aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	69f9      	ldr	r1, [r7, #28]
 80076ae:	6a3a      	ldr	r2, [r7, #32]
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e6      	bne.n	800768a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	378c      	adds	r7, #140	@ 0x8c
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bc80      	pop	{r7}
 80076c6:	4770      	bx	lr
 80076c8:	080080ad 	.word	0x080080ad
 80076cc:	08007d4d 	.word	0x08007d4d
 80076d0:	08007b95 	.word	0x08007b95
 80076d4:	080079dd 	.word	0x080079dd

080076d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80076d8:	b480      	push	{r7}
 80076da:	b08f      	sub	sp, #60	@ 0x3c
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80076f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007700:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e6      	bne.n	80076e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	60bb      	str	r3, [r7, #8]
   return(result);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007728:	633b      	str	r3, [r7, #48]	@ 0x30
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3308      	adds	r3, #8
 8007730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007732:	61ba      	str	r2, [r7, #24]
 8007734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	6979      	ldr	r1, [r7, #20]
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	613b      	str	r3, [r7, #16]
   return(result);
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e5      	bne.n	8007712 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2220      	movs	r2, #32
 800774a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800774e:	bf00      	nop
 8007750:	373c      	adds	r7, #60	@ 0x3c
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007758:	b480      	push	{r7}
 800775a:	b095      	sub	sp, #84	@ 0x54
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007770:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007774:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800777e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007780:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007784:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800778c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e6      	bne.n	8007760 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3308      	adds	r3, #8
 8007798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077a8:	f023 0301 	bic.w	r3, r3, #1
 80077ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3308      	adds	r3, #8
 80077b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e3      	bne.n	8007792 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d118      	bne.n	8007804 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	60bb      	str	r3, [r7, #8]
   return(result);
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f023 0310 	bic.w	r3, r3, #16
 80077e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6979      	ldr	r1, [r7, #20]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	613b      	str	r3, [r7, #16]
   return(result);
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e6      	bne.n	80077d2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2220      	movs	r2, #32
 8007808:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007818:	bf00      	nop
 800781a:	3754      	adds	r7, #84	@ 0x54
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr

08007822 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b090      	sub	sp, #64	@ 0x40
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b00      	cmp	r3, #0
 800783c:	d137      	bne.n	80078ae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800783e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007840:	2200      	movs	r2, #0
 8007842:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	623b      	str	r3, [r7, #32]
   return(result);
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800785c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800785e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007866:	633a      	str	r2, [r7, #48]	@ 0x30
 8007868:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800786c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e5      	bne.n	8007846 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800787a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	e853 3f00 	ldrex	r3, [r3]
 8007886:	60fb      	str	r3, [r7, #12]
   return(result);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800788e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	69b9      	ldr	r1, [r7, #24]
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	617b      	str	r3, [r7, #20]
   return(result);
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e6      	bne.n	800787a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078ac:	e002      	b.n	80078b4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80078ae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80078b0:	f7fa ffe6 	bl	8002880 <HAL_UART_TxCpltCallback>
}
 80078b4:	bf00      	nop
 80078b6:	3740      	adds	r7, #64	@ 0x40
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f7ff f99a 	bl	8006c04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078f4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007900:	2b80      	cmp	r3, #128	@ 0x80
 8007902:	d109      	bne.n	8007918 <UART_DMAError+0x40>
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b21      	cmp	r3, #33	@ 0x21
 8007908:	d106      	bne.n	8007918 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2200      	movs	r2, #0
 800790e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007912:	6978      	ldr	r0, [r7, #20]
 8007914:	f7ff fee0 	bl	80076d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007922:	2b40      	cmp	r3, #64	@ 0x40
 8007924:	d109      	bne.n	800793a <UART_DMAError+0x62>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b22      	cmp	r3, #34	@ 0x22
 800792a:	d106      	bne.n	800793a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2200      	movs	r2, #0
 8007930:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007934:	6978      	ldr	r0, [r7, #20]
 8007936:	f7ff ff0f 	bl	8007758 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007940:	f043 0210 	orr.w	r2, r3, #16
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800794a:	6978      	ldr	r0, [r7, #20]
 800794c:	f7ff f963 	bl	8006c16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007950:	bf00      	nop
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007964:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7ff f94d 	bl	8006c16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800797c:	bf00      	nop
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	e853 3f00 	ldrex	r3, [r3]
 8007998:	60bb      	str	r3, [r7, #8]
   return(result);
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079a0:	61fb      	str	r3, [r7, #28]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	61bb      	str	r3, [r7, #24]
 80079ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	6979      	ldr	r1, [r7, #20]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	e841 2300 	strex	r3, r2, [r1]
 80079b6:	613b      	str	r3, [r7, #16]
   return(result);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1e6      	bne.n	800798c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2220      	movs	r2, #32
 80079c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7fa ff57 	bl	8002880 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079d2:	bf00      	nop
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b09c      	sub	sp, #112	@ 0x70
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80079ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079f4:	2b22      	cmp	r3, #34	@ 0x22
 80079f6:	f040 80be 	bne.w	8007b76 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007a08:	b2d9      	uxtb	r1, r3
 8007a0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a14:	400a      	ands	r2, r1
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f040 80a1 	bne.w	8007b86 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e6      	bne.n	8007a44 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a88:	f023 0301 	bic.w	r3, r3, #1
 8007a8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a96:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e5      	bne.n	8007a76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a33      	ldr	r2, [pc, #204]	@ (8007b90 <UART_RxISR_8BIT+0x1b4>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d01f      	beq.n	8007b08 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d018      	beq.n	8007b08 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007af6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e6      	bne.n	8007ad6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d12e      	bne.n	8007b6e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	e853 3f00 	ldrex	r3, [r3]
 8007b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0310 	bic.w	r3, r3, #16
 8007b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b34:	61fb      	str	r3, [r7, #28]
 8007b36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	69b9      	ldr	r1, [r7, #24]
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	e841 2300 	strex	r3, r2, [r1]
 8007b40:	617b      	str	r3, [r7, #20]
   return(result);
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e6      	bne.n	8007b16 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f003 0310 	and.w	r3, r3, #16
 8007b52:	2b10      	cmp	r3, #16
 8007b54:	d103      	bne.n	8007b5e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff f85e 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b6c:	e00b      	b.n	8007b86 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7fa fe9c 	bl	80028ac <HAL_UART_RxCpltCallback>
}
 8007b74:	e007      	b.n	8007b86 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699a      	ldr	r2, [r3, #24]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0208 	orr.w	r2, r2, #8
 8007b84:	619a      	str	r2, [r3, #24]
}
 8007b86:	bf00      	nop
 8007b88:	3770      	adds	r7, #112	@ 0x70
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40008000 	.word	0x40008000

08007b94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b09c      	sub	sp, #112	@ 0x70
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007ba2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bac:	2b22      	cmp	r3, #34	@ 0x22
 8007bae:	f040 80be 	bne.w	8007d2e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007bc2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007bc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007bca:	4013      	ands	r3, r2
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bd0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bd6:	1c9a      	adds	r2, r3, #2
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	3b01      	subs	r3, #1
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f040 80a1 	bne.w	8007d3e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c10:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c1c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c22:	e841 2300 	strex	r3, r2, [r1]
 8007c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1e6      	bne.n	8007bfc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3308      	adds	r3, #8
 8007c34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c40:	f023 0301 	bic.w	r3, r3, #1
 8007c44:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e5      	bne.n	8007c2e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a33      	ldr	r2, [pc, #204]	@ (8007d48 <UART_RxISR_16BIT+0x1b4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d01f      	beq.n	8007cc0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d018      	beq.n	8007cc0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e6      	bne.n	8007c8e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d12e      	bne.n	8007d26 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f023 0310 	bic.w	r3, r3, #16
 8007ce2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cec:	61bb      	str	r3, [r7, #24]
 8007cee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6979      	ldr	r1, [r7, #20]
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e6      	bne.n	8007cce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f003 0310 	and.w	r3, r3, #16
 8007d0a:	2b10      	cmp	r3, #16
 8007d0c:	d103      	bne.n	8007d16 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2210      	movs	r2, #16
 8007d14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7fe ff82 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d24:	e00b      	b.n	8007d3e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7fa fdc0 	bl	80028ac <HAL_UART_RxCpltCallback>
}
 8007d2c:	e007      	b.n	8007d3e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f042 0208 	orr.w	r2, r2, #8
 8007d3c:	619a      	str	r2, [r3, #24]
}
 8007d3e:	bf00      	nop
 8007d40:	3770      	adds	r7, #112	@ 0x70
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	40008000 	.word	0x40008000

08007d4c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b0ac      	sub	sp, #176	@ 0xb0
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d82:	2b22      	cmp	r3, #34	@ 0x22
 8007d84:	f040 8182 	bne.w	800808c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d8e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d92:	e125      	b.n	8007fe0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d9e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007da2:	b2d9      	uxtb	r1, r3
 8007da4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dae:	400a      	ands	r2, r1
 8007db0:	b2d2      	uxtb	r2, r2
 8007db2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dde:	f003 0307 	and.w	r3, r3, #7
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d053      	beq.n	8007e8e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d011      	beq.n	8007e16 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007df2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00b      	beq.n	8007e16 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2201      	movs	r2, #1
 8007e04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e0c:	f043 0201 	orr.w	r2, r3, #1
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d011      	beq.n	8007e46 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00b      	beq.n	8007e46 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2202      	movs	r2, #2
 8007e34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e3c:	f043 0204 	orr.w	r2, r3, #4
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e4a:	f003 0304 	and.w	r3, r3, #4
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d011      	beq.n	8007e76 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00b      	beq.n	8007e76 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2204      	movs	r2, #4
 8007e64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e6c:	f043 0202 	orr.w	r2, r3, #2
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d006      	beq.n	8007e8e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7fe fec8 	bl	8006c16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f040 80a2 	bne.w	8007fe0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ebe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ec0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007ec4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007ecc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e4      	bne.n	8007e9c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007ee2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ee8:	f023 0301 	bic.w	r3, r3, #1
 8007eec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3308      	adds	r3, #8
 8007ef6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007efa:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007efc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007f00:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007f08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e1      	bne.n	8007ed2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2220      	movs	r2, #32
 8007f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a5f      	ldr	r2, [pc, #380]	@ (80080a4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d021      	beq.n	8007f70 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d01a      	beq.n	8007f70 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f5e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007f62:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e4      	bne.n	8007f3a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d130      	bne.n	8007fda <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8e:	f023 0310 	bic.w	r3, r3, #16
 8007f92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fa8:	e841 2300 	strex	r3, r2, [r1]
 8007fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e4      	bne.n	8007f7e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	f003 0310 	and.w	r3, r3, #16
 8007fbe:	2b10      	cmp	r3, #16
 8007fc0:	d103      	bne.n	8007fca <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2210      	movs	r2, #16
 8007fc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7fe fe28 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
 8007fd8:	e002      	b.n	8007fe0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7fa fc66 	bl	80028ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fe0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d006      	beq.n	8007ff6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f47f aecf 	bne.w	8007d94 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ffc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008000:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008004:	2b00      	cmp	r3, #0
 8008006:	d049      	beq.n	800809c <UART_RxISR_8BIT_FIFOEN+0x350>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800800e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008012:	429a      	cmp	r2, r3
 8008014:	d242      	bcs.n	800809c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3308      	adds	r3, #8
 800801c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	61fb      	str	r3, [r7, #28]
   return(result);
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800802c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3308      	adds	r3, #8
 8008036:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800803a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800803c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e3      	bne.n	8008016 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a15      	ldr	r2, [pc, #84]	@ (80080a8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008052:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	e853 3f00 	ldrex	r3, [r3]
 8008060:	60bb      	str	r3, [r7, #8]
   return(result);
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f043 0320 	orr.w	r3, r3, #32
 8008068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	461a      	mov	r2, r3
 8008072:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008076:	61bb      	str	r3, [r7, #24]
 8008078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	6979      	ldr	r1, [r7, #20]
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	613b      	str	r3, [r7, #16]
   return(result);
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e4      	bne.n	8008054 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800808a:	e007      	b.n	800809c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699a      	ldr	r2, [r3, #24]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0208 	orr.w	r2, r2, #8
 800809a:	619a      	str	r2, [r3, #24]
}
 800809c:	bf00      	nop
 800809e:	37b0      	adds	r7, #176	@ 0xb0
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	40008000 	.word	0x40008000
 80080a8:	080079dd 	.word	0x080079dd

080080ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b0ae      	sub	sp, #184	@ 0xb8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80080ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080e2:	2b22      	cmp	r3, #34	@ 0x22
 80080e4:	f040 8186 	bne.w	80083f4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080ee:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080f2:	e129      	b.n	8008348 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008106:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800810a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800810e:	4013      	ands	r3, r2
 8008110:	b29a      	uxth	r2, r3
 8008112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008116:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800811c:	1c9a      	adds	r2, r3, #2
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008128:	b29b      	uxth	r3, r3
 800812a:	3b01      	subs	r3, #1
 800812c:	b29a      	uxth	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800813e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008142:	f003 0307 	and.w	r3, r3, #7
 8008146:	2b00      	cmp	r3, #0
 8008148:	d053      	beq.n	80081f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800814a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d011      	beq.n	800817a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800815a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00b      	beq.n	800817a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2201      	movs	r2, #1
 8008168:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008170:	f043 0201 	orr.w	r2, r3, #1
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800817a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d011      	beq.n	80081aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008186:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00b      	beq.n	80081aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2202      	movs	r2, #2
 8008198:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081a0:	f043 0204 	orr.w	r2, r3, #4
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d011      	beq.n	80081da <UART_RxISR_16BIT_FIFOEN+0x12e>
 80081b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2204      	movs	r2, #4
 80081c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d0:	f043 0202 	orr.w	r2, r3, #2
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d006      	beq.n	80081f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7fe fd16 	bl	8006c16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f040 80a4 	bne.w	8008348 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008208:	e853 3f00 	ldrex	r3, [r3]
 800820c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800820e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008210:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008222:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008226:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800822a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e2      	bne.n	8008200 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800824a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800824c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008250:	f023 0301 	bic.w	r3, r3, #1
 8008254:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3308      	adds	r3, #8
 800825e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008262:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008264:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008268:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e1      	bne.n	800823a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a5f      	ldr	r2, [pc, #380]	@ (800840c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d021      	beq.n	80082d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01a      	beq.n	80082d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082cc:	e841 2300 	strex	r3, r2, [r1]
 80082d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e4      	bne.n	80082a2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d130      	bne.n	8008342 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ee:	e853 3f00 	ldrex	r3, [r3]
 80082f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f6:	f023 0310 	bic.w	r3, r3, #16
 80082fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008308:	647b      	str	r3, [r7, #68]	@ 0x44
 800830a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800830e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008310:	e841 2300 	strex	r3, r2, [r1]
 8008314:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e4      	bne.n	80082e6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	f003 0310 	and.w	r3, r3, #16
 8008326:	2b10      	cmp	r3, #16
 8008328:	d103      	bne.n	8008332 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2210      	movs	r2, #16
 8008330:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7fe fc74 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
 8008340:	e002      	b.n	8008348 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7fa fab2 	bl	80028ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008348:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800834c:	2b00      	cmp	r3, #0
 800834e:	d006      	beq.n	800835e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	f47f aecb 	bne.w	80080f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008364:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008368:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800836c:	2b00      	cmp	r3, #0
 800836e:	d049      	beq.n	8008404 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008376:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800837a:	429a      	cmp	r2, r3
 800837c:	d242      	bcs.n	8008404 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3308      	adds	r3, #8
 8008384:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	623b      	str	r3, [r7, #32]
   return(result);
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008394:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3308      	adds	r3, #8
 800839e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80083a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80083a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083aa:	e841 2300 	strex	r3, r2, [r1]
 80083ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1e3      	bne.n	800837e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a15      	ldr	r2, [pc, #84]	@ (8008410 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80083ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f043 0320 	orr.w	r3, r3, #32
 80083d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083de:	61fb      	str	r3, [r7, #28]
 80083e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	69b9      	ldr	r1, [r7, #24]
 80083e4:	69fa      	ldr	r2, [r7, #28]
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	617b      	str	r3, [r7, #20]
   return(result);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e4      	bne.n	80083bc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083f2:	e007      	b.n	8008404 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699a      	ldr	r2, [r3, #24]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0208 	orr.w	r2, r2, #8
 8008402:	619a      	str	r2, [r3, #24]
}
 8008404:	bf00      	nop
 8008406:	37b8      	adds	r7, #184	@ 0xb8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	40008000 	.word	0x40008000
 8008410:	08007b95 	.word	0x08007b95

08008414 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	bc80      	pop	{r7}
 8008424:	4770      	bx	lr

08008426 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr

08008438 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	bc80      	pop	{r7}
 8008448:	4770      	bx	lr

0800844a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b088      	sub	sp, #32
 800844e:	af02      	add	r7, sp, #8
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	1d3b      	adds	r3, r7, #4
 8008454:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008462:	2b01      	cmp	r3, #1
 8008464:	d101      	bne.n	800846a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8008466:	2302      	movs	r3, #2
 8008468:	e046      	b.n	80084f8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2224      	movs	r2, #36	@ 0x24
 8008476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 0201 	bic.w	r2, r2, #1
 8008488:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d105      	bne.n	80084b0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80084a4:	1d3b      	adds	r3, r7, #4
 80084a6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 f90e 	bl	80086cc <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0201 	orr.w	r2, r2, #1
 80084be:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084c0:	f7f9 fbf6 	bl	8001cb0 <HAL_GetTick>
 80084c4:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f7fe ff16 	bl	8007306 <UART_WaitOnFlagUntilTimeout>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d002      	beq.n	80084e6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	75fb      	strb	r3, [r7, #23]
 80084e4:	e003      	b.n	80084ee <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8008500:	b480      	push	{r7}
 8008502:	b089      	sub	sp, #36	@ 0x24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800850e:	2b01      	cmp	r3, #1
 8008510:	d101      	bne.n	8008516 <HAL_UARTEx_EnableStopMode+0x16>
 8008512:	2302      	movs	r3, #2
 8008514:	e021      	b.n	800855a <HAL_UARTEx_EnableStopMode+0x5a>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	60bb      	str	r3, [r7, #8]
   return(result);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f043 0302 	orr.w	r3, r3, #2
 8008532:	61fb      	str	r3, [r7, #28]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	461a      	mov	r2, r3
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	61bb      	str	r3, [r7, #24]
 800853e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008540:	6979      	ldr	r1, [r7, #20]
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	613b      	str	r3, [r7, #16]
   return(result);
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e6      	bne.n	800851e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3724      	adds	r7, #36	@ 0x24
 800855e:	46bd      	mov	sp, r7
 8008560:	bc80      	pop	{r7}
 8008562:	4770      	bx	lr

08008564 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008572:	2b01      	cmp	r3, #1
 8008574:	d101      	bne.n	800857a <HAL_UARTEx_DisableFifoMode+0x16>
 8008576:	2302      	movs	r3, #2
 8008578:	e027      	b.n	80085ca <HAL_UARTEx_DisableFifoMode+0x66>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2224      	movs	r2, #36	@ 0x24
 8008586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 0201 	bic.w	r2, r2, #1
 80085a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80085a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr

080085d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d101      	bne.n	80085ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085e8:	2302      	movs	r3, #2
 80085ea:	e02d      	b.n	8008648 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2224      	movs	r2, #36	@ 0x24
 80085f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f022 0201 	bic.w	r2, r2, #1
 8008612:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f871 	bl	8008710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2220      	movs	r2, #32
 800863a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008660:	2b01      	cmp	r3, #1
 8008662:	d101      	bne.n	8008668 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008664:	2302      	movs	r3, #2
 8008666:	e02d      	b.n	80086c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2224      	movs	r2, #36	@ 0x24
 8008674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0201 	bic.w	r2, r2, #1
 800868e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f833 	bl	8008710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2220      	movs	r2, #32
 80086b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	1d3b      	adds	r3, r7, #4
 80086d6:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f023 0210 	bic.w	r2, r3, #16
 80086e4:	893b      	ldrh	r3, [r7, #8]
 80086e6:	4619      	mov	r1, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	430a      	orrs	r2, r1
 80086ee:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 80086fa:	7abb      	ldrb	r3, [r7, #10]
 80086fc:	061a      	lsls	r2, r3, #24
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	605a      	str	r2, [r3, #4]
}
 8008706:	bf00      	nop
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	bc80      	pop	{r7}
 800870e:	4770      	bx	lr

08008710 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800871c:	2b00      	cmp	r3, #0
 800871e:	d108      	bne.n	8008732 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008730:	e031      	b.n	8008796 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008732:	2308      	movs	r3, #8
 8008734:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008736:	2308      	movs	r3, #8
 8008738:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	0e5b      	lsrs	r3, r3, #25
 8008742:	b2db      	uxtb	r3, r3
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	0f5b      	lsrs	r3, r3, #29
 8008752:	b2db      	uxtb	r3, r3
 8008754:	f003 0307 	and.w	r3, r3, #7
 8008758:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	7b3a      	ldrb	r2, [r7, #12]
 800875e:	4910      	ldr	r1, [pc, #64]	@ (80087a0 <UARTEx_SetNbDataToProcess+0x90>)
 8008760:	5c8a      	ldrb	r2, [r1, r2]
 8008762:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008766:	7b3a      	ldrb	r2, [r7, #12]
 8008768:	490e      	ldr	r1, [pc, #56]	@ (80087a4 <UARTEx_SetNbDataToProcess+0x94>)
 800876a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800876c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008770:	b29a      	uxth	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008778:	7bfb      	ldrb	r3, [r7, #15]
 800877a:	7b7a      	ldrb	r2, [r7, #13]
 800877c:	4908      	ldr	r1, [pc, #32]	@ (80087a0 <UARTEx_SetNbDataToProcess+0x90>)
 800877e:	5c8a      	ldrb	r2, [r1, r2]
 8008780:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008784:	7b7a      	ldrb	r2, [r7, #13]
 8008786:	4907      	ldr	r1, [pc, #28]	@ (80087a4 <UARTEx_SetNbDataToProcess+0x94>)
 8008788:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800878a:	fb93 f3f2 	sdiv	r3, r3, r2
 800878e:	b29a      	uxth	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	bc80      	pop	{r7}
 800879e:	4770      	bx	lr
 80087a0:	08010fc8 	.word	0x08010fc8
 80087a4:	08010fd0 	.word	0x08010fd0

080087a8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af02      	add	r7, sp, #8
 80087ae:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80087b0:	4a24      	ldr	r2, [pc, #144]	@ (8008844 <RadioInit+0x9c>)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80087b6:	4b24      	ldr	r3, [pc, #144]	@ (8008848 <RadioInit+0xa0>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80087bc:	4b22      	ldr	r3, [pc, #136]	@ (8008848 <RadioInit+0xa0>)
 80087be:	2200      	movs	r2, #0
 80087c0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80087c2:	4b21      	ldr	r3, [pc, #132]	@ (8008848 <RadioInit+0xa0>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80087c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008848 <RadioInit+0xa0>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80087ce:	481f      	ldr	r0, [pc, #124]	@ (800884c <RadioInit+0xa4>)
 80087d0:	f001 ffc0 	bl	800a754 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80087d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008848 <RadioInit+0xa0>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80087da:	4b1b      	ldr	r3, [pc, #108]	@ (8008848 <RadioInit+0xa0>)
 80087dc:	2200      	movs	r2, #0
 80087de:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80087e0:	f002 fa54 	bl	800ac8c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80087e4:	2100      	movs	r1, #0
 80087e6:	2000      	movs	r0, #0
 80087e8:	f002 fe20 	bl	800b42c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80087ec:	2204      	movs	r2, #4
 80087ee:	2100      	movs	r1, #0
 80087f0:	2001      	movs	r0, #1
 80087f2:	f002 fbdd 	bl	800afb0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80087f6:	2300      	movs	r3, #0
 80087f8:	2200      	movs	r2, #0
 80087fa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80087fe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008802:	f002 fb0d 	bl	800ae20 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8008806:	f000 fe99 	bl	800953c <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800880a:	2300      	movs	r3, #0
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	4b10      	ldr	r3, [pc, #64]	@ (8008850 <RadioInit+0xa8>)
 8008810:	2200      	movs	r2, #0
 8008812:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008816:	480f      	ldr	r0, [pc, #60]	@ (8008854 <RadioInit+0xac>)
 8008818:	f004 fe5c 	bl	800d4d4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800881c:	2300      	movs	r3, #0
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	4b0d      	ldr	r3, [pc, #52]	@ (8008858 <RadioInit+0xb0>)
 8008822:	2200      	movs	r2, #0
 8008824:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008828:	480c      	ldr	r0, [pc, #48]	@ (800885c <RadioInit+0xb4>)
 800882a:	f004 fe53 	bl	800d4d4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800882e:	4809      	ldr	r0, [pc, #36]	@ (8008854 <RadioInit+0xac>)
 8008830:	f004 fef4 	bl	800d61c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8008834:	4809      	ldr	r0, [pc, #36]	@ (800885c <RadioInit+0xb4>)
 8008836:	f004 fef1 	bl	800d61c <UTIL_TIMER_Stop>
}
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	2000857c 	.word	0x2000857c
 8008848:	20008580 	.word	0x20008580
 800884c:	08009931 	.word	0x08009931
 8008850:	080098b9 	.word	0x080098b9
 8008854:	200085dc 	.word	0x200085dc
 8008858:	080098cd 	.word	0x080098cd
 800885c:	200085f4 	.word	0x200085f4

08008860 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8008864:	f001 ffbe 	bl	800a7e4 <SUBGRF_GetOperatingMode>
 8008868:	4603      	mov	r3, r0
 800886a:	2b07      	cmp	r3, #7
 800886c:	d00a      	beq.n	8008884 <RadioGetStatus+0x24>
 800886e:	2b07      	cmp	r3, #7
 8008870:	dc0a      	bgt.n	8008888 <RadioGetStatus+0x28>
 8008872:	2b04      	cmp	r3, #4
 8008874:	d002      	beq.n	800887c <RadioGetStatus+0x1c>
 8008876:	2b05      	cmp	r3, #5
 8008878:	d002      	beq.n	8008880 <RadioGetStatus+0x20>
 800887a:	e005      	b.n	8008888 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800887c:	2302      	movs	r3, #2
 800887e:	e004      	b.n	800888a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8008880:	2301      	movs	r3, #1
 8008882:	e002      	b.n	800888a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8008884:	2303      	movs	r3, #3
 8008886:	e000      	b.n	800888a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8008888:	2300      	movs	r3, #0
    }
}
 800888a:	4618      	mov	r0, r3
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800889a:	4a2a      	ldr	r2, [pc, #168]	@ (8008944 <RadioSetModem+0xb4>)
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80088a0:	79fb      	ldrb	r3, [r7, #7]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f003 f995 	bl	800bbd2 <RFW_SetRadioModem>
    switch( modem )
 80088a8:	79fb      	ldrb	r3, [r7, #7]
 80088aa:	2b05      	cmp	r3, #5
 80088ac:	d80e      	bhi.n	80088cc <RadioSetModem+0x3c>
 80088ae:	a201      	add	r2, pc, #4	@ (adr r2, 80088b4 <RadioSetModem+0x24>)
 80088b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b4:	080088db 	.word	0x080088db
 80088b8:	080088e9 	.word	0x080088e9
 80088bc:	080088cd 	.word	0x080088cd
 80088c0:	0800890f 	.word	0x0800890f
 80088c4:	0800891d 	.word	0x0800891d
 80088c8:	0800892b 	.word	0x0800892b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80088cc:	2003      	movs	r0, #3
 80088ce:	f002 fb49 	bl	800af64 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80088d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008944 <RadioSetModem+0xb4>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	735a      	strb	r2, [r3, #13]
        break;
 80088d8:	e02f      	b.n	800893a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80088da:	2000      	movs	r0, #0
 80088dc:	f002 fb42 	bl	800af64 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80088e0:	4b18      	ldr	r3, [pc, #96]	@ (8008944 <RadioSetModem+0xb4>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	735a      	strb	r2, [r3, #13]
        break;
 80088e6:	e028      	b.n	800893a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80088e8:	2001      	movs	r0, #1
 80088ea:	f002 fb3b 	bl	800af64 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80088ee:	4b15      	ldr	r3, [pc, #84]	@ (8008944 <RadioSetModem+0xb4>)
 80088f0:	7b5a      	ldrb	r2, [r3, #13]
 80088f2:	4b14      	ldr	r3, [pc, #80]	@ (8008944 <RadioSetModem+0xb4>)
 80088f4:	7b1b      	ldrb	r3, [r3, #12]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d01e      	beq.n	8008938 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80088fa:	4b12      	ldr	r3, [pc, #72]	@ (8008944 <RadioSetModem+0xb4>)
 80088fc:	7b1a      	ldrb	r2, [r3, #12]
 80088fe:	4b11      	ldr	r3, [pc, #68]	@ (8008944 <RadioSetModem+0xb4>)
 8008900:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8008902:	4b10      	ldr	r3, [pc, #64]	@ (8008944 <RadioSetModem+0xb4>)
 8008904:	7b5b      	ldrb	r3, [r3, #13]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 ffa0 	bl	800984c <RadioSetPublicNetwork>
        }
        break;
 800890c:	e014      	b.n	8008938 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800890e:	2002      	movs	r0, #2
 8008910:	f002 fb28 	bl	800af64 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008914:	4b0b      	ldr	r3, [pc, #44]	@ (8008944 <RadioSetModem+0xb4>)
 8008916:	2200      	movs	r2, #0
 8008918:	735a      	strb	r2, [r3, #13]
        break;
 800891a:	e00e      	b.n	800893a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800891c:	2002      	movs	r0, #2
 800891e:	f002 fb21 	bl	800af64 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008922:	4b08      	ldr	r3, [pc, #32]	@ (8008944 <RadioSetModem+0xb4>)
 8008924:	2200      	movs	r2, #0
 8008926:	735a      	strb	r2, [r3, #13]
        break;
 8008928:	e007      	b.n	800893a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800892a:	2000      	movs	r0, #0
 800892c:	f002 fb1a 	bl	800af64 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008930:	4b04      	ldr	r3, [pc, #16]	@ (8008944 <RadioSetModem+0xb4>)
 8008932:	2200      	movs	r2, #0
 8008934:	735a      	strb	r2, [r3, #13]
        break;
 8008936:	e000      	b.n	800893a <RadioSetModem+0xaa>
        break;
 8008938:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800893a:	bf00      	nop
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20008580 	.word	0x20008580

08008948 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f002 fac1 	bl	800aed8 <SUBGRF_SetRfFrequency>
}
 8008956:	bf00      	nop
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b090      	sub	sp, #64	@ 0x40
 8008962:	af0a      	add	r7, sp, #40	@ 0x28
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	603b      	str	r3, [r7, #0]
 800896a:	4613      	mov	r3, r2
 800896c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800896e:	2301      	movs	r3, #1
 8008970:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800897a:	f000 fdf2 	bl	8009562 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800897e:	2000      	movs	r0, #0
 8008980:	f7ff ff86 	bl	8008890 <RadioSetModem>

    RadioSetChannel( freq );
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f7ff ffdf 	bl	8008948 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800898a:	2301      	movs	r3, #1
 800898c:	9309      	str	r3, [sp, #36]	@ 0x24
 800898e:	2300      	movs	r3, #0
 8008990:	9308      	str	r3, [sp, #32]
 8008992:	2300      	movs	r3, #0
 8008994:	9307      	str	r3, [sp, #28]
 8008996:	2300      	movs	r3, #0
 8008998:	9306      	str	r3, [sp, #24]
 800899a:	2300      	movs	r3, #0
 800899c:	9305      	str	r3, [sp, #20]
 800899e:	2300      	movs	r3, #0
 80089a0:	9304      	str	r3, [sp, #16]
 80089a2:	2300      	movs	r3, #0
 80089a4:	9303      	str	r3, [sp, #12]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9302      	str	r3, [sp, #8]
 80089aa:	2303      	movs	r3, #3
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	2300      	movs	r3, #0
 80089b4:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80089b8:	68b9      	ldr	r1, [r7, #8]
 80089ba:	2000      	movs	r0, #0
 80089bc:	f000 f83c 	bl	8008a38 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80089c0:	2000      	movs	r0, #0
 80089c2:	f000 fdd5 	bl	8009570 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80089c6:	f000 ff6f 	bl	80098a8 <RadioGetWakeupTime>
 80089ca:	4603      	mov	r3, r0
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7f9 f983 	bl	8001cd8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80089d2:	f004 ff3d 	bl	800d850 <UTIL_TIMER_GetCurrentTime>
 80089d6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80089d8:	e00d      	b.n	80089f6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80089da:	2000      	movs	r0, #0
 80089dc:	f000 feb6 	bl	800974c <RadioRssi>
 80089e0:	4603      	mov	r3, r0
 80089e2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80089e4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80089e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	dd02      	ble.n	80089f6 <RadioIsChannelFree+0x98>
        {
            status = false;
 80089f0:	2300      	movs	r3, #0
 80089f2:	75fb      	strb	r3, [r7, #23]
            break;
 80089f4:	e006      	b.n	8008a04 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80089f6:	6938      	ldr	r0, [r7, #16]
 80089f8:	f004 ff3c 	bl	800d874 <UTIL_TIMER_GetElapsedTime>
 80089fc:	4602      	mov	r2, r0
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d8ea      	bhi.n	80089da <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8008a04:	f000 fdad 	bl	8009562 <RadioStandby>

    return status;
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b082      	sub	sp, #8
 8008a16:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2100      	movs	r1, #0
 8008a22:	2000      	movs	r0, #0
 8008a24:	f002 f9fc 	bl	800ae20 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8008a28:	f001 ffad 	bl	800a986 <SUBGRF_GetRandom>
 8008a2c:	6078      	str	r0, [r7, #4]

    return rnd;
 8008a2e:	687b      	ldr	r3, [r7, #4]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08a      	sub	sp, #40	@ 0x28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	607a      	str	r2, [r7, #4]
 8008a42:	461a      	mov	r2, r3
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8008a4c:	4ab9      	ldr	r2, [pc, #740]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008a4e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008a52:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8008a54:	f003 f87b 	bl	800bb4e <RFW_DeInit>
    if( rxContinuous == true )
 8008a58:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8008a64:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d004      	beq.n	8008a76 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8008a6c:	4ab2      	ldr	r2, [pc, #712]	@ (8008d38 <RadioSetRxConfig+0x300>)
 8008a6e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008a72:	7013      	strb	r3, [r2, #0]
 8008a74:	e002      	b.n	8008a7c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8008a76:	4bb0      	ldr	r3, [pc, #704]	@ (8008d38 <RadioSetRxConfig+0x300>)
 8008a78:	22ff      	movs	r2, #255	@ 0xff
 8008a7a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	2b05      	cmp	r3, #5
 8008a80:	d009      	beq.n	8008a96 <RadioSetRxConfig+0x5e>
 8008a82:	2b05      	cmp	r3, #5
 8008a84:	f300 81d7 	bgt.w	8008e36 <RadioSetRxConfig+0x3fe>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 80bf 	beq.w	8008c0c <RadioSetRxConfig+0x1d4>
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	f000 8124 	beq.w	8008cdc <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8008a94:	e1cf      	b.n	8008e36 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8008a96:	2001      	movs	r0, #1
 8008a98:	f002 f8ba 	bl	800ac10 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008a9c:	4ba5      	ldr	r3, [pc, #660]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008aa4:	4aa3      	ldr	r2, [pc, #652]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8008aaa:	4ba2      	ldr	r3, [pc, #648]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008aac:	2209      	movs	r2, #9
 8008aae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8008ab2:	4ba0      	ldr	r3, [pc, #640]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008ab4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8008ab8:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008aba:	68b8      	ldr	r0, [r7, #8]
 8008abc:	f002 ff7a 	bl	800b9b4 <SUBGRF_GetFskBandwidthRegValue>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	4b9b      	ldr	r3, [pc, #620]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008ac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008aca:	4b9a      	ldr	r3, [pc, #616]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008ad0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	4b97      	ldr	r3, [pc, #604]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008ad8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8008ada:	4b96      	ldr	r3, [pc, #600]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8008ae0:	4b94      	ldr	r3, [pc, #592]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008ae2:	2210      	movs	r2, #16
 8008ae4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008ae6:	4b93      	ldr	r3, [pc, #588]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8008aec:	4b91      	ldr	r3, [pc, #580]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008af2:	4b91      	ldr	r3, [pc, #580]	@ (8008d38 <RadioSetRxConfig+0x300>)
 8008af4:	781a      	ldrb	r2, [r3, #0]
 8008af6:	4b8f      	ldr	r3, [pc, #572]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008af8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008afa:	4b8e      	ldr	r3, [pc, #568]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008afc:	2201      	movs	r2, #1
 8008afe:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8008b00:	4b8c      	ldr	r3, [pc, #560]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8008b06:	2005      	movs	r0, #5
 8008b08:	f7ff fec2 	bl	8008890 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008b0c:	488b      	ldr	r0, [pc, #556]	@ (8008d3c <RadioSetRxConfig+0x304>)
 8008b0e:	f002 fb1d 	bl	800b14c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b12:	488b      	ldr	r0, [pc, #556]	@ (8008d40 <RadioSetRxConfig+0x308>)
 8008b14:	f002 fbec 	bl	800b2f0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008b18:	4a8a      	ldr	r2, [pc, #552]	@ (8008d44 <RadioSetRxConfig+0x30c>)
 8008b1a:	f107 031c 	add.w	r3, r7, #28
 8008b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b22:	e883 0003 	stmia.w	r3, {r0, r1}
 8008b26:	f107 031c 	add.w	r3, r7, #28
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f001 fea9 	bl	800a882 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008b30:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8008b34:	f001 fef4 	bl	800a920 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8008b38:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8008b3c:	f000 fe24 	bl	8009788 <RadioRead>
 8008b40:	4603      	mov	r3, r0
 8008b42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8008b46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b4a:	f023 0310 	bic.w	r3, r3, #16
 8008b4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8008b52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b56:	4619      	mov	r1, r3
 8008b58:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8008b5c:	f000 fe02 	bl	8009764 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8008b60:	2104      	movs	r1, #4
 8008b62:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8008b66:	f000 fdfd 	bl	8009764 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8008b6a:	f640 009b 	movw	r0, #2203	@ 0x89b
 8008b6e:	f000 fe0b 	bl	8009788 <RadioRead>
 8008b72:	4603      	mov	r3, r0
 8008b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008b78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b7c:	f023 031c 	bic.w	r3, r3, #28
 8008b80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8008b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b88:	f043 0308 	orr.w	r3, r3, #8
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	4619      	mov	r1, r3
 8008b90:	f640 009b 	movw	r0, #2203	@ 0x89b
 8008b94:	f000 fde6 	bl	8009764 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8008b98:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8008b9c:	f000 fdf4 	bl	8009788 <RadioRead>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008baa:	f023 0318 	bic.w	r3, r3, #24
 8008bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8008bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bb6:	f043 0318 	orr.w	r3, r3, #24
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8008bc2:	f000 fdcf 	bl	8009764 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8008bc6:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8008bca:	f000 fddd 	bl	8009788 <RadioRead>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8008bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8008be0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008be4:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	4619      	mov	r1, r3
 8008bec:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8008bf0:	f000 fdb8 	bl	8009764 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008bf4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008bf6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008bfa:	fb02 f303 	mul.w	r3, r2, r3
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c06:	4a4b      	ldr	r2, [pc, #300]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c08:	6093      	str	r3, [r2, #8]
            break;
 8008c0a:	e115      	b.n	8008e38 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	f001 ffff 	bl	800ac10 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008c12:	4b48      	ldr	r3, [pc, #288]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008c1a:	4a46      	ldr	r2, [pc, #280]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008c20:	4b44      	ldr	r3, [pc, #272]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c22:	220b      	movs	r2, #11
 8008c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008c28:	68b8      	ldr	r0, [r7, #8]
 8008c2a:	f002 fec3 	bl	800b9b4 <SUBGRF_GetFskBandwidthRegValue>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	461a      	mov	r2, r3
 8008c32:	4b40      	ldr	r3, [pc, #256]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008c38:	4b3e      	ldr	r3, [pc, #248]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008c3e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	4b3b      	ldr	r3, [pc, #236]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c46:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008c48:	4b3a      	ldr	r3, [pc, #232]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c4a:	2204      	movs	r2, #4
 8008c4c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8008c4e:	4b39      	ldr	r3, [pc, #228]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c50:	2218      	movs	r2, #24
 8008c52:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008c54:	4b37      	ldr	r3, [pc, #220]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008c5a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008c5e:	f083 0301 	eor.w	r3, r3, #1
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	461a      	mov	r2, r3
 8008c66:	4b33      	ldr	r3, [pc, #204]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c68:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008c6a:	4b33      	ldr	r3, [pc, #204]	@ (8008d38 <RadioSetRxConfig+0x300>)
 8008c6c:	781a      	ldrb	r2, [r3, #0]
 8008c6e:	4b31      	ldr	r3, [pc, #196]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c70:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8008c72:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c7c:	22f2      	movs	r2, #242	@ 0xf2
 8008c7e:	75da      	strb	r2, [r3, #23]
 8008c80:	e002      	b.n	8008c88 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008c82:	4b2c      	ldr	r3, [pc, #176]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c84:	2201      	movs	r2, #1
 8008c86:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008c88:	4b2a      	ldr	r3, [pc, #168]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008c8e:	f000 fc68 	bl	8009562 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8008c92:	2000      	movs	r0, #0
 8008c94:	f7ff fdfc 	bl	8008890 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008c98:	4828      	ldr	r0, [pc, #160]	@ (8008d3c <RadioSetRxConfig+0x304>)
 8008c9a:	f002 fa57 	bl	800b14c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c9e:	4828      	ldr	r0, [pc, #160]	@ (8008d40 <RadioSetRxConfig+0x308>)
 8008ca0:	f002 fb26 	bl	800b2f0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008ca4:	4a28      	ldr	r2, [pc, #160]	@ (8008d48 <RadioSetRxConfig+0x310>)
 8008ca6:	f107 0314 	add.w	r3, r7, #20
 8008caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cae:	e883 0003 	stmia.w	r3, {r0, r1}
 8008cb2:	f107 0314 	add.w	r3, r7, #20
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f001 fde3 	bl	800a882 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008cbc:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8008cc0:	f001 fe2e 	bl	800a920 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008cc4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008cc6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008cca:	fb02 f303 	mul.w	r3, r2, r3
 8008cce:	461a      	mov	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd6:	4a17      	ldr	r2, [pc, #92]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008cd8:	6093      	str	r3, [r2, #8]
            break;
 8008cda:	e0ad      	b.n	8008e38 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008cdc:	2000      	movs	r0, #0
 8008cde:	f001 ff97 	bl	800ac10 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008ce2:	4b14      	ldr	r3, [pc, #80]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	4b11      	ldr	r3, [pc, #68]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008cf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8008cf4:	4a15      	ldr	r2, [pc, #84]	@ (8008d4c <RadioSetRxConfig+0x314>)
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	781a      	ldrb	r2, [r3, #0]
 8008cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8008d02:	4a0c      	ldr	r2, [pc, #48]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d105      	bne.n	8008d1c <RadioSetRxConfig+0x2e4>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b0b      	cmp	r3, #11
 8008d14:	d008      	beq.n	8008d28 <RadioSetRxConfig+0x2f0>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b0c      	cmp	r3, #12
 8008d1a:	d005      	beq.n	8008d28 <RadioSetRxConfig+0x2f0>
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d116      	bne.n	8008d50 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b0c      	cmp	r3, #12
 8008d26:	d113      	bne.n	8008d50 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008d28:	4b02      	ldr	r3, [pc, #8]	@ (8008d34 <RadioSetRxConfig+0x2fc>)
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8008d30:	e012      	b.n	8008d58 <RadioSetRxConfig+0x320>
 8008d32:	bf00      	nop
 8008d34:	20008580 	.word	0x20008580
 8008d38:	2000000c 	.word	0x2000000c
 8008d3c:	200085b8 	.word	0x200085b8
 8008d40:	2000858e 	.word	0x2000858e
 8008d44:	08010a40 	.word	0x08010a40
 8008d48:	08010a48 	.word	0x08010a48
 8008d4c:	08011064 	.word	0x08011064
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008d50:	4b3b      	ldr	r3, [pc, #236]	@ (8008e40 <RadioSetRxConfig+0x408>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008d58:	4b39      	ldr	r3, [pc, #228]	@ (8008e40 <RadioSetRxConfig+0x408>)
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008d5e:	4b38      	ldr	r3, [pc, #224]	@ (8008e40 <RadioSetRxConfig+0x408>)
 8008d60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008d64:	2b05      	cmp	r3, #5
 8008d66:	d004      	beq.n	8008d72 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008d68:	4b35      	ldr	r3, [pc, #212]	@ (8008e40 <RadioSetRxConfig+0x408>)
 8008d6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008d6e:	2b06      	cmp	r3, #6
 8008d70:	d10a      	bne.n	8008d88 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8008d72:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008d74:	2b0b      	cmp	r3, #11
 8008d76:	d803      	bhi.n	8008d80 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008d78:	4b31      	ldr	r3, [pc, #196]	@ (8008e40 <RadioSetRxConfig+0x408>)
 8008d7a:	220c      	movs	r2, #12
 8008d7c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008d7e:	e006      	b.n	8008d8e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008d80:	4a2f      	ldr	r2, [pc, #188]	@ (8008e40 <RadioSetRxConfig+0x408>)
 8008d82:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008d84:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008d86:	e002      	b.n	8008d8e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008d88:	4a2d      	ldr	r2, [pc, #180]	@ (8008e40 <RadioSetRxConfig+0x408>)
 8008d8a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008d8c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008d8e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8008d92:	4b2b      	ldr	r3, [pc, #172]	@ (8008e40 <RadioSetRxConfig+0x408>)
 8008d94:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008d96:	4b2b      	ldr	r3, [pc, #172]	@ (8008e44 <RadioSetRxConfig+0x40c>)
 8008d98:	781a      	ldrb	r2, [r3, #0]
 8008d9a:	4b29      	ldr	r3, [pc, #164]	@ (8008e40 <RadioSetRxConfig+0x408>)
 8008d9c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008d9e:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8008da2:	4b27      	ldr	r3, [pc, #156]	@ (8008e40 <RadioSetRxConfig+0x408>)
 8008da4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008da8:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8008dac:	4b24      	ldr	r3, [pc, #144]	@ (8008e40 <RadioSetRxConfig+0x408>)
 8008dae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8008db2:	f000 fbd6 	bl	8009562 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008db6:	2001      	movs	r0, #1
 8008db8:	f7ff fd6a 	bl	8008890 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008dbc:	4822      	ldr	r0, [pc, #136]	@ (8008e48 <RadioSetRxConfig+0x410>)
 8008dbe:	f002 f9c5 	bl	800b14c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008dc2:	4822      	ldr	r0, [pc, #136]	@ (8008e4c <RadioSetRxConfig+0x414>)
 8008dc4:	f002 fa94 	bl	800b2f0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008dc8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f001 ff2e 	bl	800ac2e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8008dd2:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8008dd6:	f002 fbe7 	bl	800b5a8 <SUBGRF_ReadRegister>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f003 0301 	and.w	r3, r3, #1
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	4619      	mov	r1, r3
 8008de4:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8008de8:	f002 fbca 	bl	800b580 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008dec:	4b14      	ldr	r3, [pc, #80]	@ (8008e40 <RadioSetRxConfig+0x408>)
 8008dee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d10d      	bne.n	8008e12 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008df6:	f240 7036 	movw	r0, #1846	@ 0x736
 8008dfa:	f002 fbd5 	bl	800b5a8 <SUBGRF_ReadRegister>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	f023 0304 	bic.w	r3, r3, #4
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	4619      	mov	r1, r3
 8008e08:	f240 7036 	movw	r0, #1846	@ 0x736
 8008e0c:	f002 fbb8 	bl	800b580 <SUBGRF_WriteRegister>
 8008e10:	e00c      	b.n	8008e2c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008e12:	f240 7036 	movw	r0, #1846	@ 0x736
 8008e16:	f002 fbc7 	bl	800b5a8 <SUBGRF_ReadRegister>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	f043 0304 	orr.w	r3, r3, #4
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	4619      	mov	r1, r3
 8008e24:	f240 7036 	movw	r0, #1846	@ 0x736
 8008e28:	f002 fbaa 	bl	800b580 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8008e2c:	4b04      	ldr	r3, [pc, #16]	@ (8008e40 <RadioSetRxConfig+0x408>)
 8008e2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e32:	609a      	str	r2, [r3, #8]
            break;
 8008e34:	e000      	b.n	8008e38 <RadioSetRxConfig+0x400>
            break;
 8008e36:	bf00      	nop
    }
}
 8008e38:	bf00      	nop
 8008e3a:	3728      	adds	r7, #40	@ 0x28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20008580 	.word	0x20008580
 8008e44:	2000000c 	.word	0x2000000c
 8008e48:	200085b8 	.word	0x200085b8
 8008e4c:	2000858e 	.word	0x2000858e

08008e50 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60ba      	str	r2, [r7, #8]
 8008e58:	607b      	str	r3, [r7, #4]
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8008e62:	f002 fe74 	bl	800bb4e <RFW_DeInit>
    switch( modem )
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	f000 80c7 	beq.w	8008ffc <RadioSetTxConfig+0x1ac>
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	f300 80d6 	bgt.w	8009020 <RadioSetTxConfig+0x1d0>
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <RadioSetTxConfig+0x2e>
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d059      	beq.n	8008f30 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008e7c:	e0d0      	b.n	8009020 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008e7e:	4b77      	ldr	r3, [pc, #476]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008e86:	4a75      	ldr	r2, [pc, #468]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008e8c:	4b73      	ldr	r3, [pc, #460]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008e8e:	220b      	movs	r2, #11
 8008e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f002 fd8d 	bl	800b9b4 <SUBGRF_GetFskBandwidthRegValue>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	4b6f      	ldr	r3, [pc, #444]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8008ea4:	4a6d      	ldr	r2, [pc, #436]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008eaa:	4b6c      	ldr	r3, [pc, #432]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008eb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	4b69      	ldr	r3, [pc, #420]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008eb8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008eba:	4b68      	ldr	r3, [pc, #416]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008ebc:	2204      	movs	r2, #4
 8008ebe:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8008ec0:	4b66      	ldr	r3, [pc, #408]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008ec2:	2218      	movs	r2, #24
 8008ec4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008ec6:	4b65      	ldr	r3, [pc, #404]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008ecc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008ed0:	f083 0301 	eor.w	r3, r3, #1
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	4b60      	ldr	r3, [pc, #384]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008eda:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8008edc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008ee4:	4b5d      	ldr	r3, [pc, #372]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008ee6:	22f2      	movs	r2, #242	@ 0xf2
 8008ee8:	75da      	strb	r2, [r3, #23]
 8008eea:	e002      	b.n	8008ef2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008eec:	4b5b      	ldr	r3, [pc, #364]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008eee:	2201      	movs	r2, #1
 8008ef0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008ef8:	f000 fb33 	bl	8009562 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8008efc:	2000      	movs	r0, #0
 8008efe:	f7ff fcc7 	bl	8008890 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008f02:	4857      	ldr	r0, [pc, #348]	@ (8009060 <RadioSetTxConfig+0x210>)
 8008f04:	f002 f922 	bl	800b14c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008f08:	4856      	ldr	r0, [pc, #344]	@ (8009064 <RadioSetTxConfig+0x214>)
 8008f0a:	f002 f9f1 	bl	800b2f0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008f0e:	4a56      	ldr	r2, [pc, #344]	@ (8009068 <RadioSetTxConfig+0x218>)
 8008f10:	f107 0310 	add.w	r3, r7, #16
 8008f14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f18:	e883 0003 	stmia.w	r3, {r0, r1}
 8008f1c:	f107 0310 	add.w	r3, r7, #16
 8008f20:	4618      	mov	r0, r3
 8008f22:	f001 fcae 	bl	800a882 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008f26:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8008f2a:	f001 fcf9 	bl	800a920 <SUBGRF_SetWhiteningSeed>
            break;
 8008f2e:	e078      	b.n	8009022 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008f30:	4b4a      	ldr	r3, [pc, #296]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	4b47      	ldr	r3, [pc, #284]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8008f42:	4a4a      	ldr	r2, [pc, #296]	@ (800906c <RadioSetTxConfig+0x21c>)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4413      	add	r3, r2
 8008f48:	781a      	ldrb	r2, [r3, #0]
 8008f4a:	4b44      	ldr	r3, [pc, #272]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008f4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8008f50:	4a42      	ldr	r2, [pc, #264]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008f52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008f56:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d105      	bne.n	8008f6c <RadioSetTxConfig+0x11c>
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	2b0b      	cmp	r3, #11
 8008f64:	d008      	beq.n	8008f78 <RadioSetTxConfig+0x128>
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	2b0c      	cmp	r3, #12
 8008f6a:	d005      	beq.n	8008f78 <RadioSetTxConfig+0x128>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d107      	bne.n	8008f82 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	2b0c      	cmp	r3, #12
 8008f76:	d104      	bne.n	8008f82 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008f78:	4b38      	ldr	r3, [pc, #224]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8008f80:	e003      	b.n	8008f8a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008f82:	4b36      	ldr	r3, [pc, #216]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008f8a:	4b34      	ldr	r3, [pc, #208]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008f90:	4b32      	ldr	r3, [pc, #200]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008f92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008f96:	2b05      	cmp	r3, #5
 8008f98:	d004      	beq.n	8008fa4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008f9a:	4b30      	ldr	r3, [pc, #192]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008f9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008fa0:	2b06      	cmp	r3, #6
 8008fa2:	d10a      	bne.n	8008fba <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8008fa4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008fa6:	2b0b      	cmp	r3, #11
 8008fa8:	d803      	bhi.n	8008fb2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008faa:	4b2c      	ldr	r3, [pc, #176]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008fac:	220c      	movs	r2, #12
 8008fae:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008fb0:	e006      	b.n	8008fc0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008fb4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008fb6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008fb8:	e002      	b.n	8008fc0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008fba:	4a28      	ldr	r2, [pc, #160]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008fbc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008fbe:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008fc0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008fc4:	4b25      	ldr	r3, [pc, #148]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008fc6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008fc8:	4b29      	ldr	r3, [pc, #164]	@ (8009070 <RadioSetTxConfig+0x220>)
 8008fca:	781a      	ldrb	r2, [r3, #0]
 8008fcc:	4b23      	ldr	r3, [pc, #140]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008fce:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008fd0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008fd4:	4b21      	ldr	r3, [pc, #132]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008fd6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008fda:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8008fde:	4b1f      	ldr	r3, [pc, #124]	@ (800905c <RadioSetTxConfig+0x20c>)
 8008fe0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8008fe4:	f000 fabd 	bl	8009562 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008fe8:	2001      	movs	r0, #1
 8008fea:	f7ff fc51 	bl	8008890 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008fee:	481c      	ldr	r0, [pc, #112]	@ (8009060 <RadioSetTxConfig+0x210>)
 8008ff0:	f002 f8ac 	bl	800b14c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008ff4:	481b      	ldr	r0, [pc, #108]	@ (8009064 <RadioSetTxConfig+0x214>)
 8008ff6:	f002 f97b 	bl	800b2f0 <SUBGRF_SetPacketParams>
            break;
 8008ffa:	e012      	b.n	8009022 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8008ffc:	2004      	movs	r0, #4
 8008ffe:	f7ff fc47 	bl	8008890 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009002:	4b16      	ldr	r3, [pc, #88]	@ (800905c <RadioSetTxConfig+0x20c>)
 8009004:	2202      	movs	r2, #2
 8009006:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800900a:	4a14      	ldr	r2, [pc, #80]	@ (800905c <RadioSetTxConfig+0x20c>)
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009010:	4b12      	ldr	r3, [pc, #72]	@ (800905c <RadioSetTxConfig+0x20c>)
 8009012:	2216      	movs	r2, #22
 8009014:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009018:	4811      	ldr	r0, [pc, #68]	@ (8009060 <RadioSetTxConfig+0x210>)
 800901a:	f002 f897 	bl	800b14c <SUBGRF_SetModulationParams>
            break;
 800901e:	e000      	b.n	8009022 <RadioSetTxConfig+0x1d2>
            break;
 8009020:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009026:	4618      	mov	r0, r3
 8009028:	f002 fbc6 	bl	800b7b8 <SUBGRF_SetRfTxPower>
 800902c:	4603      	mov	r3, r0
 800902e:	461a      	mov	r2, r3
 8009030:	4b0a      	ldr	r3, [pc, #40]	@ (800905c <RadioSetTxConfig+0x20c>)
 8009032:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009036:	210e      	movs	r1, #14
 8009038:	f640 101f 	movw	r0, #2335	@ 0x91f
 800903c:	f002 faa0 	bl	800b580 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009040:	4b06      	ldr	r3, [pc, #24]	@ (800905c <RadioSetTxConfig+0x20c>)
 8009042:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009046:	4618      	mov	r0, r3
 8009048:	f002 fd95 	bl	800bb76 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800904c:	4a03      	ldr	r2, [pc, #12]	@ (800905c <RadioSetTxConfig+0x20c>)
 800904e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009050:	6053      	str	r3, [r2, #4]
}
 8009052:	bf00      	nop
 8009054:	3718      	adds	r7, #24
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20008580 	.word	0x20008580
 8009060:	200085b8 	.word	0x200085b8
 8009064:	2000858e 	.word	0x2000858e
 8009068:	08010a48 	.word	0x08010a48
 800906c:	08011064 	.word	0x08011064
 8009070:	2000000c 	.word	0x2000000c

08009074 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
    return true;
 800907c:	2301      	movs	r3, #1
}
 800907e:	4618      	mov	r0, r3
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	bc80      	pop	{r7}
 8009086:	4770      	bx	lr

08009088 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	4603      	mov	r3, r0
 8009090:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8009096:	79fb      	ldrb	r3, [r7, #7]
 8009098:	2b0a      	cmp	r3, #10
 800909a:	d83e      	bhi.n	800911a <RadioGetLoRaBandwidthInHz+0x92>
 800909c:	a201      	add	r2, pc, #4	@ (adr r2, 80090a4 <RadioGetLoRaBandwidthInHz+0x1c>)
 800909e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a2:	bf00      	nop
 80090a4:	080090d1 	.word	0x080090d1
 80090a8:	080090e1 	.word	0x080090e1
 80090ac:	080090f1 	.word	0x080090f1
 80090b0:	08009101 	.word	0x08009101
 80090b4:	08009109 	.word	0x08009109
 80090b8:	0800910f 	.word	0x0800910f
 80090bc:	08009115 	.word	0x08009115
 80090c0:	0800911b 	.word	0x0800911b
 80090c4:	080090d9 	.word	0x080090d9
 80090c8:	080090e9 	.word	0x080090e9
 80090cc:	080090f9 	.word	0x080090f9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80090d0:	f641 6384 	movw	r3, #7812	@ 0x1e84
 80090d4:	60fb      	str	r3, [r7, #12]
        break;
 80090d6:	e020      	b.n	800911a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80090d8:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 80090dc:	60fb      	str	r3, [r7, #12]
        break;
 80090de:	e01c      	b.n	800911a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80090e0:	f643 5309 	movw	r3, #15625	@ 0x3d09
 80090e4:	60fb      	str	r3, [r7, #12]
        break;
 80090e6:	e018      	b.n	800911a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80090e8:	f245 1361 	movw	r3, #20833	@ 0x5161
 80090ec:	60fb      	str	r3, [r7, #12]
        break;
 80090ee:	e014      	b.n	800911a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80090f0:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80090f4:	60fb      	str	r3, [r7, #12]
        break;
 80090f6:	e010      	b.n	800911a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80090f8:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 80090fc:	60fb      	str	r3, [r7, #12]
        break;
 80090fe:	e00c      	b.n	800911a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8009100:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8009104:	60fb      	str	r3, [r7, #12]
        break;
 8009106:	e008      	b.n	800911a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8009108:	4b07      	ldr	r3, [pc, #28]	@ (8009128 <RadioGetLoRaBandwidthInHz+0xa0>)
 800910a:	60fb      	str	r3, [r7, #12]
        break;
 800910c:	e005      	b.n	800911a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800910e:	4b07      	ldr	r3, [pc, #28]	@ (800912c <RadioGetLoRaBandwidthInHz+0xa4>)
 8009110:	60fb      	str	r3, [r7, #12]
        break;
 8009112:	e002      	b.n	800911a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8009114:	4b06      	ldr	r3, [pc, #24]	@ (8009130 <RadioGetLoRaBandwidthInHz+0xa8>)
 8009116:	60fb      	str	r3, [r7, #12]
        break;
 8009118:	bf00      	nop
    }

    return bandwidthInHz;
 800911a:	68fb      	ldr	r3, [r7, #12]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	bc80      	pop	{r7}
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	0001e848 	.word	0x0001e848
 800912c:	0003d090 	.word	0x0003d090
 8009130:	0007a120 	.word	0x0007a120

08009134 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	4608      	mov	r0, r1
 800913e:	4611      	mov	r1, r2
 8009140:	461a      	mov	r2, r3
 8009142:	4603      	mov	r3, r0
 8009144:	70fb      	strb	r3, [r7, #3]
 8009146:	460b      	mov	r3, r1
 8009148:	803b      	strh	r3, [r7, #0]
 800914a:	4613      	mov	r3, r2
 800914c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 800914e:	883b      	ldrh	r3, [r7, #0]
 8009150:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009152:	78ba      	ldrb	r2, [r7, #2]
 8009154:	f082 0201 	eor.w	r2, r2, #1
 8009158:	b2d2      	uxtb	r2, r2
 800915a:	2a00      	cmp	r2, #0
 800915c:	d001      	beq.n	8009162 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800915e:	2208      	movs	r2, #8
 8009160:	e000      	b.n	8009164 <RadioGetGfskTimeOnAirNumerator+0x30>
 8009162:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8009164:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009166:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800916a:	7c3b      	ldrb	r3, [r7, #16]
 800916c:	7d39      	ldrb	r1, [r7, #20]
 800916e:	2900      	cmp	r1, #0
 8009170:	d001      	beq.n	8009176 <RadioGetGfskTimeOnAirNumerator+0x42>
 8009172:	2102      	movs	r1, #2
 8009174:	e000      	b.n	8009178 <RadioGetGfskTimeOnAirNumerator+0x44>
 8009176:	2100      	movs	r1, #0
 8009178:	440b      	add	r3, r1
 800917a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800917c:	4413      	add	r3, r2
}
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	bc80      	pop	{r7}
 8009186:	4770      	bx	lr

08009188 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8009188:	b480      	push	{r7}
 800918a:	b08b      	sub	sp, #44	@ 0x2c
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	4611      	mov	r1, r2
 8009194:	461a      	mov	r2, r3
 8009196:	460b      	mov	r3, r1
 8009198:	71fb      	strb	r3, [r7, #7]
 800919a:	4613      	mov	r3, r2
 800919c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800919e:	79fb      	ldrb	r3, [r7, #7]
 80091a0:	3304      	adds	r3, #4
 80091a2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80091a4:	2300      	movs	r3, #0
 80091a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2b05      	cmp	r3, #5
 80091ae:	d002      	beq.n	80091b6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2b06      	cmp	r3, #6
 80091b4:	d104      	bne.n	80091c0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80091b6:	88bb      	ldrh	r3, [r7, #4]
 80091b8:	2b0b      	cmp	r3, #11
 80091ba:	d801      	bhi.n	80091c0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80091bc:	230c      	movs	r3, #12
 80091be:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d105      	bne.n	80091d2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	2b0b      	cmp	r3, #11
 80091ca:	d008      	beq.n	80091de <RadioGetLoRaTimeOnAirNumerator+0x56>
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2b0c      	cmp	r3, #12
 80091d0:	d005      	beq.n	80091de <RadioGetLoRaTimeOnAirNumerator+0x56>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d105      	bne.n	80091e4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b0c      	cmp	r3, #12
 80091dc:	d102      	bne.n	80091e4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80091de:	2301      	movs	r3, #1
 80091e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80091e4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80091e8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80091ea:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80091ee:	2a00      	cmp	r2, #0
 80091f0:	d001      	beq.n	80091f6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80091f2:	2210      	movs	r2, #16
 80091f4:	e000      	b.n	80091f8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80091f6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80091f8:	4413      	add	r3, r2
 80091fa:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8009200:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8009202:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8009206:	2a00      	cmp	r2, #0
 8009208:	d001      	beq.n	800920e <RadioGetLoRaTimeOnAirNumerator+0x86>
 800920a:	2200      	movs	r2, #0
 800920c:	e000      	b.n	8009210 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800920e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8009210:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009212:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b06      	cmp	r3, #6
 8009218:	d803      	bhi.n	8009222 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	623b      	str	r3, [r7, #32]
 8009220:	e00e      	b.n	8009240 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	3308      	adds	r3, #8
 8009226:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8009228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	3b02      	subs	r3, #2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	623b      	str	r3, [r7, #32]
 8009238:	e002      	b.n	8009240 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	2b00      	cmp	r3, #0
 8009244:	da01      	bge.n	800924a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	4413      	add	r3, r2
 8009250:	1e5a      	subs	r2, r3, #1
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	fb92 f3f3 	sdiv	r3, r2, r3
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	fb03 f202 	mul.w	r2, r3, r2
 800925e:	88bb      	ldrh	r3, [r7, #4]
 8009260:	4413      	add	r3, r2
    int32_t intermediate =
 8009262:	330c      	adds	r3, #12
 8009264:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b06      	cmp	r3, #6
 800926a:	d802      	bhi.n	8009272 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	3302      	adds	r3, #2
 8009270:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	3b02      	subs	r3, #2
 800927c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8009280:	4618      	mov	r0, r3
 8009282:	372c      	adds	r7, #44	@ 0x2c
 8009284:	46bd      	mov	sp, r7
 8009286:	bc80      	pop	{r7}
 8009288:	4770      	bx	lr
	...

0800928c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	@ 0x28
 8009290:	af04      	add	r7, sp, #16
 8009292:	60b9      	str	r1, [r7, #8]
 8009294:	607a      	str	r2, [r7, #4]
 8009296:	461a      	mov	r2, r3
 8009298:	4603      	mov	r3, r0
 800929a:	73fb      	strb	r3, [r7, #15]
 800929c:	4613      	mov	r3, r2
 800929e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80092a4:	2301      	movs	r3, #1
 80092a6:	613b      	str	r3, [r7, #16]

    switch( modem )
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <RadioTimeOnAir+0x28>
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d017      	beq.n	80092e2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80092b2:	e035      	b.n	8009320 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80092b4:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 80092b8:	8c3a      	ldrh	r2, [r7, #32]
 80092ba:	7bb9      	ldrb	r1, [r7, #14]
 80092bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80092c0:	9301      	str	r3, [sp, #4]
 80092c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	4603      	mov	r3, r0
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7ff ff32 	bl	8009134 <RadioGetGfskTimeOnAirNumerator>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80092d6:	fb02 f303 	mul.w	r3, r2, r3
 80092da:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	613b      	str	r3, [r7, #16]
        break;
 80092e0:	e01e      	b.n	8009320 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80092e2:	8c39      	ldrh	r1, [r7, #32]
 80092e4:	7bba      	ldrb	r2, [r7, #14]
 80092e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80092ea:	9302      	str	r3, [sp, #8]
 80092ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	460b      	mov	r3, r1
 80092fa:	6879      	ldr	r1, [r7, #4]
 80092fc:	68b8      	ldr	r0, [r7, #8]
 80092fe:	f7ff ff43 	bl	8009188 <RadioGetLoRaTimeOnAirNumerator>
 8009302:	4603      	mov	r3, r0
 8009304:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009308:	fb02 f303 	mul.w	r3, r2, r3
 800930c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800930e:	4a0a      	ldr	r2, [pc, #40]	@ (8009338 <RadioTimeOnAir+0xac>)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	4413      	add	r3, r2
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff feb6 	bl	8009088 <RadioGetLoRaBandwidthInHz>
 800931c:	6138      	str	r0, [r7, #16]
        break;
 800931e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	4413      	add	r3, r2
 8009326:	1e5a      	subs	r2, r3, #1
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	08011064 	.word	0x08011064

0800933c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8009348:	2300      	movs	r3, #0
 800934a:	2200      	movs	r2, #0
 800934c:	f240 2101 	movw	r1, #513	@ 0x201
 8009350:	f240 2001 	movw	r0, #513	@ 0x201
 8009354:	f001 fd64 	bl	800ae20 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009358:	4b73      	ldr	r3, [pc, #460]	@ (8009528 <RadioSend+0x1ec>)
 800935a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800935e:	2101      	movs	r1, #1
 8009360:	4618      	mov	r0, r3
 8009362:	f002 fa01 	bl	800b768 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8009366:	4b70      	ldr	r3, [pc, #448]	@ (8009528 <RadioSend+0x1ec>)
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d112      	bne.n	8009394 <RadioSend+0x58>
 800936e:	4b6e      	ldr	r3, [pc, #440]	@ (8009528 <RadioSend+0x1ec>)
 8009370:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009374:	2b06      	cmp	r3, #6
 8009376:	d10d      	bne.n	8009394 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009378:	f640 0089 	movw	r0, #2185	@ 0x889
 800937c:	f002 f914 	bl	800b5a8 <SUBGRF_ReadRegister>
 8009380:	4603      	mov	r3, r0
 8009382:	f023 0304 	bic.w	r3, r3, #4
 8009386:	b2db      	uxtb	r3, r3
 8009388:	4619      	mov	r1, r3
 800938a:	f640 0089 	movw	r0, #2185	@ 0x889
 800938e:	f002 f8f7 	bl	800b580 <SUBGRF_WriteRegister>
 8009392:	e00c      	b.n	80093ae <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009394:	f640 0089 	movw	r0, #2185	@ 0x889
 8009398:	f002 f906 	bl	800b5a8 <SUBGRF_ReadRegister>
 800939c:	4603      	mov	r3, r0
 800939e:	f043 0304 	orr.w	r3, r3, #4
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	4619      	mov	r1, r3
 80093a6:	f640 0089 	movw	r0, #2185	@ 0x889
 80093aa:	f002 f8e9 	bl	800b580 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 80093ae:	4b5e      	ldr	r3, [pc, #376]	@ (8009528 <RadioSend+0x1ec>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	f200 80a8 	bhi.w	8009508 <RadioSend+0x1cc>
 80093b8:	a201      	add	r2, pc, #4	@ (adr r2, 80093c0 <RadioSend+0x84>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	080093ef 	.word	0x080093ef
 80093c4:	080093d5 	.word	0x080093d5
 80093c8:	080093ef 	.word	0x080093ef
 80093cc:	08009451 	.word	0x08009451
 80093d0:	08009471 	.word	0x08009471
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80093d4:	4a54      	ldr	r2, [pc, #336]	@ (8009528 <RadioSend+0x1ec>)
 80093d6:	78fb      	ldrb	r3, [r7, #3]
 80093d8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80093da:	4854      	ldr	r0, [pc, #336]	@ (800952c <RadioSend+0x1f0>)
 80093dc:	f001 ff88 	bl	800b2f0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	2200      	movs	r2, #0
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f001 fa38 	bl	800a85c <SUBGRF_SendPayload>
            break;
 80093ec:	e08d      	b.n	800950a <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80093ee:	f002 fbb4 	bl	800bb5a <RFW_Is_Init>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d11e      	bne.n	8009436 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80093f8:	f107 020d 	add.w	r2, r7, #13
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f002 fbc2 	bl	800bb8a <RFW_TransmitInit>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10c      	bne.n	8009426 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800940c:	7b7a      	ldrb	r2, [r7, #13]
 800940e:	4b46      	ldr	r3, [pc, #280]	@ (8009528 <RadioSend+0x1ec>)
 8009410:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009412:	4846      	ldr	r0, [pc, #280]	@ (800952c <RadioSend+0x1f0>)
 8009414:	f001 ff6c 	bl	800b2f0 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8009418:	7b7b      	ldrb	r3, [r7, #13]
 800941a:	2200      	movs	r2, #0
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f001 fa1c 	bl	800a85c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8009424:	e071      	b.n	800950a <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8009426:	4b42      	ldr	r3, [pc, #264]	@ (8009530 <RadioSend+0x1f4>)
 8009428:	2201      	movs	r2, #1
 800942a:	2100      	movs	r1, #0
 800942c:	2002      	movs	r0, #2
 800942e:	f004 faed 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8009432:	2303      	movs	r3, #3
 8009434:	e073      	b.n	800951e <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8009436:	4a3c      	ldr	r2, [pc, #240]	@ (8009528 <RadioSend+0x1ec>)
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800943c:	483b      	ldr	r0, [pc, #236]	@ (800952c <RadioSend+0x1f0>)
 800943e:	f001 ff57 	bl	800b2f0 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8009442:	78fb      	ldrb	r3, [r7, #3]
 8009444:	2200      	movs	r2, #0
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f001 fa07 	bl	800a85c <SUBGRF_SendPayload>
            break;
 800944e:	e05c      	b.n	800950a <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009450:	4b35      	ldr	r3, [pc, #212]	@ (8009528 <RadioSend+0x1ec>)
 8009452:	2202      	movs	r2, #2
 8009454:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8009456:	4a34      	ldr	r2, [pc, #208]	@ (8009528 <RadioSend+0x1ec>)
 8009458:	78fb      	ldrb	r3, [r7, #3]
 800945a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800945c:	4833      	ldr	r0, [pc, #204]	@ (800952c <RadioSend+0x1f0>)
 800945e:	f001 ff47 	bl	800b2f0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	2200      	movs	r2, #0
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f001 f9f7 	bl	800a85c <SUBGRF_SendPayload>
            break;
 800946e:	e04c      	b.n	800950a <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	461a      	mov	r2, r3
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	482f      	ldr	r0, [pc, #188]	@ (8009534 <RadioSend+0x1f8>)
 8009478:	f000 fcca 	bl	8009e10 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800947c:	4b2a      	ldr	r3, [pc, #168]	@ (8009528 <RadioSend+0x1ec>)
 800947e:	2202      	movs	r2, #2
 8009480:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	3301      	adds	r3, #1
 8009486:	b2da      	uxtb	r2, r3
 8009488:	4b27      	ldr	r3, [pc, #156]	@ (8009528 <RadioSend+0x1ec>)
 800948a:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800948c:	4827      	ldr	r0, [pc, #156]	@ (800952c <RadioSend+0x1f0>)
 800948e:	f001 ff2f 	bl	800b2f0 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8009492:	2100      	movs	r1, #0
 8009494:	20f1      	movs	r0, #241	@ 0xf1
 8009496:	f000 f965 	bl	8009764 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800949a:	2100      	movs	r1, #0
 800949c:	20f0      	movs	r0, #240	@ 0xf0
 800949e:	f000 f961 	bl	8009764 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80094a2:	4b21      	ldr	r3, [pc, #132]	@ (8009528 <RadioSend+0x1ec>)
 80094a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094a6:	2b64      	cmp	r3, #100	@ 0x64
 80094a8:	d108      	bne.n	80094bc <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80094aa:	2170      	movs	r1, #112	@ 0x70
 80094ac:	20f3      	movs	r0, #243	@ 0xf3
 80094ae:	f000 f959 	bl	8009764 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80094b2:	211d      	movs	r1, #29
 80094b4:	20f2      	movs	r0, #242	@ 0xf2
 80094b6:	f000 f955 	bl	8009764 <RadioWrite>
 80094ba:	e007      	b.n	80094cc <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80094bc:	21e1      	movs	r1, #225	@ 0xe1
 80094be:	20f3      	movs	r0, #243	@ 0xf3
 80094c0:	f000 f950 	bl	8009764 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80094c4:	2104      	movs	r1, #4
 80094c6:	20f2      	movs	r0, #242	@ 0xf2
 80094c8:	f000 f94c 	bl	8009764 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80094cc:	78fb      	ldrb	r3, [r7, #3]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	00db      	lsls	r3, r3, #3
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	3302      	adds	r3, #2
 80094d6:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80094d8:	89fb      	ldrh	r3, [r7, #14]
 80094da:	0a1b      	lsrs	r3, r3, #8
 80094dc:	b29b      	uxth	r3, r3
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	4619      	mov	r1, r3
 80094e2:	20f4      	movs	r0, #244	@ 0xf4
 80094e4:	f000 f93e 	bl	8009764 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80094e8:	89fb      	ldrh	r3, [r7, #14]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	4619      	mov	r1, r3
 80094ee:	20f5      	movs	r0, #245	@ 0xf5
 80094f0:	f000 f938 	bl	8009764 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 80094f4:	78fb      	ldrb	r3, [r7, #3]
 80094f6:	3301      	adds	r3, #1
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80094fe:	4619      	mov	r1, r3
 8009500:	480c      	ldr	r0, [pc, #48]	@ (8009534 <RadioSend+0x1f8>)
 8009502:	f001 f9ab 	bl	800a85c <SUBGRF_SendPayload>
            break;
 8009506:	e000      	b.n	800950a <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8009508:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800950a:	4b07      	ldr	r3, [pc, #28]	@ (8009528 <RadioSend+0x1ec>)
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	4619      	mov	r1, r3
 8009510:	4809      	ldr	r0, [pc, #36]	@ (8009538 <RadioSend+0x1fc>)
 8009512:	f004 f8f3 	bl	800d6fc <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8009516:	4808      	ldr	r0, [pc, #32]	@ (8009538 <RadioSend+0x1fc>)
 8009518:	f004 f812 	bl	800d540 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	20008580 	.word	0x20008580
 800952c:	2000858e 	.word	0x2000858e
 8009530:	08010a50 	.word	0x08010a50
 8009534:	2000847c 	.word	0x2000847c
 8009538:	200085dc 	.word	0x200085dc

0800953c <RadioSleep>:

static void RadioSleep( void )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8009542:	2300      	movs	r3, #0
 8009544:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8009546:	793b      	ldrb	r3, [r7, #4]
 8009548:	f043 0304 	orr.w	r3, r3, #4
 800954c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800954e:	7938      	ldrb	r0, [r7, #4]
 8009550:	f001 fa60 	bl	800aa14 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8009554:	2002      	movs	r0, #2
 8009556:	f7f8 fbbf 	bl	8001cd8 <HAL_Delay>
}
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <RadioStandby>:

static void RadioStandby( void )
{
 8009562:	b580      	push	{r7, lr}
 8009564:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8009566:	2000      	movs	r0, #0
 8009568:	f001 fa86 	bl	800aa78 <SUBGRF_SetStandby>
}
 800956c:	bf00      	nop
 800956e:	bd80      	pop	{r7, pc}

08009570 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8009578:	f002 faef 	bl	800bb5a <RFW_Is_Init>
 800957c:	4603      	mov	r3, r0
 800957e:	2b01      	cmp	r3, #1
 8009580:	d102      	bne.n	8009588 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8009582:	f002 fb12 	bl	800bbaa <RFW_ReceiveInit>
 8009586:	e007      	b.n	8009598 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009588:	2300      	movs	r3, #0
 800958a:	2200      	movs	r2, #0
 800958c:	f240 2162 	movw	r1, #610	@ 0x262
 8009590:	f240 2062 	movw	r0, #610	@ 0x262
 8009594:	f001 fc44 	bl	800ae20 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d006      	beq.n	80095ac <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	4811      	ldr	r0, [pc, #68]	@ (80095e8 <RadioRx+0x78>)
 80095a2:	f004 f8ab 	bl	800d6fc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80095a6:	4810      	ldr	r0, [pc, #64]	@ (80095e8 <RadioRx+0x78>)
 80095a8:	f003 ffca 	bl	800d540 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80095ac:	4b0f      	ldr	r3, [pc, #60]	@ (80095ec <RadioRx+0x7c>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80095b2:	4b0e      	ldr	r3, [pc, #56]	@ (80095ec <RadioRx+0x7c>)
 80095b4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80095b8:	2100      	movs	r1, #0
 80095ba:	4618      	mov	r0, r3
 80095bc:	f002 f8d4 	bl	800b768 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80095c0:	4b0a      	ldr	r3, [pc, #40]	@ (80095ec <RadioRx+0x7c>)
 80095c2:	785b      	ldrb	r3, [r3, #1]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d004      	beq.n	80095d2 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80095c8:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80095cc:	f001 fa90 	bl	800aaf0 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80095d0:	e005      	b.n	80095de <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80095d2:	4b06      	ldr	r3, [pc, #24]	@ (80095ec <RadioRx+0x7c>)
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	019b      	lsls	r3, r3, #6
 80095d8:	4618      	mov	r0, r3
 80095da:	f001 fa89 	bl	800aaf0 <SUBGRF_SetRx>
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	200085f4 	.word	0x200085f4
 80095ec:	20008580 	.word	0x20008580

080095f0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 80095f8:	f002 faaf 	bl	800bb5a <RFW_Is_Init>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d102      	bne.n	8009608 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8009602:	f002 fad2 	bl	800bbaa <RFW_ReceiveInit>
 8009606:	e007      	b.n	8009618 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009608:	2300      	movs	r3, #0
 800960a:	2200      	movs	r2, #0
 800960c:	f240 2162 	movw	r1, #610	@ 0x262
 8009610:	f240 2062 	movw	r0, #610	@ 0x262
 8009614:	f001 fc04 	bl	800ae20 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d006      	beq.n	800962c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800961e:	6879      	ldr	r1, [r7, #4]
 8009620:	4811      	ldr	r0, [pc, #68]	@ (8009668 <RadioRxBoosted+0x78>)
 8009622:	f004 f86b 	bl	800d6fc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8009626:	4810      	ldr	r0, [pc, #64]	@ (8009668 <RadioRxBoosted+0x78>)
 8009628:	f003 ff8a 	bl	800d540 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800962c:	4b0f      	ldr	r3, [pc, #60]	@ (800966c <RadioRxBoosted+0x7c>)
 800962e:	2200      	movs	r2, #0
 8009630:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009632:	4b0e      	ldr	r3, [pc, #56]	@ (800966c <RadioRxBoosted+0x7c>)
 8009634:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009638:	2100      	movs	r1, #0
 800963a:	4618      	mov	r0, r3
 800963c:	f002 f894 	bl	800b768 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8009640:	4b0a      	ldr	r3, [pc, #40]	@ (800966c <RadioRxBoosted+0x7c>)
 8009642:	785b      	ldrb	r3, [r3, #1]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d004      	beq.n	8009652 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8009648:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800964c:	f001 fa70 	bl	800ab30 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8009650:	e005      	b.n	800965e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8009652:	4b06      	ldr	r3, [pc, #24]	@ (800966c <RadioRxBoosted+0x7c>)
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	019b      	lsls	r3, r3, #6
 8009658:	4618      	mov	r0, r3
 800965a:	f001 fa69 	bl	800ab30 <SUBGRF_SetRxBoosted>
}
 800965e:	bf00      	nop
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	200085f4 	.word	0x200085f4
 800966c:	20008580 	.word	0x20008580

08009670 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	005a      	lsls	r2, r3, #1
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	4413      	add	r3, r2
 8009682:	4a0c      	ldr	r2, [pc, #48]	@ (80096b4 <RadioSetRxDutyCycle+0x44>)
 8009684:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8009686:	2300      	movs	r3, #0
 8009688:	2200      	movs	r2, #0
 800968a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800968e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009692:	f001 fbc5 	bl	800ae20 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009696:	4b07      	ldr	r3, [pc, #28]	@ (80096b4 <RadioSetRxDutyCycle+0x44>)
 8009698:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800969c:	2100      	movs	r1, #0
 800969e:	4618      	mov	r0, r3
 80096a0:	f002 f862 	bl	800b768 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f001 fa66 	bl	800ab78 <SUBGRF_SetRxDutyCycle>
}
 80096ac:	bf00      	nop
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	20008580 	.word	0x20008580

080096b8 <RadioStartCad>:

static void RadioStartCad( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80096bc:	4b09      	ldr	r3, [pc, #36]	@ (80096e4 <RadioStartCad+0x2c>)
 80096be:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80096c2:	2100      	movs	r1, #0
 80096c4:	4618      	mov	r0, r3
 80096c6:	f002 f84f 	bl	800b768 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80096ca:	2300      	movs	r3, #0
 80096cc:	2200      	movs	r2, #0
 80096ce:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80096d2:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80096d6:	f001 fba3 	bl	800ae20 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80096da:	f001 fa79 	bl	800abd0 <SUBGRF_SetCad>
}
 80096de:	bf00      	nop
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	20008580 	.word	0x20008580

080096e8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	460b      	mov	r3, r1
 80096f2:	70fb      	strb	r3, [r7, #3]
 80096f4:	4613      	mov	r3, r2
 80096f6:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 80096f8:	883b      	ldrh	r3, [r7, #0]
 80096fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80096fe:	fb02 f303 	mul.w	r3, r2, r3
 8009702:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f001 fbe7 	bl	800aed8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800970a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800970e:	4618      	mov	r0, r3
 8009710:	f002 f852 	bl	800b7b8 <SUBGRF_SetRfTxPower>
 8009714:	4603      	mov	r3, r0
 8009716:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009718:	210e      	movs	r1, #14
 800971a:	f640 101f 	movw	r0, #2335	@ 0x91f
 800971e:	f001 ff2f 	bl	800b580 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8009722:	7afb      	ldrb	r3, [r7, #11]
 8009724:	2101      	movs	r1, #1
 8009726:	4618      	mov	r0, r3
 8009728:	f002 f81e 	bl	800b768 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800972c:	f001 fa5e 	bl	800abec <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8009730:	68f9      	ldr	r1, [r7, #12]
 8009732:	4805      	ldr	r0, [pc, #20]	@ (8009748 <RadioSetTxContinuousWave+0x60>)
 8009734:	f003 ffe2 	bl	800d6fc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8009738:	4803      	ldr	r0, [pc, #12]	@ (8009748 <RadioSetTxContinuousWave+0x60>)
 800973a:	f003 ff01 	bl	800d540 <UTIL_TIMER_Start>
}
 800973e:	bf00      	nop
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	200085dc 	.word	0x200085dc

0800974c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8009756:	f001 fe80 	bl	800b45a <SUBGRF_GetRssiInst>
 800975a:	4603      	mov	r3, r0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	4603      	mov	r3, r0
 800976c:	460a      	mov	r2, r1
 800976e:	80fb      	strh	r3, [r7, #6]
 8009770:	4613      	mov	r3, r2
 8009772:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8009774:	797a      	ldrb	r2, [r7, #5]
 8009776:	88fb      	ldrh	r3, [r7, #6]
 8009778:	4611      	mov	r1, r2
 800977a:	4618      	mov	r0, r3
 800977c:	f001 ff00 	bl	800b580 <SUBGRF_WriteRegister>
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	4603      	mov	r3, r0
 8009790:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8009792:	88fb      	ldrh	r3, [r7, #6]
 8009794:	4618      	mov	r0, r3
 8009796:	f001 ff07 	bl	800b5a8 <SUBGRF_ReadRegister>
 800979a:	4603      	mov	r3, r0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	80fb      	strh	r3, [r7, #6]
 80097b0:	4613      	mov	r3, r2
 80097b2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80097b4:	797b      	ldrb	r3, [r7, #5]
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	88fb      	ldrh	r3, [r7, #6]
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	4618      	mov	r0, r3
 80097be:	f001 ff07 	bl	800b5d0 <SUBGRF_WriteRegisters>
}
 80097c2:	bf00      	nop
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	4603      	mov	r3, r0
 80097d2:	6039      	str	r1, [r7, #0]
 80097d4:	80fb      	strh	r3, [r7, #6]
 80097d6:	4613      	mov	r3, r2
 80097d8:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80097da:	797b      	ldrb	r3, [r7, #5]
 80097dc:	b29a      	uxth	r2, r3
 80097de:	88fb      	ldrh	r3, [r7, #6]
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f001 ff16 	bl	800b614 <SUBGRF_ReadRegisters>
}
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	460a      	mov	r2, r1
 80097fa:	71fb      	strb	r3, [r7, #7]
 80097fc:	4613      	mov	r3, r2
 80097fe:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8009800:	79fb      	ldrb	r3, [r7, #7]
 8009802:	2b01      	cmp	r3, #1
 8009804:	d10a      	bne.n	800981c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8009806:	4a0e      	ldr	r2, [pc, #56]	@ (8009840 <RadioSetMaxPayloadLength+0x50>)
 8009808:	79bb      	ldrb	r3, [r7, #6]
 800980a:	7013      	strb	r3, [r2, #0]
 800980c:	4b0c      	ldr	r3, [pc, #48]	@ (8009840 <RadioSetMaxPayloadLength+0x50>)
 800980e:	781a      	ldrb	r2, [r3, #0]
 8009810:	4b0c      	ldr	r3, [pc, #48]	@ (8009844 <RadioSetMaxPayloadLength+0x54>)
 8009812:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009814:	480c      	ldr	r0, [pc, #48]	@ (8009848 <RadioSetMaxPayloadLength+0x58>)
 8009816:	f001 fd6b 	bl	800b2f0 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800981a:	e00d      	b.n	8009838 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800981c:	4b09      	ldr	r3, [pc, #36]	@ (8009844 <RadioSetMaxPayloadLength+0x54>)
 800981e:	7d5b      	ldrb	r3, [r3, #21]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d109      	bne.n	8009838 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8009824:	4a06      	ldr	r2, [pc, #24]	@ (8009840 <RadioSetMaxPayloadLength+0x50>)
 8009826:	79bb      	ldrb	r3, [r7, #6]
 8009828:	7013      	strb	r3, [r2, #0]
 800982a:	4b05      	ldr	r3, [pc, #20]	@ (8009840 <RadioSetMaxPayloadLength+0x50>)
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	4b05      	ldr	r3, [pc, #20]	@ (8009844 <RadioSetMaxPayloadLength+0x54>)
 8009830:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009832:	4805      	ldr	r0, [pc, #20]	@ (8009848 <RadioSetMaxPayloadLength+0x58>)
 8009834:	f001 fd5c 	bl	800b2f0 <SUBGRF_SetPacketParams>
}
 8009838:	bf00      	nop
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	2000000c 	.word	0x2000000c
 8009844:	20008580 	.word	0x20008580
 8009848:	2000858e 	.word	0x2000858e

0800984c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009856:	4a13      	ldr	r2, [pc, #76]	@ (80098a4 <RadioSetPublicNetwork+0x58>)
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	7313      	strb	r3, [r2, #12]
 800985c:	4b11      	ldr	r3, [pc, #68]	@ (80098a4 <RadioSetPublicNetwork+0x58>)
 800985e:	7b1a      	ldrb	r2, [r3, #12]
 8009860:	4b10      	ldr	r3, [pc, #64]	@ (80098a4 <RadioSetPublicNetwork+0x58>)
 8009862:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009864:	2001      	movs	r0, #1
 8009866:	f7ff f813 	bl	8008890 <RadioSetModem>
    if( enable == true )
 800986a:	79fb      	ldrb	r3, [r7, #7]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00a      	beq.n	8009886 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009870:	2134      	movs	r1, #52	@ 0x34
 8009872:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009876:	f001 fe83 	bl	800b580 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800987a:	2144      	movs	r1, #68	@ 0x44
 800987c:	f240 7041 	movw	r0, #1857	@ 0x741
 8009880:	f001 fe7e 	bl	800b580 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8009884:	e009      	b.n	800989a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8009886:	2114      	movs	r1, #20
 8009888:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800988c:	f001 fe78 	bl	800b580 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8009890:	2124      	movs	r1, #36	@ 0x24
 8009892:	f240 7041 	movw	r0, #1857	@ 0x741
 8009896:	f001 fe73 	bl	800b580 <SUBGRF_WriteRegister>
}
 800989a:	bf00      	nop
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20008580 	.word	0x20008580

080098a8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80098ac:	f001 ffb8 	bl	800b820 <SUBGRF_GetRadioWakeUpTime>
 80098b0:	4603      	mov	r3, r0
 80098b2:	3303      	adds	r3, #3
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80098c0:	f000 f80e 	bl	80098e0 <RadioOnTxTimeoutProcess>
}
 80098c4:	bf00      	nop
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80098d4:	f000 f818 	bl	8009908 <RadioOnRxTimeoutProcess>
}
 80098d8:	bf00      	nop
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80098e4:	4b07      	ldr	r3, [pc, #28]	@ (8009904 <RadioOnTxTimeoutProcess+0x24>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d008      	beq.n	80098fe <RadioOnTxTimeoutProcess+0x1e>
 80098ec:	4b05      	ldr	r3, [pc, #20]	@ (8009904 <RadioOnTxTimeoutProcess+0x24>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80098f6:	4b03      	ldr	r3, [pc, #12]	@ (8009904 <RadioOnTxTimeoutProcess+0x24>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	4798      	blx	r3
    }
}
 80098fe:	bf00      	nop
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	2000857c 	.word	0x2000857c

08009908 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800990c:	4b07      	ldr	r3, [pc, #28]	@ (800992c <RadioOnRxTimeoutProcess+0x24>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d008      	beq.n	8009926 <RadioOnRxTimeoutProcess+0x1e>
 8009914:	4b05      	ldr	r3, [pc, #20]	@ (800992c <RadioOnRxTimeoutProcess+0x24>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800991e:	4b03      	ldr	r3, [pc, #12]	@ (800992c <RadioOnRxTimeoutProcess+0x24>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	4798      	blx	r3
    }
}
 8009926:	bf00      	nop
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	2000857c 	.word	0x2000857c

08009930 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	4603      	mov	r3, r0
 8009938:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800993a:	4a05      	ldr	r2, [pc, #20]	@ (8009950 <RadioOnDioIrq+0x20>)
 800993c:	88fb      	ldrh	r3, [r7, #6]
 800993e:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8009942:	f000 f807 	bl	8009954 <RadioIrqProcess>
}
 8009946:	bf00      	nop
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	20008580 	.word	0x20008580

08009954 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009954:	b5b0      	push	{r4, r5, r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800995e:	2300      	movs	r3, #0
 8009960:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8009962:	4ba8      	ldr	r3, [pc, #672]	@ (8009c04 <RadioIrqProcess+0x2b0>)
 8009964:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800996c:	f000 810d 	beq.w	8009b8a <RadioIrqProcess+0x236>
 8009970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009974:	f300 81e8 	bgt.w	8009d48 <RadioIrqProcess+0x3f4>
 8009978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800997c:	f000 80f1 	beq.w	8009b62 <RadioIrqProcess+0x20e>
 8009980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009984:	f300 81e0 	bgt.w	8009d48 <RadioIrqProcess+0x3f4>
 8009988:	2b80      	cmp	r3, #128	@ 0x80
 800998a:	f000 80d6 	beq.w	8009b3a <RadioIrqProcess+0x1e6>
 800998e:	2b80      	cmp	r3, #128	@ 0x80
 8009990:	f300 81da 	bgt.w	8009d48 <RadioIrqProcess+0x3f4>
 8009994:	2b20      	cmp	r3, #32
 8009996:	dc49      	bgt.n	8009a2c <RadioIrqProcess+0xd8>
 8009998:	2b00      	cmp	r3, #0
 800999a:	f340 81d5 	ble.w	8009d48 <RadioIrqProcess+0x3f4>
 800999e:	3b01      	subs	r3, #1
 80099a0:	2b1f      	cmp	r3, #31
 80099a2:	f200 81d1 	bhi.w	8009d48 <RadioIrqProcess+0x3f4>
 80099a6:	a201      	add	r2, pc, #4	@ (adr r2, 80099ac <RadioIrqProcess+0x58>)
 80099a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ac:	08009a35 	.word	0x08009a35
 80099b0:	08009a6f 	.word	0x08009a6f
 80099b4:	08009d49 	.word	0x08009d49
 80099b8:	08009c25 	.word	0x08009c25
 80099bc:	08009d49 	.word	0x08009d49
 80099c0:	08009d49 	.word	0x08009d49
 80099c4:	08009d49 	.word	0x08009d49
 80099c8:	08009ca1 	.word	0x08009ca1
 80099cc:	08009d49 	.word	0x08009d49
 80099d0:	08009d49 	.word	0x08009d49
 80099d4:	08009d49 	.word	0x08009d49
 80099d8:	08009d49 	.word	0x08009d49
 80099dc:	08009d49 	.word	0x08009d49
 80099e0:	08009d49 	.word	0x08009d49
 80099e4:	08009d49 	.word	0x08009d49
 80099e8:	08009cbd 	.word	0x08009cbd
 80099ec:	08009d49 	.word	0x08009d49
 80099f0:	08009d49 	.word	0x08009d49
 80099f4:	08009d49 	.word	0x08009d49
 80099f8:	08009d49 	.word	0x08009d49
 80099fc:	08009d49 	.word	0x08009d49
 8009a00:	08009d49 	.word	0x08009d49
 8009a04:	08009d49 	.word	0x08009d49
 8009a08:	08009d49 	.word	0x08009d49
 8009a0c:	08009d49 	.word	0x08009d49
 8009a10:	08009d49 	.word	0x08009d49
 8009a14:	08009d49 	.word	0x08009d49
 8009a18:	08009d49 	.word	0x08009d49
 8009a1c:	08009d49 	.word	0x08009d49
 8009a20:	08009d49 	.word	0x08009d49
 8009a24:	08009d49 	.word	0x08009d49
 8009a28:	08009ccb 	.word	0x08009ccb
 8009a2c:	2b40      	cmp	r3, #64	@ 0x40
 8009a2e:	f000 816d 	beq.w	8009d0c <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8009a32:	e189      	b.n	8009d48 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8009a34:	4874      	ldr	r0, [pc, #464]	@ (8009c08 <RadioIrqProcess+0x2b4>)
 8009a36:	f003 fdf1 	bl	800d61c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	f001 f81c 	bl	800aa78 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8009a40:	f002 f892 	bl	800bb68 <RFW_Is_LongPacketModeEnabled>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d101      	bne.n	8009a4e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8009a4a:	f002 f8b6 	bl	800bbba <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009a4e:	4b6f      	ldr	r3, [pc, #444]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f000 817a 	beq.w	8009d4c <RadioIrqProcess+0x3f8>
 8009a58:	4b6c      	ldr	r3, [pc, #432]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 8174 	beq.w	8009d4c <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8009a64:	4b69      	ldr	r3, [pc, #420]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4798      	blx	r3
        break;
 8009a6c:	e16e      	b.n	8009d4c <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8009a6e:	4868      	ldr	r0, [pc, #416]	@ (8009c10 <RadioIrqProcess+0x2bc>)
 8009a70:	f003 fdd4 	bl	800d61c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009a74:	4b63      	ldr	r3, [pc, #396]	@ (8009c04 <RadioIrqProcess+0x2b0>)
 8009a76:	785b      	ldrb	r3, [r3, #1]
 8009a78:	f083 0301 	eor.w	r3, r3, #1
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d014      	beq.n	8009aac <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8009a82:	2000      	movs	r0, #0
 8009a84:	f000 fff8 	bl	800aa78 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8009a88:	2100      	movs	r1, #0
 8009a8a:	f640 1002 	movw	r0, #2306	@ 0x902
 8009a8e:	f001 fd77 	bl	800b580 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8009a92:	f640 1044 	movw	r0, #2372	@ 0x944
 8009a96:	f001 fd87 	bl	800b5a8 <SUBGRF_ReadRegister>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f043 0302 	orr.w	r3, r3, #2
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	f640 1044 	movw	r0, #2372	@ 0x944
 8009aa8:	f001 fd6a 	bl	800b580 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8009aac:	1dfb      	adds	r3, r7, #7
 8009aae:	22ff      	movs	r2, #255	@ 0xff
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	4858      	ldr	r0, [pc, #352]	@ (8009c14 <RadioIrqProcess+0x2c0>)
 8009ab4:	f000 feb0 	bl	800a818 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8009ab8:	4857      	ldr	r0, [pc, #348]	@ (8009c18 <RadioIrqProcess+0x2c4>)
 8009aba:	f001 fd0f 	bl	800b4dc <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009abe:	4b53      	ldr	r3, [pc, #332]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 8144 	beq.w	8009d50 <RadioIrqProcess+0x3fc>
 8009ac8:	4b50      	ldr	r3, [pc, #320]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f000 813e 	beq.w	8009d50 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8009ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8009c04 <RadioIrqProcess+0x2b0>)
 8009ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d10e      	bne.n	8009afc <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8009ade:	4b4b      	ldr	r3, [pc, #300]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	689c      	ldr	r4, [r3, #8]
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4b46      	ldr	r3, [pc, #280]	@ (8009c04 <RadioIrqProcess+0x2b0>)
 8009aea:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8009aee:	461a      	mov	r2, r3
 8009af0:	4b44      	ldr	r3, [pc, #272]	@ (8009c04 <RadioIrqProcess+0x2b0>)
 8009af2:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8009af6:	4847      	ldr	r0, [pc, #284]	@ (8009c14 <RadioIrqProcess+0x2c0>)
 8009af8:	47a0      	blx	r4
                break;
 8009afa:	e01d      	b.n	8009b38 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8009afc:	4b41      	ldr	r3, [pc, #260]	@ (8009c04 <RadioIrqProcess+0x2b0>)
 8009afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b00:	463a      	mov	r2, r7
 8009b02:	4611      	mov	r1, r2
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 ff7d 	bl	800ba04 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8009b0a:	4b40      	ldr	r3, [pc, #256]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689c      	ldr	r4, [r3, #8]
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	4619      	mov	r1, r3
 8009b14:	4b3b      	ldr	r3, [pc, #236]	@ (8009c04 <RadioIrqProcess+0x2b0>)
 8009b16:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009b22:	4a3e      	ldr	r2, [pc, #248]	@ (8009c1c <RadioIrqProcess+0x2c8>)
 8009b24:	fb82 5203 	smull	r5, r2, r2, r3
 8009b28:	1192      	asrs	r2, r2, #6
 8009b2a:	17db      	asrs	r3, r3, #31
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	b25b      	sxtb	r3, r3
 8009b30:	4602      	mov	r2, r0
 8009b32:	4838      	ldr	r0, [pc, #224]	@ (8009c14 <RadioIrqProcess+0x2c0>)
 8009b34:	47a0      	blx	r4
                break;
 8009b36:	bf00      	nop
        break;
 8009b38:	e10a      	b.n	8009d50 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	f000 ff9c 	bl	800aa78 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009b40:	4b32      	ldr	r3, [pc, #200]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 8105 	beq.w	8009d54 <RadioIrqProcess+0x400>
 8009b4a:	4b30      	ldr	r3, [pc, #192]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 80ff 	beq.w	8009d54 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8009b56:	4b2d      	ldr	r3, [pc, #180]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	4798      	blx	r3
        break;
 8009b60:	e0f8      	b.n	8009d54 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8009b62:	2000      	movs	r0, #0
 8009b64:	f000 ff88 	bl	800aa78 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009b68:	4b28      	ldr	r3, [pc, #160]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 80f3 	beq.w	8009d58 <RadioIrqProcess+0x404>
 8009b72:	4b26      	ldr	r3, [pc, #152]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 80ed 	beq.w	8009d58 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8009b7e:	4b23      	ldr	r3, [pc, #140]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	2001      	movs	r0, #1
 8009b86:	4798      	blx	r3
        break;
 8009b88:	e0e6      	b.n	8009d58 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8009b8a:	4b25      	ldr	r3, [pc, #148]	@ (8009c20 <RadioIrqProcess+0x2cc>)
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	2100      	movs	r1, #0
 8009b90:	2002      	movs	r0, #2
 8009b92:	f003 ff3b 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8009b96:	f000 fe25 	bl	800a7e4 <SUBGRF_GetOperatingMode>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b04      	cmp	r3, #4
 8009b9e:	d115      	bne.n	8009bcc <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8009ba0:	4819      	ldr	r0, [pc, #100]	@ (8009c08 <RadioIrqProcess+0x2b4>)
 8009ba2:	f003 fd3b 	bl	800d61c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	f000 ff66 	bl	800aa78 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009bac:	4b17      	ldr	r3, [pc, #92]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 80d3 	beq.w	8009d5c <RadioIrqProcess+0x408>
 8009bb6:	4b15      	ldr	r3, [pc, #84]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 80cd 	beq.w	8009d5c <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8009bc2:	4b12      	ldr	r3, [pc, #72]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	4798      	blx	r3
        break;
 8009bca:	e0c7      	b.n	8009d5c <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8009bcc:	f000 fe0a 	bl	800a7e4 <SUBGRF_GetOperatingMode>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b05      	cmp	r3, #5
 8009bd4:	f040 80c2 	bne.w	8009d5c <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8009bd8:	480d      	ldr	r0, [pc, #52]	@ (8009c10 <RadioIrqProcess+0x2bc>)
 8009bda:	f003 fd1f 	bl	800d61c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009bde:	2000      	movs	r0, #0
 8009be0:	f000 ff4a 	bl	800aa78 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009be4:	4b09      	ldr	r3, [pc, #36]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 80b7 	beq.w	8009d5c <RadioIrqProcess+0x408>
 8009bee:	4b07      	ldr	r3, [pc, #28]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 80b1 	beq.w	8009d5c <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8009bfa:	4b04      	ldr	r3, [pc, #16]	@ (8009c0c <RadioIrqProcess+0x2b8>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	4798      	blx	r3
        break;
 8009c02:	e0ab      	b.n	8009d5c <RadioIrqProcess+0x408>
 8009c04:	20008580 	.word	0x20008580
 8009c08:	200085dc 	.word	0x200085dc
 8009c0c:	2000857c 	.word	0x2000857c
 8009c10:	200085f4 	.word	0x200085f4
 8009c14:	2000847c 	.word	0x2000847c
 8009c18:	200085a4 	.word	0x200085a4
 8009c1c:	10624dd3 	.word	0x10624dd3
 8009c20:	08010a68 	.word	0x08010a68
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8009c24:	4b54      	ldr	r3, [pc, #336]	@ (8009d78 <RadioIrqProcess+0x424>)
 8009c26:	2201      	movs	r2, #1
 8009c28:	2100      	movs	r1, #0
 8009c2a:	2002      	movs	r0, #2
 8009c2c:	f003 feee 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009c30:	4b52      	ldr	r3, [pc, #328]	@ (8009d7c <RadioIrqProcess+0x428>)
 8009c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 8093 	beq.w	8009d60 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8009c3a:	4a51      	ldr	r2, [pc, #324]	@ (8009d80 <RadioIrqProcess+0x42c>)
 8009c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8009d7c <RadioIrqProcess+0x428>)
 8009c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c40:	0c1b      	lsrs	r3, r3, #16
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	4619      	mov	r1, r3
 8009c46:	f640 1003 	movw	r0, #2307	@ 0x903
 8009c4a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8009c4c:	4a4c      	ldr	r2, [pc, #304]	@ (8009d80 <RadioIrqProcess+0x42c>)
 8009c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8009d7c <RadioIrqProcess+0x428>)
 8009c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c52:	0a1b      	lsrs	r3, r3, #8
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	4619      	mov	r1, r3
 8009c58:	f640 1004 	movw	r0, #2308	@ 0x904
 8009c5c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8009c5e:	4a48      	ldr	r2, [pc, #288]	@ (8009d80 <RadioIrqProcess+0x42c>)
 8009c60:	4b46      	ldr	r3, [pc, #280]	@ (8009d7c <RadioIrqProcess+0x428>)
 8009c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	4619      	mov	r1, r3
 8009c68:	f640 1005 	movw	r0, #2309	@ 0x905
 8009c6c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009c6e:	4c44      	ldr	r4, [pc, #272]	@ (8009d80 <RadioIrqProcess+0x42c>)
 8009c70:	4b44      	ldr	r3, [pc, #272]	@ (8009d84 <RadioIrqProcess+0x430>)
 8009c72:	f640 1002 	movw	r0, #2306	@ 0x902
 8009c76:	4798      	blx	r3
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f043 0301 	orr.w	r3, r3, #1
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	4619      	mov	r1, r3
 8009c82:	f640 1002 	movw	r0, #2306	@ 0x902
 8009c86:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8009c88:	4b3c      	ldr	r3, [pc, #240]	@ (8009d7c <RadioIrqProcess+0x428>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009c8e:	2300      	movs	r3, #0
 8009c90:	2200      	movs	r2, #0
 8009c92:	f240 2162 	movw	r1, #610	@ 0x262
 8009c96:	f240 2062 	movw	r0, #610	@ 0x262
 8009c9a:	f001 f8c1 	bl	800ae20 <SUBGRF_SetDioIrqParams>
        break;
 8009c9e:	e05f      	b.n	8009d60 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8009ca0:	4b39      	ldr	r3, [pc, #228]	@ (8009d88 <RadioIrqProcess+0x434>)
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	2002      	movs	r0, #2
 8009ca8:	f003 feb0 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8009cac:	f001 ff55 	bl	800bb5a <RFW_Is_Init>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d156      	bne.n	8009d64 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8009cb6:	f001 ff86 	bl	800bbc6 <RFW_ReceivePayload>
        break;
 8009cba:	e053      	b.n	8009d64 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8009cbc:	4b33      	ldr	r3, [pc, #204]	@ (8009d8c <RadioIrqProcess+0x438>)
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	2002      	movs	r0, #2
 8009cc4:	f003 fea2 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8009cc8:	e051      	b.n	8009d6e <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8009cca:	4831      	ldr	r0, [pc, #196]	@ (8009d90 <RadioIrqProcess+0x43c>)
 8009ccc:	f003 fca6 	bl	800d61c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8009d7c <RadioIrqProcess+0x428>)
 8009cd2:	785b      	ldrb	r3, [r3, #1]
 8009cd4:	f083 0301 	eor.w	r3, r3, #1
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8009cde:	2000      	movs	r0, #0
 8009ce0:	f000 feca 	bl	800aa78 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8009d94 <RadioIrqProcess+0x440>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d03d      	beq.n	8009d68 <RadioIrqProcess+0x414>
 8009cec:	4b29      	ldr	r3, [pc, #164]	@ (8009d94 <RadioIrqProcess+0x440>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d038      	beq.n	8009d68 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8009cf6:	4b27      	ldr	r3, [pc, #156]	@ (8009d94 <RadioIrqProcess+0x440>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8009cfe:	4b26      	ldr	r3, [pc, #152]	@ (8009d98 <RadioIrqProcess+0x444>)
 8009d00:	2201      	movs	r2, #1
 8009d02:	2100      	movs	r1, #0
 8009d04:	2002      	movs	r0, #2
 8009d06:	f003 fe81 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8009d0a:	e02d      	b.n	8009d68 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8009d0c:	4b23      	ldr	r3, [pc, #140]	@ (8009d9c <RadioIrqProcess+0x448>)
 8009d0e:	2201      	movs	r2, #1
 8009d10:	2100      	movs	r1, #0
 8009d12:	2002      	movs	r0, #2
 8009d14:	f003 fe7a 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8009d18:	4b18      	ldr	r3, [pc, #96]	@ (8009d7c <RadioIrqProcess+0x428>)
 8009d1a:	785b      	ldrb	r3, [r3, #1]
 8009d1c:	f083 0301 	eor.w	r3, r3, #1
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8009d26:	2000      	movs	r0, #0
 8009d28:	f000 fea6 	bl	800aa78 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8009d2c:	4b19      	ldr	r3, [pc, #100]	@ (8009d94 <RadioIrqProcess+0x440>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d01b      	beq.n	8009d6c <RadioIrqProcess+0x418>
 8009d34:	4b17      	ldr	r3, [pc, #92]	@ (8009d94 <RadioIrqProcess+0x440>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d016      	beq.n	8009d6c <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8009d3e:	4b15      	ldr	r3, [pc, #84]	@ (8009d94 <RadioIrqProcess+0x440>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	4798      	blx	r3
        break;
 8009d46:	e011      	b.n	8009d6c <RadioIrqProcess+0x418>
        break;
 8009d48:	bf00      	nop
 8009d4a:	e010      	b.n	8009d6e <RadioIrqProcess+0x41a>
        break;
 8009d4c:	bf00      	nop
 8009d4e:	e00e      	b.n	8009d6e <RadioIrqProcess+0x41a>
        break;
 8009d50:	bf00      	nop
 8009d52:	e00c      	b.n	8009d6e <RadioIrqProcess+0x41a>
        break;
 8009d54:	bf00      	nop
 8009d56:	e00a      	b.n	8009d6e <RadioIrqProcess+0x41a>
        break;
 8009d58:	bf00      	nop
 8009d5a:	e008      	b.n	8009d6e <RadioIrqProcess+0x41a>
        break;
 8009d5c:	bf00      	nop
 8009d5e:	e006      	b.n	8009d6e <RadioIrqProcess+0x41a>
        break;
 8009d60:	bf00      	nop
 8009d62:	e004      	b.n	8009d6e <RadioIrqProcess+0x41a>
        break;
 8009d64:	bf00      	nop
 8009d66:	e002      	b.n	8009d6e <RadioIrqProcess+0x41a>
        break;
 8009d68:	bf00      	nop
 8009d6a:	e000      	b.n	8009d6e <RadioIrqProcess+0x41a>
        break;
 8009d6c:	bf00      	nop
    }
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bdb0      	pop	{r4, r5, r7, pc}
 8009d76:	bf00      	nop
 8009d78:	08010a7c 	.word	0x08010a7c
 8009d7c:	20008580 	.word	0x20008580
 8009d80:	08009765 	.word	0x08009765
 8009d84:	08009789 	.word	0x08009789
 8009d88:	08010a88 	.word	0x08010a88
 8009d8c:	08010a94 	.word	0x08010a94
 8009d90:	200085f4 	.word	0x200085f4
 8009d94:	2000857c 	.word	0x2000857c
 8009d98:	08010aa0 	.word	0x08010aa0
 8009d9c:	08010aac 	.word	0x08010aac

08009da0 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009da4:	4b09      	ldr	r3, [pc, #36]	@ (8009dcc <RadioTxPrbs+0x2c>)
 8009da6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009daa:	2101      	movs	r1, #1
 8009dac:	4618      	mov	r0, r3
 8009dae:	f001 fcdb 	bl	800b768 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8009db2:	4b07      	ldr	r3, [pc, #28]	@ (8009dd0 <RadioTxPrbs+0x30>)
 8009db4:	212d      	movs	r1, #45	@ 0x2d
 8009db6:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009dba:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8009dbc:	f000 ff1f 	bl	800abfe <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8009dc0:	4804      	ldr	r0, [pc, #16]	@ (8009dd4 <RadioTxPrbs+0x34>)
 8009dc2:	f000 fe75 	bl	800aab0 <SUBGRF_SetTx>
}
 8009dc6:	bf00      	nop
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20008580 	.word	0x20008580
 8009dd0:	08009765 	.word	0x08009765
 8009dd4:	000fffff 	.word	0x000fffff

08009dd8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8009de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f001 fce6 	bl	800b7b8 <SUBGRF_SetRfTxPower>
 8009dec:	4603      	mov	r3, r0
 8009dee:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009df0:	210e      	movs	r1, #14
 8009df2:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009df6:	f001 fbc3 	bl	800b580 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f001 fcb2 	bl	800b768 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8009e04:	f000 fef2 	bl	800abec <SUBGRF_SetTxContinuousWave>
}
 8009e08:	bf00      	nop
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8009e10:	b480      	push	{r7}
 8009e12:	b089      	sub	sp, #36	@ 0x24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8009e22:	2300      	movs	r3, #0
 8009e24:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8009e26:	2300      	movs	r3, #0
 8009e28:	61bb      	str	r3, [r7, #24]
 8009e2a:	e011      	b.n	8009e50 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	4413      	add	r3, r2
 8009e32:	781a      	ldrb	r2, [r3, #0]
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	68b9      	ldr	r1, [r7, #8]
 8009e38:	440b      	add	r3, r1
 8009e3a:	43d2      	mvns	r2, r2
 8009e3c:	b2d2      	uxtb	r2, r2
 8009e3e:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	4413      	add	r3, r2
 8009e46:	2200      	movs	r2, #0
 8009e48:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	61bb      	str	r3, [r7, #24]
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	dbe9      	blt.n	8009e2c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8009e58:	2300      	movs	r3, #0
 8009e5a:	61bb      	str	r3, [r7, #24]
 8009e5c:	e049      	b.n	8009ef2 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	425a      	negs	r2, r3
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	f002 0207 	and.w	r2, r2, #7
 8009e6a:	bf58      	it	pl
 8009e6c:	4253      	negpl	r3, r2
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	f1c3 0307 	rsb	r3, r3, #7
 8009e74:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	da00      	bge.n	8009e7e <payload_integration+0x6e>
 8009e7c:	3307      	adds	r3, #7
 8009e7e:	10db      	asrs	r3, r3, #3
 8009e80:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	3301      	adds	r3, #1
 8009e86:	425a      	negs	r2, r3
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	f002 0207 	and.w	r2, r2, #7
 8009e90:	bf58      	it	pl
 8009e92:	4253      	negpl	r3, r2
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	f1c3 0307 	rsb	r3, r3, #7
 8009e9a:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	da00      	bge.n	8009ea6 <payload_integration+0x96>
 8009ea4:	3307      	adds	r3, #7
 8009ea6:	10db      	asrs	r3, r3, #3
 8009ea8:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009eaa:	7dbb      	ldrb	r3, [r7, #22]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	4413      	add	r3, r2
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	fa42 f303 	asr.w	r3, r2, r3
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	f003 0301 	and.w	r3, r3, #1
 8009ec0:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8009ec2:	7ffa      	ldrb	r2, [r7, #31]
 8009ec4:	7cfb      	ldrb	r3, [r7, #19]
 8009ec6:	4053      	eors	r3, r2
 8009ec8:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009eca:	7d3b      	ldrb	r3, [r7, #20]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	4413      	add	r3, r2
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	b25a      	sxtb	r2, r3
 8009ed4:	7ff9      	ldrb	r1, [r7, #31]
 8009ed6:	7d7b      	ldrb	r3, [r7, #21]
 8009ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8009edc:	b25b      	sxtb	r3, r3
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	b259      	sxtb	r1, r3
 8009ee2:	7d3b      	ldrb	r3, [r7, #20]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	b2ca      	uxtb	r2, r1
 8009eea:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	79fb      	ldrb	r3, [r7, #7]
 8009ef4:	00db      	lsls	r3, r3, #3
 8009ef6:	69ba      	ldr	r2, [r7, #24]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	dbb0      	blt.n	8009e5e <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8009efc:	7ffb      	ldrb	r3, [r7, #31]
 8009efe:	01db      	lsls	r3, r3, #7
 8009f00:	b25a      	sxtb	r2, r3
 8009f02:	7ffb      	ldrb	r3, [r7, #31]
 8009f04:	019b      	lsls	r3, r3, #6
 8009f06:	b25b      	sxtb	r3, r3
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	b25b      	sxtb	r3, r3
 8009f0c:	7ffa      	ldrb	r2, [r7, #31]
 8009f0e:	2a00      	cmp	r2, #0
 8009f10:	d101      	bne.n	8009f16 <payload_integration+0x106>
 8009f12:	2220      	movs	r2, #32
 8009f14:	e000      	b.n	8009f18 <payload_integration+0x108>
 8009f16:	2200      	movs	r2, #0
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	b259      	sxtb	r1, r3
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	4413      	add	r3, r2
 8009f22:	b2ca      	uxtb	r2, r1
 8009f24:	701a      	strb	r2, [r3, #0]
}
 8009f26:	bf00      	nop
 8009f28:	3724      	adds	r7, #36	@ 0x24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bc80      	pop	{r7}
 8009f2e:	4770      	bx	lr

08009f30 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b08c      	sub	sp, #48	@ 0x30
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60b9      	str	r1, [r7, #8]
 8009f38:	607a      	str	r2, [r7, #4]
 8009f3a:	603b      	str	r3, [r7, #0]
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8009f44:	2300      	movs	r3, #0
 8009f46:	623b      	str	r3, [r7, #32]
 8009f48:	2300      	movs	r3, #0
 8009f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009f4c:	f001 fdff 	bl	800bb4e <RFW_DeInit>

    if( rxContinuous != 0 )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8009f56:	2300      	movs	r3, #0
 8009f58:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	bf14      	ite	ne
 8009f60:	2301      	movne	r3, #1
 8009f62:	2300      	moveq	r3, #0
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	4ba3      	ldr	r3, [pc, #652]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 8009f68:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <RadioSetRxGenericConfig+0x48>
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	f000 80dc 	beq.w	800a12e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8009f76:	e194      	b.n	800a2a2 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <RadioSetRxGenericConfig+0x58>
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d102      	bne.n	8009f8e <RadioSetRxGenericConfig+0x5e>
            return -1;
 8009f88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f8c:	e18a      	b.n	800a2a4 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	7f9b      	ldrb	r3, [r3, #30]
 8009f92:	2b08      	cmp	r3, #8
 8009f94:	d902      	bls.n	8009f9c <RadioSetRxGenericConfig+0x6c>
            return -1;
 8009f96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f9a:	e183      	b.n	800a2a4 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	6919      	ldr	r1, [r3, #16]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	7f9b      	ldrb	r3, [r3, #30]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	f107 0320 	add.w	r3, r7, #32
 8009faa:	4618      	mov	r0, r3
 8009fac:	f002 fde2 	bl	800cb74 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	bf14      	ite	ne
 8009fb8:	2301      	movne	r3, #1
 8009fba:	2300      	moveq	r3, #0
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 fe26 	bl	800ac10 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009fc4:	4b8b      	ldr	r3, [pc, #556]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	4a88      	ldr	r2, [pc, #544]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 8009fd2:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009fda:	4b86      	ldr	r3, [pc, #536]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 8009fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 fce5 	bl	800b9b4 <SUBGRF_GetFskBandwidthRegValue>
 8009fea:	4603      	mov	r3, r0
 8009fec:	461a      	mov	r2, r3
 8009fee:	4b81      	ldr	r3, [pc, #516]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 8009ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009ff4:	4b7f      	ldr	r3, [pc, #508]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	b29a      	uxth	r2, r3
 800a004:	4b7b      	ldr	r3, [pc, #492]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a006:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	7fda      	ldrb	r2, [r3, #31]
 800a00c:	4b79      	ldr	r3, [pc, #484]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a00e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	7f9b      	ldrb	r3, [r3, #30]
 800a014:	00db      	lsls	r3, r3, #3
 800a016:	b2da      	uxtb	r2, r3
 800a018:	4b76      	ldr	r3, [pc, #472]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a01a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800a022:	4b74      	ldr	r3, [pc, #464]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a024:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d105      	bne.n	800a03c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	695b      	ldr	r3, [r3, #20]
 800a034:	b2da      	uxtb	r2, r3
 800a036:	4b6f      	ldr	r3, [pc, #444]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a038:	759a      	strb	r2, [r3, #22]
 800a03a:	e00b      	b.n	800a054 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a042:	2b02      	cmp	r3, #2
 800a044:	d103      	bne.n	800a04e <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a046:	4b6b      	ldr	r3, [pc, #428]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a048:	22ff      	movs	r2, #255	@ 0xff
 800a04a:	759a      	strb	r2, [r3, #22]
 800a04c:	e002      	b.n	800a054 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a04e:	4b69      	ldr	r3, [pc, #420]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a050:	22ff      	movs	r2, #255	@ 0xff
 800a052:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d004      	beq.n	800a068 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a064:	2b02      	cmp	r3, #2
 800a066:	d12d      	bne.n	800a0c4 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a06e:	2bf1      	cmp	r3, #241	@ 0xf1
 800a070:	d00c      	beq.n	800a08c <RadioSetRxGenericConfig+0x15c>
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a078:	2bf2      	cmp	r3, #242	@ 0xf2
 800a07a:	d007      	beq.n	800a08c <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a082:	2b01      	cmp	r3, #1
 800a084:	d002      	beq.n	800a08c <RadioSetRxGenericConfig+0x15c>
                return -1;
 800a086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a08a:	e10b      	b.n	800a2a4 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 800a08c:	2300      	movs	r3, #0
 800a08e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800a094:	4b58      	ldr	r3, [pc, #352]	@ (800a1f8 <RadioSetRxGenericConfig+0x2c8>)
 800a096:	6819      	ldr	r1, [r3, #0]
 800a098:	f107 0314 	add.w	r3, r7, #20
 800a09c:	4a57      	ldr	r2, [pc, #348]	@ (800a1fc <RadioSetRxGenericConfig+0x2cc>)
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f001 fd48 	bl	800bb34 <RFW_Init>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d002      	beq.n	800a0b0 <RadioSetRxGenericConfig+0x180>
                return -1;
 800a0aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0ae:	e0f9      	b.n	800a2a4 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a0b0:	4b50      	ldr	r3, [pc, #320]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a0b6:	4b4f      	ldr	r3, [pc, #316]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a0bc:	4b4d      	ldr	r3, [pc, #308]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a0be:	2200      	movs	r2, #0
 800a0c0:	755a      	strb	r2, [r3, #21]
        {
 800a0c2:	e00e      	b.n	800a0e2 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800a0ca:	4b4a      	ldr	r3, [pc, #296]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a0cc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800a0d4:	4b47      	ldr	r3, [pc, #284]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a0d6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800a0de:	4b45      	ldr	r3, [pc, #276]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a0e0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800a0e2:	f7ff fa3e 	bl	8009562 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	f7fe fbd2 	bl	8008890 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a0ec:	4844      	ldr	r0, [pc, #272]	@ (800a200 <RadioSetRxGenericConfig+0x2d0>)
 800a0ee:	f001 f82d 	bl	800b14c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a0f2:	4844      	ldr	r0, [pc, #272]	@ (800a204 <RadioSetRxGenericConfig+0x2d4>)
 800a0f4:	f001 f8fc 	bl	800b2f0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a0f8:	f107 0320 	add.w	r3, r7, #32
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 fbc0 	bl	800a882 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	8b9b      	ldrh	r3, [r3, #28]
 800a106:	4618      	mov	r0, r3
 800a108:	f000 fc0a 	bl	800a920 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	8b1b      	ldrh	r3, [r3, #24]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 fbe5 	bl	800a8e0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800a11c:	fb03 f202 	mul.w	r2, r3, r2
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	fbb2 f3f3 	udiv	r3, r2, r3
 800a128:	4a32      	ldr	r2, [pc, #200]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a12a:	6093      	str	r3, [r2, #8]
        break;
 800a12c:	e0b9      	b.n	800a2a2 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800a132:	2b00      	cmp	r3, #0
 800a134:	d102      	bne.n	800a13c <RadioSetRxGenericConfig+0x20c>
            return -1;
 800a136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a13a:	e0b3      	b.n	800a2a4 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a142:	2b01      	cmp	r3, #1
 800a144:	d104      	bne.n	800a150 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a14e:	e002      	b.n	800a156 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800a150:	23ff      	movs	r3, #255	@ 0xff
 800a152:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	bf14      	ite	ne
 800a15e:	2301      	movne	r3, #1
 800a160:	2300      	moveq	r3, #0
 800a162:	b2db      	uxtb	r3, r3
 800a164:	4618      	mov	r0, r3
 800a166:	f000 fd53 	bl	800ac10 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	4618      	mov	r0, r3
 800a170:	f000 fd5d 	bl	800ac2e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a174:	4b1f      	ldr	r3, [pc, #124]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800a182:	4b1c      	ldr	r3, [pc, #112]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a184:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800a18e:	4b19      	ldr	r3, [pc, #100]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800a19a:	4b16      	ldr	r3, [pc, #88]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a19c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d010      	beq.n	800a1cc <RadioSetRxGenericConfig+0x29c>
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	dc2c      	bgt.n	800a208 <RadioSetRxGenericConfig+0x2d8>
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <RadioSetRxGenericConfig+0x288>
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d005      	beq.n	800a1c2 <RadioSetRxGenericConfig+0x292>
            break;
 800a1b6:	e027      	b.n	800a208 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a1b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a1c0:	e023      	b.n	800a20a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a1c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a1ca:	e01e      	b.n	800a20a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a1d2:	2b0b      	cmp	r3, #11
 800a1d4:	d004      	beq.n	800a1e0 <RadioSetRxGenericConfig+0x2b0>
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a1dc:	2b0c      	cmp	r3, #12
 800a1de:	d104      	bne.n	800a1ea <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a1e0:	4b04      	ldr	r3, [pc, #16]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a1e8:	e00f      	b.n	800a20a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a1ea:	4b02      	ldr	r3, [pc, #8]	@ (800a1f4 <RadioSetRxGenericConfig+0x2c4>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a1f2:	e00a      	b.n	800a20a <RadioSetRxGenericConfig+0x2da>
 800a1f4:	20008580 	.word	0x20008580
 800a1f8:	2000857c 	.word	0x2000857c
 800a1fc:	200085f4 	.word	0x200085f4
 800a200:	200085b8 	.word	0x200085b8
 800a204:	2000858e 	.word	0x2000858e
            break;
 800a208:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a20a:	4b28      	ldr	r3, [pc, #160]	@ (800a2ac <RadioSetRxGenericConfig+0x37c>)
 800a20c:	2201      	movs	r2, #1
 800a20e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800a214:	4b25      	ldr	r3, [pc, #148]	@ (800a2ac <RadioSetRxGenericConfig+0x37c>)
 800a216:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800a21e:	4b23      	ldr	r3, [pc, #140]	@ (800a2ac <RadioSetRxGenericConfig+0x37c>)
 800a220:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800a222:	4a22      	ldr	r2, [pc, #136]	@ (800a2ac <RadioSetRxGenericConfig+0x37c>)
 800a224:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a228:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800a230:	4b1e      	ldr	r3, [pc, #120]	@ (800a2ac <RadioSetRxGenericConfig+0x37c>)
 800a232:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 800a23c:	4b1b      	ldr	r3, [pc, #108]	@ (800a2ac <RadioSetRxGenericConfig+0x37c>)
 800a23e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 800a242:	f7ff f98e 	bl	8009562 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800a246:	2001      	movs	r0, #1
 800a248:	f7fe fb22 	bl	8008890 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a24c:	4818      	ldr	r0, [pc, #96]	@ (800a2b0 <RadioSetRxGenericConfig+0x380>)
 800a24e:	f000 ff7d 	bl	800b14c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a252:	4818      	ldr	r0, [pc, #96]	@ (800a2b4 <RadioSetRxGenericConfig+0x384>)
 800a254:	f001 f84c 	bl	800b2f0 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800a258:	4b14      	ldr	r3, [pc, #80]	@ (800a2ac <RadioSetRxGenericConfig+0x37c>)
 800a25a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d10d      	bne.n	800a27e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800a262:	f240 7036 	movw	r0, #1846	@ 0x736
 800a266:	f001 f99f 	bl	800b5a8 <SUBGRF_ReadRegister>
 800a26a:	4603      	mov	r3, r0
 800a26c:	f023 0304 	bic.w	r3, r3, #4
 800a270:	b2db      	uxtb	r3, r3
 800a272:	4619      	mov	r1, r3
 800a274:	f240 7036 	movw	r0, #1846	@ 0x736
 800a278:	f001 f982 	bl	800b580 <SUBGRF_WriteRegister>
 800a27c:	e00c      	b.n	800a298 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800a27e:	f240 7036 	movw	r0, #1846	@ 0x736
 800a282:	f001 f991 	bl	800b5a8 <SUBGRF_ReadRegister>
 800a286:	4603      	mov	r3, r0
 800a288:	f043 0304 	orr.w	r3, r3, #4
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	4619      	mov	r1, r3
 800a290:	f240 7036 	movw	r0, #1846	@ 0x736
 800a294:	f001 f974 	bl	800b580 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800a298:	4b04      	ldr	r3, [pc, #16]	@ (800a2ac <RadioSetRxGenericConfig+0x37c>)
 800a29a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a29e:	609a      	str	r2, [r3, #8]
        break;
 800a2a0:	bf00      	nop
    }
    return status;
 800a2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3730      	adds	r7, #48	@ 0x30
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20008580 	.word	0x20008580
 800a2b0:	200085b8 	.word	0x200085b8
 800a2b4:	2000858e 	.word	0x2000858e

0800a2b8 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08e      	sub	sp, #56	@ 0x38
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60b9      	str	r1, [r7, #8]
 800a2c0:	607b      	str	r3, [r7, #4]
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	73fb      	strb	r3, [r7, #15]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a2d2:	f001 fc3c 	bl	800bb4e <RFW_DeInit>
    switch( modem )
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
 800a2d8:	2b03      	cmp	r3, #3
 800a2da:	f200 8204 	bhi.w	800a6e6 <RadioSetTxGenericConfig+0x42e>
 800a2de:	a201      	add	r2, pc, #4	@ (adr r2, 800a2e4 <RadioSetTxGenericConfig+0x2c>)
 800a2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e4:	0800a469 	.word	0x0800a469
 800a2e8:	0800a5b1 	.word	0x0800a5b1
 800a2ec:	0800a6a9 	.word	0x0800a6a9
 800a2f0:	0800a2f5 	.word	0x0800a2f5
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	7c9b      	ldrb	r3, [r3, #18]
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d902      	bls.n	800a302 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800a2fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a300:	e206      	b.n	800a710 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	6899      	ldr	r1, [r3, #8]
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	7c9b      	ldrb	r3, [r3, #18]
 800a30a:	461a      	mov	r2, r3
 800a30c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a310:	4618      	mov	r0, r3
 800a312:	f002 fc2f 	bl	800cb74 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d102      	bne.n	800a324 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800a31e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a322:	e1f5      	b.n	800a710 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d813      	bhi.n	800a358 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 800a330:	2302      	movs	r3, #2
 800a332:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800a336:	4b99      	ldr	r3, [pc, #612]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a338:	2203      	movs	r2, #3
 800a33a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800a33c:	4b97      	ldr	r3, [pc, #604]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a33e:	2203      	movs	r2, #3
 800a340:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a94      	ldr	r2, [pc, #592]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a34a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	7cda      	ldrb	r2, [r3, #19]
 800a350:	4b92      	ldr	r3, [pc, #584]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a352:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a356:	e017      	b.n	800a388 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800a358:	2300      	movs	r3, #0
 800a35a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a35e:	4b8f      	ldr	r3, [pc, #572]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a360:	2200      	movs	r2, #0
 800a362:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a364:	4b8d      	ldr	r3, [pc, #564]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a8a      	ldr	r2, [pc, #552]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a372:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	7cda      	ldrb	r2, [r3, #19]
 800a378:	4b88      	ldr	r3, [pc, #544]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a37a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	089b      	lsrs	r3, r3, #2
 800a384:	4a85      	ldr	r2, [pc, #532]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a386:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	00db      	lsls	r3, r3, #3
 800a390:	b29a      	uxth	r2, r3
 800a392:	4b82      	ldr	r3, [pc, #520]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a394:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a396:	4b81      	ldr	r3, [pc, #516]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a398:	2204      	movs	r2, #4
 800a39a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	7c9b      	ldrb	r3, [r3, #18]
 800a3a0:	00db      	lsls	r3, r3, #3
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	4b7d      	ldr	r3, [pc, #500]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a3a6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a3a8:	4b7c      	ldr	r3, [pc, #496]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	7d9b      	ldrb	r3, [r3, #22]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d003      	beq.n	800a3be <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	7d1b      	ldrb	r3, [r3, #20]
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d12b      	bne.n	800a416 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	7d5b      	ldrb	r3, [r3, #21]
 800a3c2:	2bf1      	cmp	r3, #241	@ 0xf1
 800a3c4:	d00a      	beq.n	800a3dc <RadioSetTxGenericConfig+0x124>
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	7d5b      	ldrb	r3, [r3, #21]
 800a3ca:	2bf2      	cmp	r3, #242	@ 0xf2
 800a3cc:	d006      	beq.n	800a3dc <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	7d5b      	ldrb	r3, [r3, #21]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d002      	beq.n	800a3dc <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800a3d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a3da:	e199      	b.n	800a710 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a3e6:	4b6e      	ldr	r3, [pc, #440]	@ (800a5a0 <RadioSetTxGenericConfig+0x2e8>)
 800a3e8:	6819      	ldr	r1, [r3, #0]
 800a3ea:	f107 0320 	add.w	r3, r7, #32
 800a3ee:	4a6d      	ldr	r2, [pc, #436]	@ (800a5a4 <RadioSetTxGenericConfig+0x2ec>)
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f001 fb9f 	bl	800bb34 <RFW_Init>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d002      	beq.n	800a402 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800a3fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a400:	e186      	b.n	800a710 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a402:	4b66      	ldr	r3, [pc, #408]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a404:	2200      	movs	r2, #0
 800a406:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a408:	4b64      	ldr	r3, [pc, #400]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a40a:	2201      	movs	r2, #1
 800a40c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a40e:	4b63      	ldr	r3, [pc, #396]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a410:	2200      	movs	r2, #0
 800a412:	755a      	strb	r2, [r3, #21]
        {
 800a414:	e00b      	b.n	800a42e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	7d5a      	ldrb	r2, [r3, #21]
 800a41a:	4b60      	ldr	r3, [pc, #384]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a41c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	7d9a      	ldrb	r2, [r3, #22]
 800a422:	4b5e      	ldr	r3, [pc, #376]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a424:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	7d1a      	ldrb	r2, [r3, #20]
 800a42a:	4b5c      	ldr	r3, [pc, #368]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a42c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a42e:	f7ff f898 	bl	8009562 <RadioStandby>
        RadioSetModem( radio_modem );
 800a432:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a436:	4618      	mov	r0, r3
 800a438:	f7fe fa2a 	bl	8008890 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a43c:	485a      	ldr	r0, [pc, #360]	@ (800a5a8 <RadioSetTxGenericConfig+0x2f0>)
 800a43e:	f000 fe85 	bl	800b14c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a442:	485a      	ldr	r0, [pc, #360]	@ (800a5ac <RadioSetTxGenericConfig+0x2f4>)
 800a444:	f000 ff54 	bl	800b2f0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a448:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fa18 	bl	800a882 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	8a1b      	ldrh	r3, [r3, #16]
 800a456:	4618      	mov	r0, r3
 800a458:	f000 fa62 	bl	800a920 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	899b      	ldrh	r3, [r3, #12]
 800a460:	4618      	mov	r0, r3
 800a462:	f000 fa3d 	bl	800a8e0 <SUBGRF_SetCrcPolynomial>
        break;
 800a466:	e13f      	b.n	800a6e8 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d102      	bne.n	800a476 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800a470:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a474:	e14c      	b.n	800a710 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	7c9b      	ldrb	r3, [r3, #18]
 800a47a:	2b08      	cmp	r3, #8
 800a47c:	d902      	bls.n	800a484 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800a47e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a482:	e145      	b.n	800a710 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	6899      	ldr	r1, [r3, #8]
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	7c9b      	ldrb	r3, [r3, #18]
 800a48c:	461a      	mov	r2, r3
 800a48e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a492:	4618      	mov	r0, r3
 800a494:	f002 fb6e 	bl	800cb74 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a498:	4b40      	ldr	r3, [pc, #256]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a3d      	ldr	r2, [pc, #244]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a4a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	7cda      	ldrb	r2, [r3, #19]
 800a4ac:	4b3b      	ldr	r3, [pc, #236]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a4ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	4a39      	ldr	r2, [pc, #228]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a4b8:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a4ba:	4b38      	ldr	r3, [pc, #224]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	00db      	lsls	r3, r3, #3
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	4b34      	ldr	r3, [pc, #208]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a4cc:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a4ce:	4b33      	ldr	r3, [pc, #204]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a4d0:	2204      	movs	r2, #4
 800a4d2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	7c9b      	ldrb	r3, [r3, #18]
 800a4d8:	00db      	lsls	r3, r3, #3
 800a4da:	b2da      	uxtb	r2, r3
 800a4dc:	4b2f      	ldr	r3, [pc, #188]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a4de:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a4e0:	4b2e      	ldr	r3, [pc, #184]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	7d9b      	ldrb	r3, [r3, #22]
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d003      	beq.n	800a4f6 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	7d1b      	ldrb	r3, [r3, #20]
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d12a      	bne.n	800a54c <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	7d5b      	ldrb	r3, [r3, #21]
 800a4fa:	2bf1      	cmp	r3, #241	@ 0xf1
 800a4fc:	d00a      	beq.n	800a514 <RadioSetTxGenericConfig+0x25c>
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	7d5b      	ldrb	r3, [r3, #21]
 800a502:	2bf2      	cmp	r3, #242	@ 0xf2
 800a504:	d006      	beq.n	800a514 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	7d5b      	ldrb	r3, [r3, #21]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d002      	beq.n	800a514 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800a50e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a512:	e0fd      	b.n	800a710 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800a514:	2301      	movs	r3, #1
 800a516:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a51c:	4b20      	ldr	r3, [pc, #128]	@ (800a5a0 <RadioSetTxGenericConfig+0x2e8>)
 800a51e:	6819      	ldr	r1, [r3, #0]
 800a520:	f107 0314 	add.w	r3, r7, #20
 800a524:	4a1f      	ldr	r2, [pc, #124]	@ (800a5a4 <RadioSetTxGenericConfig+0x2ec>)
 800a526:	4618      	mov	r0, r3
 800a528:	f001 fb04 	bl	800bb34 <RFW_Init>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800a532:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a536:	e0eb      	b.n	800a710 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a538:	4b18      	ldr	r3, [pc, #96]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a53e:	4b17      	ldr	r3, [pc, #92]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a540:	2201      	movs	r2, #1
 800a542:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a544:	4b15      	ldr	r3, [pc, #84]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a546:	2200      	movs	r2, #0
 800a548:	755a      	strb	r2, [r3, #21]
        {
 800a54a:	e00b      	b.n	800a564 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	7d5a      	ldrb	r2, [r3, #21]
 800a550:	4b12      	ldr	r3, [pc, #72]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a552:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	7d9a      	ldrb	r2, [r3, #22]
 800a558:	4b10      	ldr	r3, [pc, #64]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a55a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	7d1a      	ldrb	r2, [r3, #20]
 800a560:	4b0e      	ldr	r3, [pc, #56]	@ (800a59c <RadioSetTxGenericConfig+0x2e4>)
 800a562:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a564:	f7fe fffd 	bl	8009562 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800a568:	2000      	movs	r0, #0
 800a56a:	f7fe f991 	bl	8008890 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a56e:	480e      	ldr	r0, [pc, #56]	@ (800a5a8 <RadioSetTxGenericConfig+0x2f0>)
 800a570:	f000 fdec 	bl	800b14c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a574:	480d      	ldr	r0, [pc, #52]	@ (800a5ac <RadioSetTxGenericConfig+0x2f4>)
 800a576:	f000 febb 	bl	800b2f0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a57a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 f97f 	bl	800a882 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	8a1b      	ldrh	r3, [r3, #16]
 800a588:	4618      	mov	r0, r3
 800a58a:	f000 f9c9 	bl	800a920 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	899b      	ldrh	r3, [r3, #12]
 800a592:	4618      	mov	r0, r3
 800a594:	f000 f9a4 	bl	800a8e0 <SUBGRF_SetCrcPolynomial>
        break;
 800a598:	e0a6      	b.n	800a6e8 <RadioSetTxGenericConfig+0x430>
 800a59a:	bf00      	nop
 800a59c:	20008580 	.word	0x20008580
 800a5a0:	2000857c 	.word	0x2000857c
 800a5a4:	200085dc 	.word	0x200085dc
 800a5a8:	200085b8 	.word	0x200085b8
 800a5ac:	2000858e 	.word	0x2000858e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a5b0:	4b59      	ldr	r3, [pc, #356]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	781a      	ldrb	r2, [r3, #0]
 800a5bc:	4b56      	ldr	r3, [pc, #344]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a5be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	785a      	ldrb	r2, [r3, #1]
 800a5c6:	4b54      	ldr	r3, [pc, #336]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a5c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	789a      	ldrb	r2, [r3, #2]
 800a5d0:	4b51      	ldr	r3, [pc, #324]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a5d2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	78db      	ldrb	r3, [r3, #3]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d010      	beq.n	800a600 <RadioSetTxGenericConfig+0x348>
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	dc20      	bgt.n	800a624 <RadioSetTxGenericConfig+0x36c>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <RadioSetTxGenericConfig+0x334>
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d005      	beq.n	800a5f6 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800a5ea:	e01b      	b.n	800a624 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a5ec:	4b4a      	ldr	r3, [pc, #296]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a5f4:	e017      	b.n	800a626 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a5f6:	4b48      	ldr	r3, [pc, #288]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a5fe:	e012      	b.n	800a626 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	2b0b      	cmp	r3, #11
 800a606:	d003      	beq.n	800a610 <RadioSetTxGenericConfig+0x358>
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	2b0c      	cmp	r3, #12
 800a60e:	d104      	bne.n	800a61a <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a610:	4b41      	ldr	r3, [pc, #260]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a618:	e005      	b.n	800a626 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a61a:	4b3f      	ldr	r3, [pc, #252]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a622:	e000      	b.n	800a626 <RadioSetTxGenericConfig+0x36e>
            break;
 800a624:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a626:	4b3c      	ldr	r3, [pc, #240]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a628:	2201      	movs	r2, #1
 800a62a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	889a      	ldrh	r2, [r3, #4]
 800a630:	4b39      	ldr	r3, [pc, #228]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a632:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	799a      	ldrb	r2, [r3, #6]
 800a638:	4b37      	ldr	r3, [pc, #220]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a63a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	79da      	ldrb	r2, [r3, #7]
 800a640:	4b35      	ldr	r3, [pc, #212]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a642:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	7a1a      	ldrb	r2, [r3, #8]
 800a64a:	4b33      	ldr	r3, [pc, #204]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a64c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 800a650:	f7fe ff87 	bl	8009562 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800a654:	2001      	movs	r0, #1
 800a656:	f7fe f91b 	bl	8008890 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a65a:	4830      	ldr	r0, [pc, #192]	@ (800a71c <RadioSetTxGenericConfig+0x464>)
 800a65c:	f000 fd76 	bl	800b14c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a660:	482f      	ldr	r0, [pc, #188]	@ (800a720 <RadioSetTxGenericConfig+0x468>)
 800a662:	f000 fe45 	bl	800b2f0 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800a666:	4b2c      	ldr	r3, [pc, #176]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a668:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a66c:	2b06      	cmp	r3, #6
 800a66e:	d10d      	bne.n	800a68c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800a670:	f640 0089 	movw	r0, #2185	@ 0x889
 800a674:	f000 ff98 	bl	800b5a8 <SUBGRF_ReadRegister>
 800a678:	4603      	mov	r3, r0
 800a67a:	f023 0304 	bic.w	r3, r3, #4
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	4619      	mov	r1, r3
 800a682:	f640 0089 	movw	r0, #2185	@ 0x889
 800a686:	f000 ff7b 	bl	800b580 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800a68a:	e02d      	b.n	800a6e8 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800a68c:	f640 0089 	movw	r0, #2185	@ 0x889
 800a690:	f000 ff8a 	bl	800b5a8 <SUBGRF_ReadRegister>
 800a694:	4603      	mov	r3, r0
 800a696:	f043 0304 	orr.w	r3, r3, #4
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	4619      	mov	r1, r3
 800a69e:	f640 0089 	movw	r0, #2185	@ 0x889
 800a6a2:	f000 ff6d 	bl	800b580 <SUBGRF_WriteRegister>
        break;
 800a6a6:	e01f      	b.n	800a6e8 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d004      	beq.n	800a6ba <RadioSetTxGenericConfig+0x402>
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6b8:	d902      	bls.n	800a6c0 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800a6ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a6be:	e027      	b.n	800a710 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800a6c0:	2003      	movs	r0, #3
 800a6c2:	f7fe f8e5 	bl	8008890 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800a6c6:	4b14      	ldr	r3, [pc, #80]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a6c8:	2202      	movs	r2, #2
 800a6ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a11      	ldr	r2, [pc, #68]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a6d4:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800a6d6:	4b10      	ldr	r3, [pc, #64]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a6d8:	2216      	movs	r2, #22
 800a6da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a6de:	480f      	ldr	r0, [pc, #60]	@ (800a71c <RadioSetTxGenericConfig+0x464>)
 800a6e0:	f000 fd34 	bl	800b14c <SUBGRF_SetModulationParams>
        break;
 800a6e4:	e000      	b.n	800a6e8 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800a6e6:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800a6e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f001 f863 	bl	800b7b8 <SUBGRF_SetRfTxPower>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	4b08      	ldr	r3, [pc, #32]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a6f8:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800a6fc:	4b06      	ldr	r3, [pc, #24]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a6fe:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a702:	4618      	mov	r0, r3
 800a704:	f001 fa37 	bl	800bb76 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800a708:	4a03      	ldr	r2, [pc, #12]	@ (800a718 <RadioSetTxGenericConfig+0x460>)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6053      	str	r3, [r2, #4]
    return 0;
 800a70e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800a710:	4618      	mov	r0, r3
 800a712:	3738      	adds	r7, #56	@ 0x38
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	20008580 	.word	0x20008580
 800a71c:	200085b8 	.word	0x200085b8
 800a720:	2000858e 	.word	0x2000858e

0800a724 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800a72c:	2301      	movs	r3, #1
 800a72e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800a730:	7bfb      	ldrb	r3, [r7, #15]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	bc80      	pop	{r7}
 800a73a:	4770      	bx	lr

0800a73c <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800a746:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800a748:	4618      	mov	r0, r3
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bc80      	pop	{r7}
 800a750:	4770      	bx	lr
	...

0800a754 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d002      	beq.n	800a768 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800a762:	4a1d      	ldr	r2, [pc, #116]	@ (800a7d8 <SUBGRF_Init+0x84>)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800a768:	f7f7 f9f4 	bl	8001b54 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a76c:	2002      	movs	r0, #2
 800a76e:	f001 f8ff 	bl	800b970 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800a772:	4b1a      	ldr	r3, [pc, #104]	@ (800a7dc <SUBGRF_Init+0x88>)
 800a774:	2200      	movs	r2, #0
 800a776:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800a778:	2000      	movs	r0, #0
 800a77a:	f000 f97d 	bl	800aa78 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800a77e:	f002 f936 	bl	800c9ee <RBI_IsTCXO>
 800a782:	4603      	mov	r3, r0
 800a784:	2b01      	cmp	r3, #1
 800a786:	d10e      	bne.n	800a7a6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800a788:	2140      	movs	r1, #64	@ 0x40
 800a78a:	2001      	movs	r0, #1
 800a78c:	f000 fb82 	bl	800ae94 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800a790:	2100      	movs	r1, #0
 800a792:	f640 1011 	movw	r0, #2321	@ 0x911
 800a796:	f000 fef3 	bl	800b580 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800a79a:	237f      	movs	r3, #127	@ 0x7f
 800a79c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800a79e:	7b38      	ldrb	r0, [r7, #12]
 800a7a0:	f000 fa8b 	bl	800acba <SUBGRF_Calibrate>
 800a7a4:	e009      	b.n	800a7ba <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a7a6:	2120      	movs	r1, #32
 800a7a8:	f640 1011 	movw	r0, #2321	@ 0x911
 800a7ac:	f000 fee8 	bl	800b580 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a7b0:	2120      	movs	r1, #32
 800a7b2:	f640 1012 	movw	r0, #2322	@ 0x912
 800a7b6:	f000 fee3 	bl	800b580 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a7ba:	210e      	movs	r1, #14
 800a7bc:	f640 101f 	movw	r0, #2335	@ 0x91f
 800a7c0:	f000 fede 	bl	800b580 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800a7c4:	f002 f8f7 	bl	800c9b6 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800a7c8:	4b05      	ldr	r3, [pc, #20]	@ (800a7e0 <SUBGRF_Init+0x8c>)
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	701a      	strb	r2, [r3, #0]
}
 800a7ce:	bf00      	nop
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20008618 	.word	0x20008618
 800a7dc:	20008614 	.word	0x20008614
 800a7e0:	2000860c 	.word	0x2000860c

0800a7e4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	af00      	add	r7, sp, #0
    return OperatingMode;
 800a7e8:	4b02      	ldr	r3, [pc, #8]	@ (800a7f4 <SUBGRF_GetOperatingMode+0x10>)
 800a7ea:	781b      	ldrb	r3, [r3, #0]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bc80      	pop	{r7}
 800a7f2:	4770      	bx	lr
 800a7f4:	2000860c 	.word	0x2000860c

0800a7f8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	460b      	mov	r3, r1
 800a802:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	461a      	mov	r2, r3
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	2000      	movs	r0, #0
 800a80c:	f000 ff24 	bl	800b658 <SUBGRF_WriteBuffer>
}
 800a810:	bf00      	nop
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	4613      	mov	r3, r2
 800a824:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800a82a:	f107 0317 	add.w	r3, r7, #23
 800a82e:	4619      	mov	r1, r3
 800a830:	68b8      	ldr	r0, [r7, #8]
 800a832:	f000 fe27 	bl	800b484 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	79fa      	ldrb	r2, [r7, #7]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d201      	bcs.n	800a844 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800a840:	2301      	movs	r3, #1
 800a842:	e007      	b.n	800a854 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800a844:	7df8      	ldrb	r0, [r7, #23]
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	461a      	mov	r2, r3
 800a84c:	68f9      	ldr	r1, [r7, #12]
 800a84e:	f000 ff25 	bl	800b69c <SUBGRF_ReadBuffer>

    return 0;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3718      	adds	r7, #24
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	460b      	mov	r3, r1
 800a866:	607a      	str	r2, [r7, #4]
 800a868:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800a86a:	7afb      	ldrb	r3, [r7, #11]
 800a86c:	4619      	mov	r1, r3
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f7ff ffc2 	bl	800a7f8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f91b 	bl	800aab0 <SUBGRF_SetTx>
}
 800a87a:	bf00      	nop
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b082      	sub	sp, #8
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800a88a:	2208      	movs	r2, #8
 800a88c:	6879      	ldr	r1, [r7, #4]
 800a88e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800a892:	f000 fe9d 	bl	800b5d0 <SUBGRF_WriteRegisters>
    return 0;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800a8aa:	88fb      	ldrh	r3, [r7, #6]
 800a8ac:	0a1b      	lsrs	r3, r3, #8
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800a8b4:	88fb      	ldrh	r3, [r7, #6]
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a8ba:	f000 fb6f 	bl	800af9c <SUBGRF_GetPacketType>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d108      	bne.n	800a8d6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800a8c4:	f107 030c 	add.w	r3, r7, #12
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800a8d0:	f000 fe7e 	bl	800b5d0 <SUBGRF_WriteRegisters>
            break;
 800a8d4:	e000      	b.n	800a8d8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800a8d6:	bf00      	nop
    }
}
 800a8d8:	bf00      	nop
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800a8ea:	88fb      	ldrh	r3, [r7, #6]
 800a8ec:	0a1b      	lsrs	r3, r3, #8
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800a8f4:	88fb      	ldrh	r3, [r7, #6]
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a8fa:	f000 fb4f 	bl	800af9c <SUBGRF_GetPacketType>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d108      	bne.n	800a916 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800a904:	f107 030c 	add.w	r3, r7, #12
 800a908:	2202      	movs	r2, #2
 800a90a:	4619      	mov	r1, r3
 800a90c:	f240 60be 	movw	r0, #1726	@ 0x6be
 800a910:	f000 fe5e 	bl	800b5d0 <SUBGRF_WriteRegisters>
            break;
 800a914:	e000      	b.n	800a918 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800a916:	bf00      	nop
    }
}
 800a918:	bf00      	nop
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	4603      	mov	r3, r0
 800a928:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800a92e:	f000 fb35 	bl	800af9c <SUBGRF_GetPacketType>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d121      	bne.n	800a97c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800a938:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a93c:	f000 fe34 	bl	800b5a8 <SUBGRF_ReadRegister>
 800a940:	4603      	mov	r3, r0
 800a942:	f023 0301 	bic.w	r3, r3, #1
 800a946:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800a948:	88fb      	ldrh	r3, [r7, #6]
 800a94a:	0a1b      	lsrs	r3, r3, #8
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	b25b      	sxtb	r3, r3
 800a950:	f003 0301 	and.w	r3, r3, #1
 800a954:	b25a      	sxtb	r2, r3
 800a956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	b25b      	sxtb	r3, r3
 800a95e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800a960:	7bfb      	ldrb	r3, [r7, #15]
 800a962:	4619      	mov	r1, r3
 800a964:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a968:	f000 fe0a 	bl	800b580 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800a96c:	88fb      	ldrh	r3, [r7, #6]
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	4619      	mov	r1, r3
 800a972:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800a976:	f000 fe03 	bl	800b580 <SUBGRF_WriteRegister>
            break;
 800a97a:	e000      	b.n	800a97e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800a97c:	bf00      	nop
    }
}
 800a97e:	bf00      	nop
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b082      	sub	sp, #8
 800a98a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800a990:	2300      	movs	r3, #0
 800a992:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800a994:	2300      	movs	r3, #0
 800a996:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800a998:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a99c:	f000 fe04 	bl	800b5a8 <SUBGRF_ReadRegister>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800a9a4:	79fb      	ldrb	r3, [r7, #7]
 800a9a6:	f023 0301 	bic.w	r3, r3, #1
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a9b2:	f000 fde5 	bl	800b580 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800a9b6:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a9ba:	f000 fdf5 	bl	800b5a8 <SUBGRF_ReadRegister>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800a9c2:	79bb      	ldrb	r3, [r7, #6]
 800a9c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a9d0:	f000 fdd6 	bl	800b580 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a9d4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800a9d8:	f000 f88a 	bl	800aaf0 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800a9dc:	463b      	mov	r3, r7
 800a9de:	2204      	movs	r2, #4
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	f640 0019 	movw	r0, #2073	@ 0x819
 800a9e6:	f000 fe15 	bl	800b614 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800a9ea:	2000      	movs	r0, #0
 800a9ec:	f000 f844 	bl	800aa78 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800a9f0:	79fb      	ldrb	r3, [r7, #7]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a9f8:	f000 fdc2 	bl	800b580 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800a9fc:	79bb      	ldrb	r3, [r7, #6]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800aa04:	f000 fdbc 	bl	800b580 <SUBGRF_WriteRegister>

    return number;
 800aa08:	683b      	ldr	r3, [r7, #0]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
	...

0800aa14 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	f001 ffd1 	bl	800c9c4 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800aa22:	2002      	movs	r0, #2
 800aa24:	f000 ffa4 	bl	800b970 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800aa28:	793b      	ldrb	r3, [r7, #4]
 800aa2a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800aa34:	793b      	ldrb	r3, [r7, #4]
 800aa36:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800aa3e:	b25b      	sxtb	r3, r3
 800aa40:	4313      	orrs	r3, r2
 800aa42:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800aa44:	793b      	ldrb	r3, [r7, #4]
 800aa46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	b25b      	sxtb	r3, r3
 800aa52:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800aa54:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800aa56:	f107 030f 	add.w	r3, r7, #15
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	2084      	movs	r0, #132	@ 0x84
 800aa60:	f000 fe3e 	bl	800b6e0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800aa64:	4b03      	ldr	r3, [pc, #12]	@ (800aa74 <SUBGRF_SetSleep+0x60>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	701a      	strb	r2, [r3, #0]
}
 800aa6a:	bf00      	nop
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	2000860c 	.word	0x2000860c

0800aa78 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800aa82:	1dfb      	adds	r3, r7, #7
 800aa84:	2201      	movs	r2, #1
 800aa86:	4619      	mov	r1, r3
 800aa88:	2080      	movs	r0, #128	@ 0x80
 800aa8a:	f000 fe29 	bl	800b6e0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d103      	bne.n	800aa9c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800aa94:	4b05      	ldr	r3, [pc, #20]	@ (800aaac <SUBGRF_SetStandby+0x34>)
 800aa96:	2201      	movs	r2, #1
 800aa98:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800aa9a:	e002      	b.n	800aaa2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800aa9c:	4b03      	ldr	r3, [pc, #12]	@ (800aaac <SUBGRF_SetStandby+0x34>)
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	701a      	strb	r2, [r3, #0]
}
 800aaa2:	bf00      	nop
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	2000860c 	.word	0x2000860c

0800aab0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800aab8:	4b0c      	ldr	r3, [pc, #48]	@ (800aaec <SUBGRF_SetTx+0x3c>)
 800aaba:	2204      	movs	r2, #4
 800aabc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	0c1b      	lsrs	r3, r3, #16
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	0a1b      	lsrs	r3, r3, #8
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800aad4:	f107 030c 	add.w	r3, r7, #12
 800aad8:	2203      	movs	r2, #3
 800aada:	4619      	mov	r1, r3
 800aadc:	2083      	movs	r0, #131	@ 0x83
 800aade:	f000 fdff 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800aae2:	bf00      	nop
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	2000860c 	.word	0x2000860c

0800aaf0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800aaf8:	4b0c      	ldr	r3, [pc, #48]	@ (800ab2c <SUBGRF_SetRx+0x3c>)
 800aafa:	2205      	movs	r2, #5
 800aafc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	0c1b      	lsrs	r3, r3, #16
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	0a1b      	lsrs	r3, r3, #8
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800ab14:	f107 030c 	add.w	r3, r7, #12
 800ab18:	2203      	movs	r2, #3
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	2082      	movs	r0, #130	@ 0x82
 800ab1e:	f000 fddf 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800ab22:	bf00      	nop
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	2000860c 	.word	0x2000860c

0800ab30 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800ab38:	4b0e      	ldr	r3, [pc, #56]	@ (800ab74 <SUBGRF_SetRxBoosted+0x44>)
 800ab3a:	2205      	movs	r2, #5
 800ab3c:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800ab3e:	2197      	movs	r1, #151	@ 0x97
 800ab40:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800ab44:	f000 fd1c 	bl	800b580 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	0c1b      	lsrs	r3, r3, #16
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	0a1b      	lsrs	r3, r3, #8
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800ab5e:	f107 030c 	add.w	r3, r7, #12
 800ab62:	2203      	movs	r2, #3
 800ab64:	4619      	mov	r1, r3
 800ab66:	2082      	movs	r0, #130	@ 0x82
 800ab68:	f000 fdba 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800ab6c:	bf00      	nop
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	2000860c 	.word	0x2000860c

0800ab78 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	0c1b      	lsrs	r3, r3, #16
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	0a1b      	lsrs	r3, r3, #8
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	0c1b      	lsrs	r3, r3, #16
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	0a1b      	lsrs	r3, r3, #8
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800abae:	f107 0308 	add.w	r3, r7, #8
 800abb2:	2206      	movs	r2, #6
 800abb4:	4619      	mov	r1, r3
 800abb6:	2094      	movs	r0, #148	@ 0x94
 800abb8:	f000 fd92 	bl	800b6e0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800abbc:	4b03      	ldr	r3, [pc, #12]	@ (800abcc <SUBGRF_SetRxDutyCycle+0x54>)
 800abbe:	2206      	movs	r2, #6
 800abc0:	701a      	strb	r2, [r3, #0]
}
 800abc2:	bf00      	nop
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	2000860c 	.word	0x2000860c

0800abd0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800abd4:	2200      	movs	r2, #0
 800abd6:	2100      	movs	r1, #0
 800abd8:	20c5      	movs	r0, #197	@ 0xc5
 800abda:	f000 fd81 	bl	800b6e0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800abde:	4b02      	ldr	r3, [pc, #8]	@ (800abe8 <SUBGRF_SetCad+0x18>)
 800abe0:	2207      	movs	r2, #7
 800abe2:	701a      	strb	r2, [r3, #0]
}
 800abe4:	bf00      	nop
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	2000860c 	.word	0x2000860c

0800abec <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800abec:	b580      	push	{r7, lr}
 800abee:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800abf0:	2200      	movs	r2, #0
 800abf2:	2100      	movs	r1, #0
 800abf4:	20d1      	movs	r0, #209	@ 0xd1
 800abf6:	f000 fd73 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800abfa:	bf00      	nop
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800ac02:	2200      	movs	r2, #0
 800ac04:	2100      	movs	r1, #0
 800ac06:	20d2      	movs	r0, #210	@ 0xd2
 800ac08:	f000 fd6a 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800ac0c:	bf00      	nop
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	4603      	mov	r3, r0
 800ac18:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800ac1a:	1dfb      	adds	r3, r7, #7
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	4619      	mov	r1, r3
 800ac20:	209f      	movs	r0, #159	@ 0x9f
 800ac22:	f000 fd5d 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800ac26:	bf00      	nop
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	4603      	mov	r3, r0
 800ac36:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800ac38:	1dfb      	adds	r3, r7, #7
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	20a0      	movs	r0, #160	@ 0xa0
 800ac40:	f000 fd4e 	bl	800b6e0 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800ac44:	79fb      	ldrb	r3, [r7, #7]
 800ac46:	2b3f      	cmp	r3, #63	@ 0x3f
 800ac48:	d91c      	bls.n	800ac84 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800ac4a:	79fb      	ldrb	r3, [r7, #7]
 800ac4c:	085b      	lsrs	r3, r3, #1
 800ac4e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800ac50:	2300      	movs	r3, #0
 800ac52:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800ac58:	e005      	b.n	800ac66 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	089b      	lsrs	r3, r3, #2
 800ac5e:	73fb      	strb	r3, [r7, #15]
            exp++;
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	3301      	adds	r3, #1
 800ac64:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800ac66:	7bfb      	ldrb	r3, [r7, #15]
 800ac68:	2b1f      	cmp	r3, #31
 800ac6a:	d8f6      	bhi.n	800ac5a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
 800ac6e:	00db      	lsls	r3, r3, #3
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	7bbb      	ldrb	r3, [r7, #14]
 800ac74:	4413      	add	r3, r2
 800ac76:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800ac78:	7b7b      	ldrb	r3, [r7, #13]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	f240 7006 	movw	r0, #1798	@ 0x706
 800ac80:	f000 fc7e 	bl	800b580 <SUBGRF_WriteRegister>
    }
}
 800ac84:	bf00      	nop
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800ac92:	f001 feb3 	bl	800c9fc <RBI_IsDCDC>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d102      	bne.n	800aca2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	71fb      	strb	r3, [r7, #7]
 800aca0:	e001      	b.n	800aca6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800aca2:	2300      	movs	r3, #0
 800aca4:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800aca6:	1dfb      	adds	r3, r7, #7
 800aca8:	2201      	movs	r2, #1
 800acaa:	4619      	mov	r1, r3
 800acac:	2096      	movs	r0, #150	@ 0x96
 800acae:	f000 fd17 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800acb2:	bf00      	nop
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b084      	sub	sp, #16
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800acc2:	793b      	ldrb	r3, [r7, #4]
 800acc4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	019b      	lsls	r3, r3, #6
 800accc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800acce:	793b      	ldrb	r3, [r7, #4]
 800acd0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800acd8:	b25b      	sxtb	r3, r3
 800acda:	4313      	orrs	r3, r2
 800acdc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800acde:	793b      	ldrb	r3, [r7, #4]
 800ace0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800ace8:	b25b      	sxtb	r3, r3
 800acea:	4313      	orrs	r3, r2
 800acec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800acee:	793b      	ldrb	r3, [r7, #4]
 800acf0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800acf8:	b25b      	sxtb	r3, r3
 800acfa:	4313      	orrs	r3, r2
 800acfc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800acfe:	793b      	ldrb	r3, [r7, #4]
 800ad00:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800ad08:	b25b      	sxtb	r3, r3
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800ad0e:	793b      	ldrb	r3, [r7, #4]
 800ad10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800ad18:	b25b      	sxtb	r3, r3
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800ad1e:	793b      	ldrb	r3, [r7, #4]
 800ad20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	b25b      	sxtb	r3, r3
 800ad2c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ad2e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800ad30:	f107 030f 	add.w	r3, r7, #15
 800ad34:	2201      	movs	r2, #1
 800ad36:	4619      	mov	r1, r3
 800ad38:	2089      	movs	r0, #137	@ 0x89
 800ad3a:	f000 fcd1 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800ad3e:	bf00      	nop
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
	...

0800ad48 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a1d      	ldr	r2, [pc, #116]	@ (800adc8 <SUBGRF_CalibrateImage+0x80>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d904      	bls.n	800ad62 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800ad58:	23e1      	movs	r3, #225	@ 0xe1
 800ad5a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800ad5c:	23e9      	movs	r3, #233	@ 0xe9
 800ad5e:	737b      	strb	r3, [r7, #13]
 800ad60:	e027      	b.n	800adb2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a19      	ldr	r2, [pc, #100]	@ (800adcc <SUBGRF_CalibrateImage+0x84>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d904      	bls.n	800ad74 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800ad6a:	23d7      	movs	r3, #215	@ 0xd7
 800ad6c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800ad6e:	23db      	movs	r3, #219	@ 0xdb
 800ad70:	737b      	strb	r3, [r7, #13]
 800ad72:	e01e      	b.n	800adb2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a16      	ldr	r2, [pc, #88]	@ (800add0 <SUBGRF_CalibrateImage+0x88>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d904      	bls.n	800ad86 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800ad7c:	23c1      	movs	r3, #193	@ 0xc1
 800ad7e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800ad80:	23c5      	movs	r3, #197	@ 0xc5
 800ad82:	737b      	strb	r3, [r7, #13]
 800ad84:	e015      	b.n	800adb2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a12      	ldr	r2, [pc, #72]	@ (800add4 <SUBGRF_CalibrateImage+0x8c>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d904      	bls.n	800ad98 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800ad8e:	2375      	movs	r3, #117	@ 0x75
 800ad90:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800ad92:	2381      	movs	r3, #129	@ 0x81
 800ad94:	737b      	strb	r3, [r7, #13]
 800ad96:	e00c      	b.n	800adb2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a0f      	ldr	r2, [pc, #60]	@ (800add8 <SUBGRF_CalibrateImage+0x90>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d904      	bls.n	800adaa <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800ada0:	236b      	movs	r3, #107	@ 0x6b
 800ada2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800ada4:	236f      	movs	r3, #111	@ 0x6f
 800ada6:	737b      	strb	r3, [r7, #13]
 800ada8:	e003      	b.n	800adb2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800adaa:	2329      	movs	r3, #41	@ 0x29
 800adac:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800adae:	232b      	movs	r3, #43	@ 0x2b
 800adb0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800adb2:	f107 030c 	add.w	r3, r7, #12
 800adb6:	2202      	movs	r2, #2
 800adb8:	4619      	mov	r1, r3
 800adba:	2098      	movs	r0, #152	@ 0x98
 800adbc:	f000 fc90 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800adc0:	bf00      	nop
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	35a4e900 	.word	0x35a4e900
 800adcc:	32a9f880 	.word	0x32a9f880
 800add0:	2de54480 	.word	0x2de54480
 800add4:	1b6b0b00 	.word	0x1b6b0b00
 800add8:	1954fc40 	.word	0x1954fc40

0800addc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800addc:	b590      	push	{r4, r7, lr}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	4604      	mov	r4, r0
 800ade4:	4608      	mov	r0, r1
 800ade6:	4611      	mov	r1, r2
 800ade8:	461a      	mov	r2, r3
 800adea:	4623      	mov	r3, r4
 800adec:	71fb      	strb	r3, [r7, #7]
 800adee:	4603      	mov	r3, r0
 800adf0:	71bb      	strb	r3, [r7, #6]
 800adf2:	460b      	mov	r3, r1
 800adf4:	717b      	strb	r3, [r7, #5]
 800adf6:	4613      	mov	r3, r2
 800adf8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800adfa:	79fb      	ldrb	r3, [r7, #7]
 800adfc:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800adfe:	79bb      	ldrb	r3, [r7, #6]
 800ae00:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800ae02:	797b      	ldrb	r3, [r7, #5]
 800ae04:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800ae06:	793b      	ldrb	r3, [r7, #4]
 800ae08:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800ae0a:	f107 030c 	add.w	r3, r7, #12
 800ae0e:	2204      	movs	r2, #4
 800ae10:	4619      	mov	r1, r3
 800ae12:	2095      	movs	r0, #149	@ 0x95
 800ae14:	f000 fc64 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800ae18:	bf00      	nop
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd90      	pop	{r4, r7, pc}

0800ae20 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800ae20:	b590      	push	{r4, r7, lr}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	4604      	mov	r4, r0
 800ae28:	4608      	mov	r0, r1
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4623      	mov	r3, r4
 800ae30:	80fb      	strh	r3, [r7, #6]
 800ae32:	4603      	mov	r3, r0
 800ae34:	80bb      	strh	r3, [r7, #4]
 800ae36:	460b      	mov	r3, r1
 800ae38:	807b      	strh	r3, [r7, #2]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800ae3e:	88fb      	ldrh	r3, [r7, #6]
 800ae40:	0a1b      	lsrs	r3, r3, #8
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800ae48:	88fb      	ldrh	r3, [r7, #6]
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800ae4e:	88bb      	ldrh	r3, [r7, #4]
 800ae50:	0a1b      	lsrs	r3, r3, #8
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800ae58:	88bb      	ldrh	r3, [r7, #4]
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800ae5e:	887b      	ldrh	r3, [r7, #2]
 800ae60:	0a1b      	lsrs	r3, r3, #8
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800ae68:	887b      	ldrh	r3, [r7, #2]
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800ae6e:	883b      	ldrh	r3, [r7, #0]
 800ae70:	0a1b      	lsrs	r3, r3, #8
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800ae78:	883b      	ldrh	r3, [r7, #0]
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800ae7e:	f107 0308 	add.w	r3, r7, #8
 800ae82:	2208      	movs	r2, #8
 800ae84:	4619      	mov	r1, r3
 800ae86:	2008      	movs	r0, #8
 800ae88:	f000 fc2a 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800ae8c:	bf00      	nop
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd90      	pop	{r4, r7, pc}

0800ae94 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	6039      	str	r1, [r7, #0]
 800ae9e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800aea0:	79fb      	ldrb	r3, [r7, #7]
 800aea2:	f003 0307 	and.w	r3, r3, #7
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	0c1b      	lsrs	r3, r3, #16
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	0a1b      	lsrs	r3, r3, #8
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800aec0:	f107 030c 	add.w	r3, r7, #12
 800aec4:	2204      	movs	r2, #4
 800aec6:	4619      	mov	r1, r3
 800aec8:	2097      	movs	r0, #151	@ 0x97
 800aeca:	f000 fc09 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800aece:	bf00      	nop
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800aed8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800aee2:	2300      	movs	r3, #0
 800aee4:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800aee6:	4b1d      	ldr	r3, [pc, #116]	@ (800af5c <SUBGRF_SetRfFrequency+0x84>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	f083 0301 	eor.w	r3, r3, #1
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d005      	beq.n	800af00 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f7ff ff27 	bl	800ad48 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800aefa:	4b18      	ldr	r3, [pc, #96]	@ (800af5c <SUBGRF_SetRfFrequency+0x84>)
 800aefc:	2201      	movs	r2, #1
 800aefe:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	461c      	mov	r4, r3
 800af06:	4615      	mov	r5, r2
 800af08:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800af0c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800af10:	4a13      	ldr	r2, [pc, #76]	@ (800af60 <SUBGRF_SetRfFrequency+0x88>)
 800af12:	f04f 0300 	mov.w	r3, #0
 800af16:	4640      	mov	r0, r8
 800af18:	4649      	mov	r1, r9
 800af1a:	f7f5 fff1 	bl	8000f00 <__aeabi_uldivmod>
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	4613      	mov	r3, r2
 800af24:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	0e1b      	lsrs	r3, r3, #24
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	0c1b      	lsrs	r3, r3, #16
 800af32:	b2db      	uxtb	r3, r3
 800af34:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	0a1b      	lsrs	r3, r3, #8
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	b2db      	uxtb	r3, r3
 800af42:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800af44:	f107 0308 	add.w	r3, r7, #8
 800af48:	2204      	movs	r2, #4
 800af4a:	4619      	mov	r1, r3
 800af4c:	2086      	movs	r0, #134	@ 0x86
 800af4e:	f000 fbc7 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800af52:	bf00      	nop
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800af5c:	20008614 	.word	0x20008614
 800af60:	01e84800 	.word	0x01e84800

0800af64 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	4603      	mov	r3, r0
 800af6c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800af6e:	79fa      	ldrb	r2, [r7, #7]
 800af70:	4b09      	ldr	r3, [pc, #36]	@ (800af98 <SUBGRF_SetPacketType+0x34>)
 800af72:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800af74:	79fb      	ldrb	r3, [r7, #7]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d104      	bne.n	800af84 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800af7a:	2100      	movs	r1, #0
 800af7c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800af80:	f000 fafe 	bl	800b580 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800af84:	1dfb      	adds	r3, r7, #7
 800af86:	2201      	movs	r2, #1
 800af88:	4619      	mov	r1, r3
 800af8a:	208a      	movs	r0, #138	@ 0x8a
 800af8c:	f000 fba8 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800af90:	bf00      	nop
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	2000860d 	.word	0x2000860d

0800af9c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800af9c:	b480      	push	{r7}
 800af9e:	af00      	add	r7, sp, #0
    return PacketType;
 800afa0:	4b02      	ldr	r3, [pc, #8]	@ (800afac <SUBGRF_GetPacketType+0x10>)
 800afa2:	781b      	ldrb	r3, [r3, #0]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bc80      	pop	{r7}
 800afaa:	4770      	bx	lr
 800afac:	2000860d 	.word	0x2000860d

0800afb0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	4603      	mov	r3, r0
 800afb8:	71fb      	strb	r3, [r7, #7]
 800afba:	460b      	mov	r3, r1
 800afbc:	71bb      	strb	r3, [r7, #6]
 800afbe:	4613      	mov	r3, r2
 800afc0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800afc2:	79fb      	ldrb	r3, [r7, #7]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d149      	bne.n	800b05c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800afc8:	2000      	movs	r0, #0
 800afca:	f001 fd1e 	bl	800ca0a <RBI_GetRFOMaxPowerConfig>
 800afce:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800afd0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	da01      	bge.n	800afde <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2b0e      	cmp	r3, #14
 800afe2:	d10e      	bne.n	800b002 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800afe4:	2301      	movs	r3, #1
 800afe6:	2201      	movs	r2, #1
 800afe8:	2100      	movs	r1, #0
 800afea:	2004      	movs	r0, #4
 800afec:	f7ff fef6 	bl	800addc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800aff0:	79ba      	ldrb	r2, [r7, #6]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	330e      	adds	r3, #14
 800affc:	b2db      	uxtb	r3, r3
 800affe:	71bb      	strb	r3, [r7, #6]
 800b000:	e01f      	b.n	800b042 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2b0a      	cmp	r3, #10
 800b006:	d10e      	bne.n	800b026 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800b008:	2301      	movs	r3, #1
 800b00a:	2201      	movs	r2, #1
 800b00c:	2100      	movs	r1, #0
 800b00e:	2001      	movs	r0, #1
 800b010:	f7ff fee4 	bl	800addc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800b014:	79ba      	ldrb	r2, [r7, #6]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	330d      	adds	r3, #13
 800b020:	b2db      	uxtb	r3, r3
 800b022:	71bb      	strb	r3, [r7, #6]
 800b024:	e00d      	b.n	800b042 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800b026:	2301      	movs	r3, #1
 800b028:	2201      	movs	r2, #1
 800b02a:	2100      	movs	r1, #0
 800b02c:	2007      	movs	r0, #7
 800b02e:	f7ff fed5 	bl	800addc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b032:	79ba      	ldrb	r2, [r7, #6]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	b2db      	uxtb	r3, r3
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	330e      	adds	r3, #14
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800b042:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b046:	f113 0f11 	cmn.w	r3, #17
 800b04a:	da01      	bge.n	800b050 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800b04c:	23ef      	movs	r3, #239	@ 0xef
 800b04e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800b050:	2118      	movs	r1, #24
 800b052:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800b056:	f000 fa93 	bl	800b580 <SUBGRF_WriteRegister>
 800b05a:	e067      	b.n	800b12c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800b05c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800b060:	f000 faa2 	bl	800b5a8 <SUBGRF_ReadRegister>
 800b064:	4603      	mov	r3, r0
 800b066:	f043 031e 	orr.w	r3, r3, #30
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	4619      	mov	r1, r3
 800b06e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800b072:	f000 fa85 	bl	800b580 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800b076:	2001      	movs	r0, #1
 800b078:	f001 fcc7 	bl	800ca0a <RBI_GetRFOMaxPowerConfig>
 800b07c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800b07e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	429a      	cmp	r2, r3
 800b086:	da01      	bge.n	800b08c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2b14      	cmp	r3, #20
 800b090:	d10e      	bne.n	800b0b0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800b092:	2301      	movs	r3, #1
 800b094:	2200      	movs	r2, #0
 800b096:	2105      	movs	r1, #5
 800b098:	2003      	movs	r0, #3
 800b09a:	f7ff fe9f 	bl	800addc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b09e:	79ba      	ldrb	r2, [r7, #6]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	3316      	adds	r3, #22
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	71bb      	strb	r3, [r7, #6]
 800b0ae:	e031      	b.n	800b114 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2b11      	cmp	r3, #17
 800b0b4:	d10e      	bne.n	800b0d4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	2103      	movs	r1, #3
 800b0bc:	2002      	movs	r0, #2
 800b0be:	f7ff fe8d 	bl	800addc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b0c2:	79ba      	ldrb	r2, [r7, #6]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	3316      	adds	r3, #22
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	71bb      	strb	r3, [r7, #6]
 800b0d2:	e01f      	b.n	800b114 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2b0e      	cmp	r3, #14
 800b0d8:	d10e      	bne.n	800b0f8 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800b0da:	2301      	movs	r3, #1
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2102      	movs	r1, #2
 800b0e0:	2002      	movs	r0, #2
 800b0e2:	f7ff fe7b 	bl	800addc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b0e6:	79ba      	ldrb	r2, [r7, #6]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	330e      	adds	r3, #14
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	71bb      	strb	r3, [r7, #6]
 800b0f6:	e00d      	b.n	800b114 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	2107      	movs	r1, #7
 800b0fe:	2004      	movs	r0, #4
 800b100:	f7ff fe6c 	bl	800addc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b104:	79ba      	ldrb	r2, [r7, #6]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	3316      	adds	r3, #22
 800b110:	b2db      	uxtb	r3, r3
 800b112:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800b114:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b118:	f113 0f09 	cmn.w	r3, #9
 800b11c:	da01      	bge.n	800b122 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800b11e:	23f7      	movs	r3, #247	@ 0xf7
 800b120:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800b122:	2138      	movs	r1, #56	@ 0x38
 800b124:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800b128:	f000 fa2a 	bl	800b580 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800b12c:	79bb      	ldrb	r3, [r7, #6]
 800b12e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800b130:	797b      	ldrb	r3, [r7, #5]
 800b132:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800b134:	f107 0308 	add.w	r3, r7, #8
 800b138:	2202      	movs	r2, #2
 800b13a:	4619      	mov	r1, r3
 800b13c:	208e      	movs	r0, #142	@ 0x8e
 800b13e:	f000 facf 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800b142:	bf00      	nop
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
	...

0800b14c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800b14c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b150:	b086      	sub	sp, #24
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b15a:	4a61      	ldr	r2, [pc, #388]	@ (800b2e0 <SUBGRF_SetModulationParams+0x194>)
 800b15c:	f107 0308 	add.w	r3, r7, #8
 800b160:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b164:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	781a      	ldrb	r2, [r3, #0]
 800b16c:	4b5d      	ldr	r3, [pc, #372]	@ (800b2e4 <SUBGRF_SetModulationParams+0x198>)
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	429a      	cmp	r2, r3
 800b172:	d004      	beq.n	800b17e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	4618      	mov	r0, r3
 800b17a:	f7ff fef3 	bl	800af64 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	2b03      	cmp	r3, #3
 800b184:	f200 80a5 	bhi.w	800b2d2 <SUBGRF_SetModulationParams+0x186>
 800b188:	a201      	add	r2, pc, #4	@ (adr r2, 800b190 <SUBGRF_SetModulationParams+0x44>)
 800b18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18e:	bf00      	nop
 800b190:	0800b1a1 	.word	0x0800b1a1
 800b194:	0800b261 	.word	0x0800b261
 800b198:	0800b223 	.word	0x0800b223
 800b19c:	0800b28f 	.word	0x0800b28f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800b1a0:	2308      	movs	r3, #8
 800b1a2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	4a4f      	ldr	r2, [pc, #316]	@ (800b2e8 <SUBGRF_SetModulationParams+0x19c>)
 800b1aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ae:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	0c1b      	lsrs	r3, r3, #16
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	0a1b      	lsrs	r3, r3, #8
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	7b1b      	ldrb	r3, [r3, #12]
 800b1ca:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	7b5b      	ldrb	r3, [r3, #13]
 800b1d0:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	461c      	mov	r4, r3
 800b1da:	4615      	mov	r5, r2
 800b1dc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800b1e0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800b1e4:	4a41      	ldr	r2, [pc, #260]	@ (800b2ec <SUBGRF_SetModulationParams+0x1a0>)
 800b1e6:	f04f 0300 	mov.w	r3, #0
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	4649      	mov	r1, r9
 800b1ee:	f7f5 fe87 	bl	8000f00 <__aeabi_uldivmod>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	0c1b      	lsrs	r3, r3, #16
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	0a1b      	lsrs	r3, r3, #8
 800b206:	b2db      	uxtb	r3, r3
 800b208:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b210:	7cfb      	ldrb	r3, [r7, #19]
 800b212:	b29a      	uxth	r2, r3
 800b214:	f107 0308 	add.w	r3, r7, #8
 800b218:	4619      	mov	r1, r3
 800b21a:	208b      	movs	r0, #139	@ 0x8b
 800b21c:	f000 fa60 	bl	800b6e0 <SUBGRF_WriteCommand>
        break;
 800b220:	e058      	b.n	800b2d4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800b222:	2304      	movs	r3, #4
 800b224:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	4a2f      	ldr	r2, [pc, #188]	@ (800b2e8 <SUBGRF_SetModulationParams+0x19c>)
 800b22c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b230:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	0c1b      	lsrs	r3, r3, #16
 800b236:	b2db      	uxtb	r3, r3
 800b238:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	0a1b      	lsrs	r3, r3, #8
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	b2db      	uxtb	r3, r3
 800b246:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	7d1b      	ldrb	r3, [r3, #20]
 800b24c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b24e:	7cfb      	ldrb	r3, [r7, #19]
 800b250:	b29a      	uxth	r2, r3
 800b252:	f107 0308 	add.w	r3, r7, #8
 800b256:	4619      	mov	r1, r3
 800b258:	208b      	movs	r0, #139	@ 0x8b
 800b25a:	f000 fa41 	bl	800b6e0 <SUBGRF_WriteCommand>
        break;
 800b25e:	e039      	b.n	800b2d4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800b260:	2304      	movs	r3, #4
 800b262:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	7e1b      	ldrb	r3, [r3, #24]
 800b268:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	7e5b      	ldrb	r3, [r3, #25]
 800b26e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	7e9b      	ldrb	r3, [r3, #26]
 800b274:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	7edb      	ldrb	r3, [r3, #27]
 800b27a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b27c:	7cfb      	ldrb	r3, [r7, #19]
 800b27e:	b29a      	uxth	r2, r3
 800b280:	f107 0308 	add.w	r3, r7, #8
 800b284:	4619      	mov	r1, r3
 800b286:	208b      	movs	r0, #139	@ 0x8b
 800b288:	f000 fa2a 	bl	800b6e0 <SUBGRF_WriteCommand>

        break;
 800b28c:	e022      	b.n	800b2d4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800b28e:	2305      	movs	r3, #5
 800b290:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	4a14      	ldr	r2, [pc, #80]	@ (800b2e8 <SUBGRF_SetModulationParams+0x19c>)
 800b298:	fbb2 f3f3 	udiv	r3, r2, r3
 800b29c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	0c1b      	lsrs	r3, r3, #16
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	0a1b      	lsrs	r3, r3, #8
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	7b1b      	ldrb	r3, [r3, #12]
 800b2b8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	7b5b      	ldrb	r3, [r3, #13]
 800b2be:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b2c0:	7cfb      	ldrb	r3, [r7, #19]
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	f107 0308 	add.w	r3, r7, #8
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	208b      	movs	r0, #139	@ 0x8b
 800b2cc:	f000 fa08 	bl	800b6e0 <SUBGRF_WriteCommand>
        break;
 800b2d0:	e000      	b.n	800b2d4 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800b2d2:	bf00      	nop
    }
}
 800b2d4:	bf00      	nop
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b2de:	bf00      	nop
 800b2e0:	08010abc 	.word	0x08010abc
 800b2e4:	2000860d 	.word	0x2000860d
 800b2e8:	3d090000 	.word	0x3d090000
 800b2ec:	01e84800 	.word	0x01e84800

0800b2f0 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b2fc:	4a48      	ldr	r2, [pc, #288]	@ (800b420 <SUBGRF_SetPacketParams+0x130>)
 800b2fe:	f107 030c 	add.w	r3, r7, #12
 800b302:	ca07      	ldmia	r2, {r0, r1, r2}
 800b304:	c303      	stmia	r3!, {r0, r1}
 800b306:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	781a      	ldrb	r2, [r3, #0]
 800b30c:	4b45      	ldr	r3, [pc, #276]	@ (800b424 <SUBGRF_SetPacketParams+0x134>)
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	429a      	cmp	r2, r3
 800b312:	d004      	beq.n	800b31e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff fe23 	bl	800af64 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	2b03      	cmp	r3, #3
 800b324:	d878      	bhi.n	800b418 <SUBGRF_SetPacketParams+0x128>
 800b326:	a201      	add	r2, pc, #4	@ (adr r2, 800b32c <SUBGRF_SetPacketParams+0x3c>)
 800b328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32c:	0800b33d 	.word	0x0800b33d
 800b330:	0800b3cd 	.word	0x0800b3cd
 800b334:	0800b3c1 	.word	0x0800b3c1
 800b338:	0800b33d 	.word	0x0800b33d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	7a5b      	ldrb	r3, [r3, #9]
 800b340:	2bf1      	cmp	r3, #241	@ 0xf1
 800b342:	d10a      	bne.n	800b35a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800b344:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800b348:	f7ff faaa 	bl	800a8a0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800b34c:	f248 0005 	movw	r0, #32773	@ 0x8005
 800b350:	f7ff fac6 	bl	800a8e0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800b354:	2302      	movs	r3, #2
 800b356:	75bb      	strb	r3, [r7, #22]
 800b358:	e011      	b.n	800b37e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	7a5b      	ldrb	r3, [r3, #9]
 800b35e:	2bf2      	cmp	r3, #242	@ 0xf2
 800b360:	d10a      	bne.n	800b378 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800b362:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800b366:	f7ff fa9b 	bl	800a8a0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800b36a:	f241 0021 	movw	r0, #4129	@ 0x1021
 800b36e:	f7ff fab7 	bl	800a8e0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800b372:	2306      	movs	r3, #6
 800b374:	75bb      	strb	r3, [r7, #22]
 800b376:	e002      	b.n	800b37e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	7a5b      	ldrb	r3, [r3, #9]
 800b37c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800b37e:	2309      	movs	r3, #9
 800b380:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	885b      	ldrh	r3, [r3, #2]
 800b386:	0a1b      	lsrs	r3, r3, #8
 800b388:	b29b      	uxth	r3, r3
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	885b      	ldrh	r3, [r3, #2]
 800b392:	b2db      	uxtb	r3, r3
 800b394:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	791b      	ldrb	r3, [r3, #4]
 800b39a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	795b      	ldrb	r3, [r3, #5]
 800b3a0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	799b      	ldrb	r3, [r3, #6]
 800b3a6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	79db      	ldrb	r3, [r3, #7]
 800b3ac:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	7a1b      	ldrb	r3, [r3, #8]
 800b3b2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800b3b4:	7dbb      	ldrb	r3, [r7, #22]
 800b3b6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	7a9b      	ldrb	r3, [r3, #10]
 800b3bc:	753b      	strb	r3, [r7, #20]
        break;
 800b3be:	e022      	b.n	800b406 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	7b1b      	ldrb	r3, [r3, #12]
 800b3c8:	733b      	strb	r3, [r7, #12]
        break;
 800b3ca:	e01c      	b.n	800b406 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800b3cc:	2306      	movs	r3, #6
 800b3ce:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	89db      	ldrh	r3, [r3, #14]
 800b3d4:	0a1b      	lsrs	r3, r3, #8
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	89db      	ldrh	r3, [r3, #14]
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	7c1a      	ldrb	r2, [r3, #16]
 800b3e8:	4b0f      	ldr	r3, [pc, #60]	@ (800b428 <SUBGRF_SetPacketParams+0x138>)
 800b3ea:	4611      	mov	r1, r2
 800b3ec:	7019      	strb	r1, [r3, #0]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	7c5b      	ldrb	r3, [r3, #17]
 800b3f6:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	7c9b      	ldrb	r3, [r3, #18]
 800b3fc:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	7cdb      	ldrb	r3, [r3, #19]
 800b402:	747b      	strb	r3, [r7, #17]
        break;
 800b404:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800b406:	7dfb      	ldrb	r3, [r7, #23]
 800b408:	b29a      	uxth	r2, r3
 800b40a:	f107 030c 	add.w	r3, r7, #12
 800b40e:	4619      	mov	r1, r3
 800b410:	208c      	movs	r0, #140	@ 0x8c
 800b412:	f000 f965 	bl	800b6e0 <SUBGRF_WriteCommand>
 800b416:	e000      	b.n	800b41a <SUBGRF_SetPacketParams+0x12a>
        return;
 800b418:	bf00      	nop
}
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	08010ac4 	.word	0x08010ac4
 800b424:	2000860d 	.word	0x2000860d
 800b428:	2000860e 	.word	0x2000860e

0800b42c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	460a      	mov	r2, r1
 800b436:	71fb      	strb	r3, [r7, #7]
 800b438:	4613      	mov	r3, r2
 800b43a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800b43c:	79fb      	ldrb	r3, [r7, #7]
 800b43e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800b440:	79bb      	ldrb	r3, [r7, #6]
 800b442:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800b444:	f107 030c 	add.w	r3, r7, #12
 800b448:	2202      	movs	r2, #2
 800b44a:	4619      	mov	r1, r3
 800b44c:	208f      	movs	r0, #143	@ 0x8f
 800b44e:	f000 f947 	bl	800b6e0 <SUBGRF_WriteCommand>
}
 800b452:	bf00      	nop
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b082      	sub	sp, #8
 800b45e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800b460:	2300      	movs	r3, #0
 800b462:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800b464:	1d3b      	adds	r3, r7, #4
 800b466:	2201      	movs	r2, #1
 800b468:	4619      	mov	r1, r3
 800b46a:	2015      	movs	r0, #21
 800b46c:	f000 f95a 	bl	800b724 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800b470:	793b      	ldrb	r3, [r7, #4]
 800b472:	425b      	negs	r3, r3
 800b474:	105b      	asrs	r3, r3, #1
 800b476:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800b478:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800b48e:	f107 030c 	add.w	r3, r7, #12
 800b492:	2202      	movs	r2, #2
 800b494:	4619      	mov	r1, r3
 800b496:	2013      	movs	r0, #19
 800b498:	f000 f944 	bl	800b724 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800b49c:	f7ff fd7e 	bl	800af9c <SUBGRF_GetPacketType>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d10d      	bne.n	800b4c2 <SUBGRF_GetRxBufferStatus+0x3e>
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b4d8 <SUBGRF_GetRxBufferStatus+0x54>)
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d108      	bne.n	800b4c2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800b4b0:	f240 7002 	movw	r0, #1794	@ 0x702
 800b4b4:	f000 f878 	bl	800b5a8 <SUBGRF_ReadRegister>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	701a      	strb	r2, [r3, #0]
 800b4c0:	e002      	b.n	800b4c8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800b4c2:	7b3a      	ldrb	r2, [r7, #12]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800b4c8:	7b7a      	ldrb	r2, [r7, #13]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	701a      	strb	r2, [r3, #0]
}
 800b4ce:	bf00      	nop
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	2000860e 	.word	0x2000860e

0800b4dc <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800b4e4:	f107 030c 	add.w	r3, r7, #12
 800b4e8:	2203      	movs	r2, #3
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	2014      	movs	r0, #20
 800b4ee:	f000 f919 	bl	800b724 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800b4f2:	f7ff fd53 	bl	800af9c <SUBGRF_GetPacketType>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d002      	beq.n	800b50c <SUBGRF_GetPacketStatus+0x30>
 800b506:	2b01      	cmp	r3, #1
 800b508:	d013      	beq.n	800b532 <SUBGRF_GetPacketStatus+0x56>
 800b50a:	e02a      	b.n	800b562 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800b50c:	7b3a      	ldrb	r2, [r7, #12]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800b512:	7b7b      	ldrb	r3, [r7, #13]
 800b514:	425b      	negs	r3, r3
 800b516:	105b      	asrs	r3, r3, #1
 800b518:	b25a      	sxtb	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800b51e:	7bbb      	ldrb	r3, [r7, #14]
 800b520:	425b      	negs	r3, r3
 800b522:	105b      	asrs	r3, r3, #1
 800b524:	b25a      	sxtb	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	609a      	str	r2, [r3, #8]
            break;
 800b530:	e020      	b.n	800b574 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800b532:	7b3b      	ldrb	r3, [r7, #12]
 800b534:	425b      	negs	r3, r3
 800b536:	105b      	asrs	r3, r3, #1
 800b538:	b25a      	sxtb	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800b53e:	7b7b      	ldrb	r3, [r7, #13]
 800b540:	b25b      	sxtb	r3, r3
 800b542:	3302      	adds	r3, #2
 800b544:	109b      	asrs	r3, r3, #2
 800b546:	b25a      	sxtb	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800b54c:	7bbb      	ldrb	r3, [r7, #14]
 800b54e:	425b      	negs	r3, r3
 800b550:	105b      	asrs	r3, r3, #1
 800b552:	b25a      	sxtb	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800b558:	4b08      	ldr	r3, [pc, #32]	@ (800b57c <SUBGRF_GetPacketStatus+0xa0>)
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	611a      	str	r2, [r3, #16]
            break;
 800b560:	e008      	b.n	800b574 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800b562:	2214      	movs	r2, #20
 800b564:	2100      	movs	r1, #0
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f001 fb23 	bl	800cbb2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	220f      	movs	r2, #15
 800b570:	701a      	strb	r2, [r3, #0]
            break;
 800b572:	bf00      	nop
    }
}
 800b574:	bf00      	nop
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	20008610 	.word	0x20008610

0800b580 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	4603      	mov	r3, r0
 800b588:	460a      	mov	r2, r1
 800b58a:	80fb      	strh	r3, [r7, #6]
 800b58c:	4613      	mov	r3, r2
 800b58e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b590:	1d7a      	adds	r2, r7, #5
 800b592:	88f9      	ldrh	r1, [r7, #6]
 800b594:	2301      	movs	r3, #1
 800b596:	4803      	ldr	r0, [pc, #12]	@ (800b5a4 <SUBGRF_WriteRegister+0x24>)
 800b598:	f7fa fb16 	bl	8005bc8 <HAL_SUBGHZ_WriteRegisters>
}
 800b59c:	bf00      	nop
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	20008360 	.word	0x20008360

0800b5a8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800b5b2:	f107 020f 	add.w	r2, r7, #15
 800b5b6:	88f9      	ldrh	r1, [r7, #6]
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	4804      	ldr	r0, [pc, #16]	@ (800b5cc <SUBGRF_ReadRegister+0x24>)
 800b5bc:	f7fa fb63 	bl	8005c86 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20008360 	.word	0x20008360

0800b5d0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b086      	sub	sp, #24
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	6039      	str	r1, [r7, #0]
 800b5da:	80fb      	strh	r3, [r7, #6]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5e0:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b5e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5ea:	b672      	cpsid	i
}
 800b5ec:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800b5ee:	88bb      	ldrh	r3, [r7, #4]
 800b5f0:	88f9      	ldrh	r1, [r7, #6]
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	4806      	ldr	r0, [pc, #24]	@ (800b610 <SUBGRF_WriteRegisters+0x40>)
 800b5f6:	f7fa fae7 	bl	8005bc8 <HAL_SUBGHZ_WriteRegisters>
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	f383 8810 	msr	PRIMASK, r3
}
 800b604:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b606:	bf00      	nop
 800b608:	3718      	adds	r7, #24
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	20008360 	.word	0x20008360

0800b614 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b086      	sub	sp, #24
 800b618:	af00      	add	r7, sp, #0
 800b61a:	4603      	mov	r3, r0
 800b61c:	6039      	str	r1, [r7, #0]
 800b61e:	80fb      	strh	r3, [r7, #6]
 800b620:	4613      	mov	r3, r2
 800b622:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b624:	f3ef 8310 	mrs	r3, PRIMASK
 800b628:	60fb      	str	r3, [r7, #12]
  return(result);
 800b62a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b62c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b62e:	b672      	cpsid	i
}
 800b630:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800b632:	88bb      	ldrh	r3, [r7, #4]
 800b634:	88f9      	ldrh	r1, [r7, #6]
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	4806      	ldr	r0, [pc, #24]	@ (800b654 <SUBGRF_ReadRegisters+0x40>)
 800b63a:	f7fa fb24 	bl	8005c86 <HAL_SUBGHZ_ReadRegisters>
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	f383 8810 	msr	PRIMASK, r3
}
 800b648:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b64a:	bf00      	nop
 800b64c:	3718      	adds	r7, #24
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20008360 	.word	0x20008360

0800b658 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	4603      	mov	r3, r0
 800b660:	6039      	str	r1, [r7, #0]
 800b662:	71fb      	strb	r3, [r7, #7]
 800b664:	4613      	mov	r3, r2
 800b666:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b668:	f3ef 8310 	mrs	r3, PRIMASK
 800b66c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b66e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b670:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b672:	b672      	cpsid	i
}
 800b674:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800b676:	79bb      	ldrb	r3, [r7, #6]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	79f9      	ldrb	r1, [r7, #7]
 800b67c:	683a      	ldr	r2, [r7, #0]
 800b67e:	4806      	ldr	r0, [pc, #24]	@ (800b698 <SUBGRF_WriteBuffer+0x40>)
 800b680:	f7fa fc15 	bl	8005eae <HAL_SUBGHZ_WriteBuffer>
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	f383 8810 	msr	PRIMASK, r3
}
 800b68e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b690:	bf00      	nop
 800b692:	3718      	adds	r7, #24
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	20008360 	.word	0x20008360

0800b69c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	6039      	str	r1, [r7, #0]
 800b6a6:	71fb      	strb	r3, [r7, #7]
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b6b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b6b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6b6:	b672      	cpsid	i
}
 800b6b8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800b6ba:	79bb      	ldrb	r3, [r7, #6]
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	79f9      	ldrb	r1, [r7, #7]
 800b6c0:	683a      	ldr	r2, [r7, #0]
 800b6c2:	4806      	ldr	r0, [pc, #24]	@ (800b6dc <SUBGRF_ReadBuffer+0x40>)
 800b6c4:	f7fa fc46 	bl	8005f54 <HAL_SUBGHZ_ReadBuffer>
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f383 8810 	msr	PRIMASK, r3
}
 800b6d2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b6d4:	bf00      	nop
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	20008360 	.word	0x20008360

0800b6e0 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b086      	sub	sp, #24
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	6039      	str	r1, [r7, #0]
 800b6ea:	71fb      	strb	r3, [r7, #7]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6f0:	f3ef 8310 	mrs	r3, PRIMASK
 800b6f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b6f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6fa:	b672      	cpsid	i
}
 800b6fc:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b6fe:	88bb      	ldrh	r3, [r7, #4]
 800b700:	79f9      	ldrb	r1, [r7, #7]
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	4806      	ldr	r0, [pc, #24]	@ (800b720 <SUBGRF_WriteCommand+0x40>)
 800b706:	f7fa fb1f 	bl	8005d48 <HAL_SUBGHZ_ExecSetCmd>
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	f383 8810 	msr	PRIMASK, r3
}
 800b714:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b716:	bf00      	nop
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	20008360 	.word	0x20008360

0800b724 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	4603      	mov	r3, r0
 800b72c:	6039      	str	r1, [r7, #0]
 800b72e:	71fb      	strb	r3, [r7, #7]
 800b730:	4613      	mov	r3, r2
 800b732:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b734:	f3ef 8310 	mrs	r3, PRIMASK
 800b738:	60fb      	str	r3, [r7, #12]
  return(result);
 800b73a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b73c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b73e:	b672      	cpsid	i
}
 800b740:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800b742:	88bb      	ldrh	r3, [r7, #4]
 800b744:	79f9      	ldrb	r1, [r7, #7]
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	4806      	ldr	r0, [pc, #24]	@ (800b764 <SUBGRF_ReadCommand+0x40>)
 800b74a:	f7fa fb5c 	bl	8005e06 <HAL_SUBGHZ_ExecGetCmd>
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	f383 8810 	msr	PRIMASK, r3
}
 800b758:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b75a:	bf00      	nop
 800b75c:	3718      	adds	r7, #24
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	20008360 	.word	0x20008360

0800b768 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	4603      	mov	r3, r0
 800b770:	460a      	mov	r2, r1
 800b772:	71fb      	strb	r3, [r7, #7]
 800b774:	4613      	mov	r3, r2
 800b776:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800b778:	2301      	movs	r3, #1
 800b77a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800b77c:	79bb      	ldrb	r3, [r7, #6]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d10d      	bne.n	800b79e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800b782:	79fb      	ldrb	r3, [r7, #7]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d104      	bne.n	800b792 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800b788:	2302      	movs	r3, #2
 800b78a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800b78c:	2004      	movs	r0, #4
 800b78e:	f000 f8ef 	bl	800b970 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800b792:	79fb      	ldrb	r3, [r7, #7]
 800b794:	2b02      	cmp	r3, #2
 800b796:	d107      	bne.n	800b7a8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800b798:	2303      	movs	r3, #3
 800b79a:	73fb      	strb	r3, [r7, #15]
 800b79c:	e004      	b.n	800b7a8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800b79e:	79bb      	ldrb	r3, [r7, #6]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f001 f90a 	bl	800c9c4 <RBI_ConfigRFSwitch>
}
 800b7b0:	bf00      	nop
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800b7c6:	f001 f90b 	bl	800c9e0 <RBI_GetTxConfig>
 800b7ca:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d016      	beq.n	800b800 <SUBGRF_SetRfTxPower+0x48>
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	dc16      	bgt.n	800b806 <SUBGRF_SetRfTxPower+0x4e>
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <SUBGRF_SetRfTxPower+0x2e>
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d00a      	beq.n	800b7fa <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800b7e4:	e00f      	b.n	800b806 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800b7e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7ea:	2b0f      	cmp	r3, #15
 800b7ec:	dd02      	ble.n	800b7f4 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	73fb      	strb	r3, [r7, #15]
            break;
 800b7f2:	e009      	b.n	800b808 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	73fb      	strb	r3, [r7, #15]
            break;
 800b7f8:	e006      	b.n	800b808 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	73fb      	strb	r3, [r7, #15]
            break;
 800b7fe:	e003      	b.n	800b808 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800b800:	2302      	movs	r3, #2
 800b802:	73fb      	strb	r3, [r7, #15]
            break;
 800b804:	e000      	b.n	800b808 <SUBGRF_SetRfTxPower+0x50>
            break;
 800b806:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800b808:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
 800b80e:	2202      	movs	r2, #2
 800b810:	4618      	mov	r0, r3
 800b812:	f7ff fbcd 	bl	800afb0 <SUBGRF_SetTxParams>

    return paSelect;
 800b816:	7bfb      	ldrb	r3, [r7, #15]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800b820:	b480      	push	{r7}
 800b822:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800b824:	2301      	movs	r3, #1
}
 800b826:	4618      	mov	r0, r3
 800b828:	46bd      	mov	sp, r7
 800b82a:	bc80      	pop	{r7}
 800b82c:	4770      	bx	lr
	...

0800b830 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800b838:	4b03      	ldr	r3, [pc, #12]	@ (800b848 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2001      	movs	r0, #1
 800b83e:	4798      	blx	r3
}
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	20008618 	.word	0x20008618

0800b84c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800b854:	4b03      	ldr	r3, [pc, #12]	@ (800b864 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2002      	movs	r0, #2
 800b85a:	4798      	blx	r3
}
 800b85c:	bf00      	nop
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	20008618 	.word	0x20008618

0800b868 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800b870:	4b03      	ldr	r3, [pc, #12]	@ (800b880 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2040      	movs	r0, #64	@ 0x40
 800b876:	4798      	blx	r3
}
 800b878:	bf00      	nop
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	20008618 	.word	0x20008618

0800b884 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	460b      	mov	r3, r1
 800b88e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800b890:	78fb      	ldrb	r3, [r7, #3]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d002      	beq.n	800b89c <HAL_SUBGHZ_CADStatusCallback+0x18>
 800b896:	2b01      	cmp	r3, #1
 800b898:	d005      	beq.n	800b8a6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800b89a:	e00a      	b.n	800b8b2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800b89c:	4b07      	ldr	r3, [pc, #28]	@ (800b8bc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2080      	movs	r0, #128	@ 0x80
 800b8a2:	4798      	blx	r3
            break;
 800b8a4:	e005      	b.n	800b8b2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800b8a6:	4b05      	ldr	r3, [pc, #20]	@ (800b8bc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b8ae:	4798      	blx	r3
            break;
 800b8b0:	bf00      	nop
    }
}
 800b8b2:	bf00      	nop
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20008618 	.word	0x20008618

0800b8c0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800b8c8:	4b04      	ldr	r3, [pc, #16]	@ (800b8dc <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b8d0:	4798      	blx	r3
}
 800b8d2:	bf00      	nop
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	20008618 	.word	0x20008618

0800b8e0 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800b8e8:	4b03      	ldr	r3, [pc, #12]	@ (800b8f8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2020      	movs	r0, #32
 800b8ee:	4798      	blx	r3
}
 800b8f0:	bf00      	nop
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	20008618 	.word	0x20008618

0800b8fc <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800b904:	4b03      	ldr	r3, [pc, #12]	@ (800b914 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2004      	movs	r0, #4
 800b90a:	4798      	blx	r3
}
 800b90c:	bf00      	nop
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	20008618 	.word	0x20008618

0800b918 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800b920:	4b03      	ldr	r3, [pc, #12]	@ (800b930 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2008      	movs	r0, #8
 800b926:	4798      	blx	r3
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	20008618 	.word	0x20008618

0800b934 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800b93c:	4b03      	ldr	r3, [pc, #12]	@ (800b94c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2010      	movs	r0, #16
 800b942:	4798      	blx	r3
}
 800b944:	bf00      	nop
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	20008618 	.word	0x20008618

0800b950 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800b958:	4b04      	ldr	r3, [pc, #16]	@ (800b96c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b960:	4798      	blx	r3
}
 800b962:	bf00      	nop
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	20008618 	.word	0x20008618

0800b970 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	4603      	mov	r3, r0
 800b978:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800b97a:	f001 f83f 	bl	800c9fc <RBI_IsDCDC>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b01      	cmp	r3, #1
 800b982:	d112      	bne.n	800b9aa <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800b984:	f640 1023 	movw	r0, #2339	@ 0x923
 800b988:	f7ff fe0e 	bl	800b5a8 <SUBGRF_ReadRegister>
 800b98c:	4603      	mov	r3, r0
 800b98e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800b990:	7bfb      	ldrb	r3, [r7, #15]
 800b992:	f023 0306 	bic.w	r3, r3, #6
 800b996:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800b998:	7bfa      	ldrb	r2, [r7, #15]
 800b99a:	79fb      	ldrb	r3, [r7, #7]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	f640 1023 	movw	r0, #2339	@ 0x923
 800b9a6:	f7ff fdeb 	bl	800b580 <SUBGRF_WriteRegister>
  }
}
 800b9aa:	bf00      	nop
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
	...

0800b9b4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d101      	bne.n	800b9c6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800b9c2:	231f      	movs	r3, #31
 800b9c4:	e017      	b.n	800b9f6 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	73fb      	strb	r3, [r7, #15]
 800b9ca:	e00f      	b.n	800b9ec <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800b9cc:	7bfb      	ldrb	r3, [r7, #15]
 800b9ce:	4a0c      	ldr	r2, [pc, #48]	@ (800ba00 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b9d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d205      	bcs.n	800b9e6 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	4a08      	ldr	r2, [pc, #32]	@ (800ba00 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b9de:	00db      	lsls	r3, r3, #3
 800b9e0:	4413      	add	r3, r2
 800b9e2:	791b      	ldrb	r3, [r3, #4]
 800b9e4:	e007      	b.n	800b9f6 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b9e6:	7bfb      	ldrb	r3, [r7, #15]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	73fb      	strb	r3, [r7, #15]
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
 800b9ee:	2b15      	cmp	r3, #21
 800b9f0:	d9ec      	bls.n	800b9cc <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800b9f2:	bf00      	nop
 800b9f4:	e7fd      	b.n	800b9f2 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3714      	adds	r7, #20
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bc80      	pop	{r7}
 800b9fe:	4770      	bx	lr
 800ba00:	08011068 	.word	0x08011068

0800ba04 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b08a      	sub	sp, #40	@ 0x28
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800ba0e:	4b35      	ldr	r3, [pc, #212]	@ (800bae4 <SUBGRF_GetCFO+0xe0>)
 800ba10:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800ba12:	f640 0007 	movw	r0, #2055	@ 0x807
 800ba16:	f7ff fdc7 	bl	800b5a8 <SUBGRF_ReadRegister>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800ba1e:	7ffb      	ldrb	r3, [r7, #31]
 800ba20:	08db      	lsrs	r3, r3, #3
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	f003 0303 	and.w	r3, r3, #3
 800ba28:	3328      	adds	r3, #40	@ 0x28
 800ba2a:	443b      	add	r3, r7
 800ba2c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800ba30:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800ba32:	7ffb      	ldrb	r3, [r7, #31]
 800ba34:	f003 0307 	and.w	r3, r3, #7
 800ba38:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800ba3a:	7fba      	ldrb	r2, [r7, #30]
 800ba3c:	7f7b      	ldrb	r3, [r7, #29]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	fa02 f303 	lsl.w	r3, r2, r3
 800ba44:	461a      	mov	r2, r3
 800ba46:	4b28      	ldr	r3, [pc, #160]	@ (800bae8 <SUBGRF_GetCFO+0xe4>)
 800ba48:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba4c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800ba4e:	69ba      	ldr	r2, [r7, #24]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba56:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800ba5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	fb02 f303 	mul.w	r3, r2, r3
 800ba68:	2b07      	cmp	r3, #7
 800ba6a:	d802      	bhi.n	800ba72 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800ba72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	fb02 f303 	mul.w	r3, r2, r3
 800ba7c:	2b03      	cmp	r3, #3
 800ba7e:	d802      	bhi.n	800ba86 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800ba80:	2304      	movs	r3, #4
 800ba82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800ba86:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	fb02 f303 	mul.w	r3, r2, r3
 800ba90:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800ba92:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800ba96:	f7ff fd87 	bl	800b5a8 <SUBGRF_ReadRegister>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	021b      	lsls	r3, r3, #8
 800ba9e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800baa2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800baa4:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800baa8:	f7ff fd7e 	bl	800b5a8 <SUBGRF_ReadRegister>
 800baac:	4603      	mov	r3, r0
 800baae:	461a      	mov	r2, r3
 800bab0:	6a3b      	ldr	r3, [r7, #32]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800bab6:	6a3b      	ldr	r3, [r7, #32]
 800bab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800babc:	2b00      	cmp	r3, #0
 800babe:	d005      	beq.n	800bacc <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800bac0:	6a3b      	ldr	r3, [r7, #32]
 800bac2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bac6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800baca:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	095b      	lsrs	r3, r3, #5
 800bad0:	6a3a      	ldr	r2, [r7, #32]
 800bad2:	fb02 f303 	mul.w	r3, r2, r3
 800bad6:	11da      	asrs	r2, r3, #7
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	601a      	str	r2, [r3, #0]
}
 800badc:	bf00      	nop
 800bade:	3728      	adds	r7, #40	@ 0x28
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	0c0a0804 	.word	0x0c0a0804
 800bae8:	01e84800 	.word	0x01e84800

0800baec <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800baec:	b480      	push	{r7}
 800baee:	b087      	sub	sp, #28
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	4603      	mov	r3, r0
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
 800baf8:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800bafa:	2300      	movs	r3, #0
 800bafc:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800bafe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb02:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800bb04:	697b      	ldr	r3, [r7, #20]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	371c      	adds	r7, #28
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bc80      	pop	{r7}
 800bb0e:	4770      	bx	lr

0800bb10 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800bb10:	b480      	push	{r7}
 800bb12:	b087      	sub	sp, #28
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	4603      	mov	r3, r0
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800bb22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb26:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800bb28:	697b      	ldr	r3, [r7, #20]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	371c      	adds	r7, #28
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bc80      	pop	{r7}
 800bb32:	4770      	bx	lr

0800bb34 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800bb40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3714      	adds	r7, #20
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bc80      	pop	{r7}
 800bb4c:	4770      	bx	lr

0800bb4e <RFW_DeInit>:

void RFW_DeInit( void )
{
 800bb4e:	b480      	push	{r7}
 800bb50:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800bb52:	bf00      	nop
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bc80      	pop	{r7}
 800bb58:	4770      	bx	lr

0800bb5a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800bb5e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bc80      	pop	{r7}
 800bb66:	4770      	bx	lr

0800bb68 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800bb68:	b480      	push	{r7}
 800bb6a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800bb6c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bc80      	pop	{r7}
 800bb74:	4770      	bx	lr

0800bb76 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800bb80:	bf00      	nop
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bc80      	pop	{r7}
 800bb88:	4770      	bx	lr

0800bb8a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b087      	sub	sp, #28
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	460b      	mov	r3, r1
 800bb94:	607a      	str	r2, [r7, #4]
 800bb96:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800bb98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb9c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800bb9e:	697b      	ldr	r3, [r7, #20]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	371c      	adds	r7, #28
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bc80      	pop	{r7}
 800bba8:	4770      	bx	lr

0800bbaa <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800bbaa:	b480      	push	{r7}
 800bbac:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800bbae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bc80      	pop	{r7}
 800bbb8:	4770      	bx	lr

0800bbba <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800bbba:	b480      	push	{r7}
 800bbbc:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800bbbe:	bf00      	nop
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bc80      	pop	{r7}
 800bbc4:	4770      	bx	lr

0800bbc6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800bbca:	bf00      	nop
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bc80      	pop	{r7}
 800bbd0:	4770      	bx	lr

0800bbd2 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800bbd2:	b480      	push	{r7}
 800bbd4:	b083      	sub	sp, #12
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	4603      	mov	r3, r0
 800bbda:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bc80      	pop	{r7}
 800bbe4:	4770      	bx	lr

0800bbe6 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800bbea:	f7f5 ffeb 	bl	8001bc4 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800bbee:	f000 fa7d 	bl	800c0ec <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800bbf2:	bf00      	nop
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800bbfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbfe:	f001 facb 	bl	800d198 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800bc02:	bf00      	nop
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <dhc_log2_up_abs>:

    return res;
}

static uint8_t dhc_log2_up_abs(int16_t _value)
{
 800bc06:	b480      	push	{r7}
 800bc08:	b085      	sub	sp, #20
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	80fb      	strh	r3, [r7, #6]
    uint8_t res = 0;
 800bc10:	2300      	movs	r3, #0
 800bc12:	73fb      	strb	r3, [r7, #15]
    uint16_t value = (uint16_t) DHC_ABS(_value);
 800bc14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	da03      	bge.n	800bc24 <dhc_log2_up_abs+0x1e>
 800bc1c:	88fb      	ldrh	r3, [r7, #6]
 800bc1e:	425b      	negs	r3, r3
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	e000      	b.n	800bc26 <dhc_log2_up_abs+0x20>
 800bc24:	88fb      	ldrh	r3, [r7, #6]
 800bc26:	81bb      	strh	r3, [r7, #12]

    if(value)
 800bc28:	89bb      	ldrh	r3, [r7, #12]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d009      	beq.n	800bc42 <dhc_log2_up_abs+0x3c>
    {
        while(value)
 800bc2e:	e005      	b.n	800bc3c <dhc_log2_up_abs+0x36>
        {
            value = value >> 1;
 800bc30:	89bb      	ldrh	r3, [r7, #12]
 800bc32:	085b      	lsrs	r3, r3, #1
 800bc34:	81bb      	strh	r3, [r7, #12]
            res++;
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	73fb      	strb	r3, [r7, #15]
        while(value)
 800bc3c:	89bb      	ldrh	r3, [r7, #12]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1f6      	bne.n	800bc30 <dhc_log2_up_abs+0x2a>
        }
    }

    return res;
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3714      	adds	r7, #20
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bc80      	pop	{r7}
 800bc4c:	4770      	bx	lr

0800bc4e <dhc_pow2>:

static uint32_t dhc_pow2(uint8_t value)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b085      	sub	sp, #20
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	4603      	mov	r3, r0
 800bc56:	71fb      	strb	r3, [r7, #7]
    uint32_t pow = 1;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	60fb      	str	r3, [r7, #12]

    if(value)
 800bc5c:	79fb      	ldrb	r3, [r7, #7]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d009      	beq.n	800bc76 <dhc_pow2+0x28>
    {
        while(value)
 800bc62:	e005      	b.n	800bc70 <dhc_pow2+0x22>
        {
            value--;
 800bc64:	79fb      	ldrb	r3, [r7, #7]
 800bc66:	3b01      	subs	r3, #1
 800bc68:	71fb      	strb	r3, [r7, #7]
            pow = pow*2;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	005b      	lsls	r3, r3, #1
 800bc6e:	60fb      	str	r3, [r7, #12]
        while(value)
 800bc70:	79fb      	ldrb	r3, [r7, #7]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1f6      	bne.n	800bc64 <dhc_pow2+0x16>
        }
    }

    return pow;
 800bc76:	68fb      	ldr	r3, [r7, #12]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bc80      	pop	{r7}
 800bc80:	4770      	bx	lr

0800bc82 <dhc_hist_reset>:

static void dhc_hist_reset(uint32_t *hist, uint8_t *map)
{
 800bc82:	b480      	push	{r7}
 800bc84:	b085      	sub	sp, #20
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	6039      	str	r1, [r7, #0]
    for(size_t pos = 0 ; pos < DHC_TABLE_SIZE ; pos++)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	60fb      	str	r3, [r7, #12]
 800bc90:	e00e      	b.n	800bcb0 <dhc_hist_reset+0x2e>
    {
        hist[pos] = 0;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	4413      	add	r3, r2
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	601a      	str	r2, [r3, #0]
        map[pos] = pos;
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4413      	add	r3, r2
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	b2d2      	uxtb	r2, r2
 800bca8:	701a      	strb	r2, [r3, #0]
    for(size_t pos = 0 ; pos < DHC_TABLE_SIZE ; pos++)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	3301      	adds	r3, #1
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2b10      	cmp	r3, #16
 800bcb4:	d9ed      	bls.n	800bc92 <dhc_hist_reset+0x10>
    }
}
 800bcb6:	bf00      	nop
 800bcb8:	bf00      	nop
 800bcba:	3714      	adds	r7, #20
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bc80      	pop	{r7}
 800bcc0:	4770      	bx	lr

0800bcc2 <dhc_hist_update>:
static void dhc_hist_update(uint32_t *hist, uint8_t bin)
{
 800bcc2:	b480      	push	{r7}
 800bcc4:	b083      	sub	sp, #12
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
 800bcca:	460b      	mov	r3, r1
 800bccc:	70fb      	strb	r3, [r7, #3]
    hist[bin]++;
 800bcce:	78fb      	ldrb	r3, [r7, #3]
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	3201      	adds	r2, #1
 800bcda:	601a      	str	r2, [r3, #0]
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bc80      	pop	{r7}
 800bce4:	4770      	bx	lr

0800bce6 <dhc_hist_print>:

static void dhc_hist_print(uint32_t *hist, uint8_t *map)
{
 800bce6:	b480      	push	{r7}
 800bce8:	b083      	sub	sp, #12
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
 800bcee:	6039      	str	r1, [r7, #0]
        else {
            APP_PRINTF("[%02lu][%05u] %u (±%u±%u)\r\n",bin,dhc_pow2(bin),hist[bin],bin>0?dhc_pow2(bin-1):0,dhc_pow2(bin)-1);
        }
    }
#endif
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bc80      	pop	{r7}
 800bcf8:	4770      	bx	lr

0800bcfa <dhc_stream_init>:
    }
}
#endif

static void dhc_stream_init(dhc_stream_ctrl_t *ctrl, uint8_t *stream, uint16_t size, bool compress)
{
 800bcfa:	b480      	push	{r7}
 800bcfc:	b085      	sub	sp, #20
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	60f8      	str	r0, [r7, #12]
 800bd02:	60b9      	str	r1, [r7, #8]
 800bd04:	4611      	mov	r1, r2
 800bd06:	461a      	mov	r2, r3
 800bd08:	460b      	mov	r3, r1
 800bd0a:	80fb      	strh	r3, [r7, #6]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	717b      	strb	r3, [r7, #5]
    ctrl->stream = stream;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	601a      	str	r2, [r3, #0]
    ctrl->bit_pos = 0;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	719a      	strb	r2, [r3, #6]
    ctrl->byte_pos = 0;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	809a      	strh	r2, [r3, #4]

    if(compress)
 800bd22:	797b      	ldrb	r3, [r7, #5]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d003      	beq.n	800bd30 <dhc_stream_init+0x36>
        ctrl->stream[0] = 0;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	701a      	strb	r2, [r3, #0]
}
 800bd30:	bf00      	nop
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bc80      	pop	{r7}
 800bd38:	4770      	bx	lr

0800bd3a <dhc_stream_size_bits_get>:

static uint32_t dhc_stream_size_bits_get(dhc_stream_ctrl_t *ctrl)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b083      	sub	sp, #12
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
    return ctrl->byte_pos*8 + ctrl->bit_pos;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	889b      	ldrh	r3, [r3, #4]
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	7992      	ldrb	r2, [r2, #6]
 800bd4c:	4413      	add	r3, r2
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bc80      	pop	{r7}
 800bd56:	4770      	bx	lr

0800bd58 <dhc_stream_add>:

static void dhc_stream_add(dhc_stream_ctrl_t *ctrl, uint32_t bit_stream, uint8_t size)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b087      	sub	sp, #28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	4613      	mov	r3, r2
 800bd64:	71fb      	strb	r3, [r7, #7]
    uint8_t remain = size;
 800bd66:	79fb      	ldrb	r3, [r7, #7]
 800bd68:	75fb      	strb	r3, [r7, #23]

    if(size == 0)
 800bd6a:	79fb      	ldrb	r3, [r7, #7]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d06e      	beq.n	800be4e <dhc_stream_add+0xf6>
        return;

    ctrl->stream[ctrl->byte_pos] |= (uint8_t)(bit_stream << ctrl->bit_pos);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	8892      	ldrh	r2, [r2, #4]
 800bd78:	4413      	add	r3, r2
 800bd7a:	7819      	ldrb	r1, [r3, #0]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	799b      	ldrb	r3, [r3, #6]
 800bd80:	461a      	mov	r2, r3
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	4093      	lsls	r3, r2
 800bd86:	b2da      	uxtb	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	8880      	ldrh	r0, [r0, #4]
 800bd90:	4403      	add	r3, r0
 800bd92:	430a      	orrs	r2, r1
 800bd94:	b2d2      	uxtb	r2, r2
 800bd96:	701a      	strb	r2, [r3, #0]

    if(ctrl->bit_pos + size >= 8)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	799b      	ldrb	r3, [r3, #6]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	79fb      	ldrb	r3, [r7, #7]
 800bda0:	4413      	add	r3, r2
 800bda2:	2b07      	cmp	r3, #7
 800bda4:	dd1f      	ble.n	800bde6 <dhc_stream_add+0x8e>
    {
        remain -= (8-ctrl->bit_pos);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	799a      	ldrb	r2, [r3, #6]
 800bdaa:	7dfb      	ldrb	r3, [r7, #23]
 800bdac:	4413      	add	r3, r2
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	3b08      	subs	r3, #8
 800bdb2:	75fb      	strb	r3, [r7, #23]
        bit_stream >>= (8-ctrl->bit_pos);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	799b      	ldrb	r3, [r3, #6]
 800bdb8:	f1c3 0308 	rsb	r3, r3, #8
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc2:	60bb      	str	r3, [r7, #8]
        ctrl->bit_pos = 0;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	719a      	strb	r2, [r3, #6]
        ctrl->byte_pos++;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	889b      	ldrh	r3, [r3, #4]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	b29a      	uxth	r2, r3
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	809a      	strh	r2, [r3, #4]
        ctrl->stream[ctrl->byte_pos] = 0;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	8892      	ldrh	r2, [r2, #4]
 800bdde:	4413      	add	r3, r2
 800bde0:	2200      	movs	r2, #0
 800bde2:	701a      	strb	r2, [r3, #0]
 800bde4:	e02f      	b.n	800be46 <dhc_stream_add+0xee>
    }
    else
    {
        ctrl->bit_pos += size;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	799a      	ldrb	r2, [r3, #6]
 800bdea:	79fb      	ldrb	r3, [r7, #7]
 800bdec:	4413      	add	r3, r2
 800bdee:	b2da      	uxtb	r2, r3
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	719a      	strb	r2, [r3, #6]
        remain -= size;
 800bdf4:	7dfa      	ldrb	r2, [r7, #23]
 800bdf6:	79fb      	ldrb	r3, [r7, #7]
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	75fb      	strb	r3, [r7, #23]
    }

    while(remain)
 800bdfc:	e023      	b.n	800be46 <dhc_stream_add+0xee>
    {
        ctrl->stream[ctrl->byte_pos] = (uint8_t)(bit_stream);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	68fa      	ldr	r2, [r7, #12]
 800be04:	8892      	ldrh	r2, [r2, #4]
 800be06:	4413      	add	r3, r2
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	b2d2      	uxtb	r2, r2
 800be0c:	701a      	strb	r2, [r3, #0]

        if(remain < 8)
 800be0e:	7dfb      	ldrb	r3, [r7, #23]
 800be10:	2b07      	cmp	r3, #7
 800be12:	d805      	bhi.n	800be20 <dhc_stream_add+0xc8>
        {
            ctrl->bit_pos = remain;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	7dfa      	ldrb	r2, [r7, #23]
 800be18:	719a      	strb	r2, [r3, #6]
            remain = 0;
 800be1a:	2300      	movs	r3, #0
 800be1c:	75fb      	strb	r3, [r7, #23]
 800be1e:	e012      	b.n	800be46 <dhc_stream_add+0xee>
        }
        else
        {
            bit_stream >>= 8;
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	0a1b      	lsrs	r3, r3, #8
 800be24:	60bb      	str	r3, [r7, #8]
            remain -= 8;
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	3b08      	subs	r3, #8
 800be2a:	75fb      	strb	r3, [r7, #23]
            ctrl->byte_pos++;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	889b      	ldrh	r3, [r3, #4]
 800be30:	3301      	adds	r3, #1
 800be32:	b29a      	uxth	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	809a      	strh	r2, [r3, #4]
            ctrl->stream[ctrl->byte_pos] = 0;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	8892      	ldrh	r2, [r2, #4]
 800be40:	4413      	add	r3, r2
 800be42:	2200      	movs	r2, #0
 800be44:	701a      	strb	r2, [r3, #0]
    while(remain)
 800be46:	7dfb      	ldrb	r3, [r7, #23]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1d8      	bne.n	800bdfe <dhc_stream_add+0xa6>
 800be4c:	e000      	b.n	800be50 <dhc_stream_add+0xf8>
        return;
 800be4e:	bf00      	nop
        }
    }
}
 800be50:	371c      	adds	r7, #28
 800be52:	46bd      	mov	sp, r7
 800be54:	bc80      	pop	{r7}
 800be56:	4770      	bx	lr

0800be58 <dhc_compress>:

    return data;
}

bool dhc_compress(uint8_t *output, uint32_t *output_size_bits, int16_t *data, uint32_t size, uint8_t *map)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b08a      	sub	sp, #40	@ 0x28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
 800be64:	603b      	str	r3, [r7, #0]
    uint8_t bin;
    int16_t index;
    int16_t delta;
    int16_t prev_value;
    uint8_t map_bin;
    dhc_stream_ctrl_t ctrl =  { 0 };
 800be66:	f107 0310 	add.w	r3, r7, #16
 800be6a:	2200      	movs	r2, #0
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	605a      	str	r2, [r3, #4]
 800be70:	609a      	str	r2, [r3, #8]

    if((size < 1)||(data == 0)||(output == 0)||(output_size_bits == 0))
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d008      	beq.n	800be8a <dhc_compress+0x32>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d005      	beq.n	800be8a <dhc_compress+0x32>
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <dhc_compress+0x32>
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <dhc_compress+0x36>
        return false;
 800be8a:	2300      	movs	r3, #0
 800be8c:	e081      	b.n	800bf92 <dhc_compress+0x13a>

    dhc_stream_init(&ctrl,output,size,true);
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	b29a      	uxth	r2, r3
 800be92:	f107 0010 	add.w	r0, r7, #16
 800be96:	2301      	movs	r3, #1
 800be98:	68f9      	ldr	r1, [r7, #12]
 800be9a:	f7ff ff2e 	bl	800bcfa <dhc_stream_init>

    // data[-1] => should be central value among all possible discrete values
    // Worth the calc ?
    prev_value = 0;
 800be9e:	2300      	movs	r3, #0
 800bea0:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for(size_t pos = 0 ; pos < size ; pos++)
 800bea2:	2300      	movs	r3, #0
 800bea4:	623b      	str	r3, [r7, #32]
 800bea6:	e067      	b.n	800bf78 <dhc_compress+0x120>
    {
        delta = data[pos] - prev_value;
 800bea8:	6a3b      	ldr	r3, [r7, #32]
 800beaa:	005b      	lsls	r3, r3, #1
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	4413      	add	r3, r2
 800beb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	b29b      	uxth	r3, r3
 800bebc:	83fb      	strh	r3, [r7, #30]
        prev_value = data[pos];
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	005b      	lsls	r3, r3, #1
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	4413      	add	r3, r2
 800bec6:	881b      	ldrh	r3, [r3, #0]
 800bec8:	84bb      	strh	r3, [r7, #36]	@ 0x24
        bin = dhc_log2_up_abs(delta);
 800beca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff fe99 	bl	800bc06 <dhc_log2_up_abs>
 800bed4:	4603      	mov	r3, r0
 800bed6:	777b      	strb	r3, [r7, #29]

        if(delta >= 0)
 800bed8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	db02      	blt.n	800bee6 <dhc_compress+0x8e>
            index = delta;
 800bee0:	8bfb      	ldrh	r3, [r7, #30]
 800bee2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800bee4:	e013      	b.n	800bf0e <dhc_compress+0xb6>
        else
            index = dhc_pow2(bin) - 1 - DHC_ABS(delta);
 800bee6:	7f7b      	ldrb	r3, [r7, #29]
 800bee8:	4618      	mov	r0, r3
 800beea:	f7ff feb0 	bl	800bc4e <dhc_pow2>
 800beee:	4603      	mov	r3, r0
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	da03      	bge.n	800bf02 <dhc_compress+0xaa>
 800befa:	8bfb      	ldrh	r3, [r7, #30]
 800befc:	425b      	negs	r3, r3
 800befe:	b29b      	uxth	r3, r3
 800bf00:	e000      	b.n	800bf04 <dhc_compress+0xac>
 800bf02:	8bfb      	ldrh	r3, [r7, #30]
 800bf04:	1ad3      	subs	r3, r2, r3
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	84fb      	strh	r3, [r7, #38]	@ 0x26

        map_bin = map ? map[bin] : bin;
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d004      	beq.n	800bf1e <dhc_compress+0xc6>
 800bf14:	7f7b      	ldrb	r3, [r7, #29]
 800bf16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf18:	4413      	add	r3, r2
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	e000      	b.n	800bf20 <dhc_compress+0xc8>
 800bf1e:	7f7b      	ldrb	r3, [r7, #29]
 800bf20:	773b      	strb	r3, [r7, #28]
        dhc_index_print(index,dhc_table[bin].num_bits_index);
        APP_PRINTF(" (%d -> %d) (%d -> %d)\r\n",delta,index,bin,map_bin);
        fflush(stdout);
#endif

        dhc_stream_add(&ctrl,dhc_table[map_bin].value_prefix,dhc_table[map_bin].num_bits_prefix);
 800bf22:	7f3a      	ldrb	r2, [r7, #28]
 800bf24:	491d      	ldr	r1, [pc, #116]	@ (800bf9c <dhc_compress+0x144>)
 800bf26:	4613      	mov	r3, r2
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	4413      	add	r3, r2
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	440b      	add	r3, r1
 800bf30:	3304      	adds	r3, #4
 800bf32:	6819      	ldr	r1, [r3, #0]
 800bf34:	7f3a      	ldrb	r2, [r7, #28]
 800bf36:	4819      	ldr	r0, [pc, #100]	@ (800bf9c <dhc_compress+0x144>)
 800bf38:	4613      	mov	r3, r2
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	4413      	add	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4403      	add	r3, r0
 800bf42:	881b      	ldrh	r3, [r3, #0]
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	f107 0310 	add.w	r3, r7, #16
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7ff ff04 	bl	800bd58 <dhc_stream_add>
        dhc_stream_add(&ctrl,index,dhc_table[bin].num_bits_index);
 800bf50:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	@ 0x26
 800bf54:	7f7a      	ldrb	r2, [r7, #29]
 800bf56:	4811      	ldr	r0, [pc, #68]	@ (800bf9c <dhc_compress+0x144>)
 800bf58:	4613      	mov	r3, r2
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	4413      	add	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4403      	add	r3, r0
 800bf62:	3302      	adds	r3, #2
 800bf64:	881b      	ldrh	r3, [r3, #0]
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	f107 0310 	add.w	r3, r7, #16
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff fef3 	bl	800bd58 <dhc_stream_add>
    for(size_t pos = 0 ; pos < size ; pos++)
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	3301      	adds	r3, #1
 800bf76:	623b      	str	r3, [r7, #32]
 800bf78:	6a3a      	ldr	r2, [r7, #32]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d393      	bcc.n	800bea8 <dhc_compress+0x50>
    }

    *output_size_bits = dhc_stream_size_bits_get(&ctrl);
 800bf80:	f107 0310 	add.w	r3, r7, #16
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7ff fed8 	bl	800bd3a <dhc_stream_size_bits_get>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	601a      	str	r2, [r3, #0]

    return true;
 800bf90:	2301      	movs	r3, #1
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3728      	adds	r7, #40	@ 0x28
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	20000010 	.word	0x20000010

0800bfa0 <dhc_compress_evaluate>:

float dhc_compress_evaluate(int16_t *data, uint32_t size, uint32_t *compressed_size_in_bits, uint8_t *map)
{
 800bfa0:	b5b0      	push	{r4, r5, r7, lr}
 800bfa2:	b0a0      	sub	sp, #128	@ 0x80
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]
 800bfac:	603b      	str	r3, [r7, #0]
    int16_t prev_value;
    uint32_t hist[DHC_TABLE_SIZE];
    uint8_t map_bin[DHC_TABLE_SIZE];
    // int16_t index;

    if((size < 1)||(data == 0))
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d002      	beq.n	800bfba <dhc_compress_evaluate+0x1a>
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d102      	bne.n	800bfc0 <dhc_compress_evaluate+0x20>
        return 0.0;
 800bfba:	f04f 0300 	mov.w	r3, #0
 800bfbe:	e08c      	b.n	800c0da <dhc_compress_evaluate+0x13a>

    dhc_hist_reset(hist,map_bin);
 800bfc0:	f107 0210 	add.w	r2, r7, #16
 800bfc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfc8:	4611      	mov	r1, r2
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7ff fe59 	bl	800bc82 <dhc_hist_reset>

    uint32_t total_bits = 0;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint32_t compressed_bits = 0;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	677b      	str	r3, [r7, #116]	@ 0x74

    // data[-1] => should be central value among all possible discrete values
    // Worth the calc ?
    prev_value = 0;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

    for(size_t pos = 0 ; pos < size ; pos++)
 800bfde:	2300      	movs	r3, #0
 800bfe0:	673b      	str	r3, [r7, #112]	@ 0x70
 800bfe2:	e042      	b.n	800c06a <dhc_compress_evaluate+0xca>
    {
        delta = data[pos] - prev_value;
 800bfe4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfe6:	005b      	lsls	r3, r3, #1
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	4413      	add	r3, r2
 800bfec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
        prev_value = data[pos];
 800bffe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c000:	005b      	lsls	r3, r3, #1
 800c002:	68fa      	ldr	r2, [r7, #12]
 800c004:	4413      	add	r3, r2
 800c006:	881b      	ldrh	r3, [r3, #0]
 800c008:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
        bin = dhc_log2_up_abs(delta);
 800c00c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 800c010:	4618      	mov	r0, r3
 800c012:	f7ff fdf8 	bl	800bc06 <dhc_log2_up_abs>
 800c016:	4603      	mov	r3, r0
 800c018:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
        dhc_hist_update(hist,bin);
 800c01c:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 800c020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c024:	4611      	mov	r1, r2
 800c026:	4618      	mov	r0, r3
 800c028:	f7ff fe4b 	bl	800bcc2 <dhc_hist_update>

        total_bits += 16;
 800c02c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c02e:	3310      	adds	r3, #16
 800c030:	67bb      	str	r3, [r7, #120]	@ 0x78
        compressed_bits += dhc_table[bin].num_bits_prefix + dhc_table[bin].num_bits_index;
 800c032:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 800c036:	492b      	ldr	r1, [pc, #172]	@ (800c0e4 <dhc_compress_evaluate+0x144>)
 800c038:	4613      	mov	r3, r2
 800c03a:	005b      	lsls	r3, r3, #1
 800c03c:	4413      	add	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	440b      	add	r3, r1
 800c042:	881b      	ldrh	r3, [r3, #0]
 800c044:	4618      	mov	r0, r3
 800c046:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 800c04a:	4926      	ldr	r1, [pc, #152]	@ (800c0e4 <dhc_compress_evaluate+0x144>)
 800c04c:	4613      	mov	r3, r2
 800c04e:	005b      	lsls	r3, r3, #1
 800c050:	4413      	add	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	440b      	add	r3, r1
 800c056:	3302      	adds	r3, #2
 800c058:	881b      	ldrh	r3, [r3, #0]
 800c05a:	4403      	add	r3, r0
 800c05c:	461a      	mov	r2, r3
 800c05e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c060:	4413      	add	r3, r2
 800c062:	677b      	str	r3, [r7, #116]	@ 0x74
    for(size_t pos = 0 ; pos < size ; pos++)
 800c064:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c066:	3301      	adds	r3, #1
 800c068:	673b      	str	r3, [r7, #112]	@ 0x70
 800c06a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d3b8      	bcc.n	800bfe4 <dhc_compress_evaluate+0x44>
    }

    dhc_hist_print(hist,0);
 800c072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c076:	2100      	movs	r1, #0
 800c078:	4618      	mov	r0, r3
 800c07a:	f7ff fe34 	bl	800bce6 <dhc_hist_print>

    float compress_rate = 100.0*((float)total_bits-compressed_bits)/total_bits;
 800c07e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800c080:	f7f4 fe70 	bl	8000d64 <__aeabi_ui2f>
 800c084:	4604      	mov	r4, r0
 800c086:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800c088:	f7f4 fe6c 	bl	8000d64 <__aeabi_ui2f>
 800c08c:	4603      	mov	r3, r0
 800c08e:	4619      	mov	r1, r3
 800c090:	4620      	mov	r0, r4
 800c092:	f7f4 fdb5 	bl	8000c00 <__aeabi_fsub>
 800c096:	4603      	mov	r3, r0
 800c098:	4618      	mov	r0, r3
 800c09a:	f7f4 fa2d 	bl	80004f8 <__aeabi_f2d>
 800c09e:	f04f 0200 	mov.w	r2, #0
 800c0a2:	4b11      	ldr	r3, [pc, #68]	@ (800c0e8 <dhc_compress_evaluate+0x148>)
 800c0a4:	f7f4 fa80 	bl	80005a8 <__aeabi_dmul>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4614      	mov	r4, r2
 800c0ae:	461d      	mov	r5, r3
 800c0b0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800c0b2:	f7f4 f9ff 	bl	80004b4 <__aeabi_ui2d>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	4629      	mov	r1, r5
 800c0be:	f7f4 fb9d 	bl	80007fc <__aeabi_ddiv>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4610      	mov	r0, r2
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	f7f4 fd45 	bl	8000b58 <__aeabi_d2f>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
//#if DHC_DEBUG == 1
//        APP_PRINTF("Sorted mapping: %d bits -> %d bits (compressed by %2.2f%%)\r\n",total_bits,compressed_bits,compress_rate);
//#endif
//    }

    *compressed_size_in_bits = compressed_bits;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c0d6:	601a      	str	r2, [r3, #0]

    return compress_rate;
 800c0d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3780      	adds	r7, #128	@ 0x80
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bdb0      	pop	{r4, r5, r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	20000010 	.word	0x20000010
 800c0e8:	40590000 	.word	0x40590000

0800c0ec <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800c0ec:	b590      	push	{r4, r7, lr}
 800c0ee:	b08b      	sub	sp, #44	@ 0x2c
 800c0f0:	af0a      	add	r7, sp, #40	@ 0x28
//  APP_LOG(TS_OFF, VLEVEL_M, "CODING RATE=%d \n\r", LORA_CODINGRATE);

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800c0f2:	4b7f      	ldr	r3, [pc, #508]	@ (800c2f0 <SubghzApp_Init+0x204>)
 800c0f4:	4a7f      	ldr	r2, [pc, #508]	@ (800c2f4 <SubghzApp_Init+0x208>)
 800c0f6:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800c0f8:	4b7d      	ldr	r3, [pc, #500]	@ (800c2f0 <SubghzApp_Init+0x204>)
 800c0fa:	4a7f      	ldr	r2, [pc, #508]	@ (800c2f8 <SubghzApp_Init+0x20c>)
 800c0fc:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800c0fe:	4b7c      	ldr	r3, [pc, #496]	@ (800c2f0 <SubghzApp_Init+0x204>)
 800c100:	4a7e      	ldr	r2, [pc, #504]	@ (800c2fc <SubghzApp_Init+0x210>)
 800c102:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800c104:	4b7a      	ldr	r3, [pc, #488]	@ (800c2f0 <SubghzApp_Init+0x204>)
 800c106:	4a7e      	ldr	r2, [pc, #504]	@ (800c300 <SubghzApp_Init+0x214>)
 800c108:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800c10a:	4b79      	ldr	r3, [pc, #484]	@ (800c2f0 <SubghzApp_Init+0x204>)
 800c10c:	4a7d      	ldr	r2, [pc, #500]	@ (800c304 <SubghzApp_Init+0x218>)
 800c10e:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800c110:	4b7d      	ldr	r3, [pc, #500]	@ (800c308 <SubghzApp_Init+0x21c>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4876      	ldr	r0, [pc, #472]	@ (800c2f0 <SubghzApp_Init+0x204>)
 800c116:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
	  /* Radio Set frequency */
	  Radio.SetChannel(RF_FREQUENCY);
 800c118:	4b7b      	ldr	r3, [pc, #492]	@ (800c308 <SubghzApp_Init+0x21c>)
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	487b      	ldr	r0, [pc, #492]	@ (800c30c <SubghzApp_Init+0x220>)
 800c11e:	4798      	blx	r3

	  data_offset = 0;
 800c120:	4b7b      	ldr	r3, [pc, #492]	@ (800c310 <SubghzApp_Init+0x224>)
 800c122:	2200      	movs	r2, #0
 800c124:	801a      	strh	r2, [r3, #0]


//#if (TEST_MODE == RADIO_RX) //both nodes will have to Tx and Rx for ACKs

	  if (spreading_factor_values[j] < 9) {
 800c126:	4b7b      	ldr	r3, [pc, #492]	@ (800c314 <SubghzApp_Init+0x228>)
 800c128:	f993 3000 	ldrsb.w	r3, [r3]
 800c12c:	461a      	mov	r2, r3
 800c12e:	4b7a      	ldr	r3, [pc, #488]	@ (800c318 <SubghzApp_Init+0x22c>)
 800c130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c134:	2b08      	cmp	r3, #8
 800c136:	d803      	bhi.n	800c140 <SubghzApp_Init+0x54>
		  max_buffer = 255;
 800c138:	4b78      	ldr	r3, [pc, #480]	@ (800c31c <SubghzApp_Init+0x230>)
 800c13a:	22ff      	movs	r2, #255	@ 0xff
 800c13c:	601a      	str	r2, [r3, #0]
 800c13e:	e00f      	b.n	800c160 <SubghzApp_Init+0x74>
	  }
	  else if (spreading_factor_values[j] == 9) {
 800c140:	4b74      	ldr	r3, [pc, #464]	@ (800c314 <SubghzApp_Init+0x228>)
 800c142:	f993 3000 	ldrsb.w	r3, [r3]
 800c146:	461a      	mov	r2, r3
 800c148:	4b73      	ldr	r3, [pc, #460]	@ (800c318 <SubghzApp_Init+0x22c>)
 800c14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14e:	2b09      	cmp	r3, #9
 800c150:	d103      	bne.n	800c15a <SubghzApp_Init+0x6e>
		  max_buffer = 115;
 800c152:	4b72      	ldr	r3, [pc, #456]	@ (800c31c <SubghzApp_Init+0x230>)
 800c154:	2273      	movs	r2, #115	@ 0x73
 800c156:	601a      	str	r2, [r3, #0]
 800c158:	e002      	b.n	800c160 <SubghzApp_Init+0x74>
	  }
	  else {
		  max_buffer = 50;
 800c15a:	4b70      	ldr	r3, [pc, #448]	@ (800c31c <SubghzApp_Init+0x230>)
 800c15c:	2232      	movs	r2, #50	@ 0x32
 800c15e:	601a      	str	r2, [r3, #0]
	  }

	  payload_var =  max_buffer - 5; //5 bytes of headers/other info
 800c160:	4b6e      	ldr	r3, [pc, #440]	@ (800c31c <SubghzApp_Init+0x230>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	3b05      	subs	r3, #5
 800c166:	4a6e      	ldr	r2, [pc, #440]	@ (800c320 <SubghzApp_Init+0x234>)
 800c168:	6013      	str	r3, [r2, #0]
	  RX_TIMEOUT_VALUE = RX_TIMEOUT_BASE + (RX_TIMEOUT_SF_FACTOR * (LORA_SPREADING_FACTOR - 7));
 800c16a:	4b6e      	ldr	r3, [pc, #440]	@ (800c324 <SubghzApp_Init+0x238>)
 800c16c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800c170:	601a      	str	r2, [r3, #0]
	  TX_TIMEOUT_VALUE = RX_TIMEOUT_VALUE - RX_TIMEOUT_SF_FACTOR;
 800c172:	4b6c      	ldr	r3, [pc, #432]	@ (800c324 <SubghzApp_Init+0x238>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800c17a:	4a6b      	ldr	r2, [pc, #428]	@ (800c328 <SubghzApp_Init+0x23c>)
 800c17c:	6013      	str	r3, [r2, #0]

	  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, spreading_factor_values[j],
 800c17e:	4b62      	ldr	r3, [pc, #392]	@ (800c308 <SubghzApp_Init+0x21c>)
 800c180:	699c      	ldr	r4, [r3, #24]
 800c182:	4b64      	ldr	r3, [pc, #400]	@ (800c314 <SubghzApp_Init+0x228>)
 800c184:	f993 3000 	ldrsb.w	r3, [r3]
 800c188:	461a      	mov	r2, r3
 800c18a:	4b63      	ldr	r3, [pc, #396]	@ (800c318 <SubghzApp_Init+0x22c>)
 800c18c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c190:	4b66      	ldr	r3, [pc, #408]	@ (800c32c <SubghzApp_Init+0x240>)
 800c192:	f993 3000 	ldrsb.w	r3, [r3]
 800c196:	4619      	mov	r1, r3
 800c198:	4b65      	ldr	r3, [pc, #404]	@ (800c330 <SubghzApp_Init+0x244>)
 800c19a:	5c5b      	ldrb	r3, [r3, r1]
 800c19c:	2101      	movs	r1, #1
 800c19e:	9109      	str	r1, [sp, #36]	@ 0x24
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	9108      	str	r1, [sp, #32]
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	9107      	str	r1, [sp, #28]
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	9106      	str	r1, [sp, #24]
 800c1ac:	2101      	movs	r1, #1
 800c1ae:	9105      	str	r1, [sp, #20]
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	9104      	str	r1, [sp, #16]
 800c1b4:	2100      	movs	r1, #0
 800c1b6:	9103      	str	r1, [sp, #12]
 800c1b8:	2105      	movs	r1, #5
 800c1ba:	9102      	str	r1, [sp, #8]
 800c1bc:	2108      	movs	r1, #8
 800c1be:	9101      	str	r1, [sp, #4]
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	9100      	str	r1, [sp, #0]
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	47a0      	blx	r4
						coding_rate_values[k], 0, LORA_PREAMBLE_LENGTH,
						LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
						0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

//	  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
	  Radio.SetMaxPayloadLength(MODEM_LORA, max_buffer);
 800c1ca:	4b4f      	ldr	r3, [pc, #316]	@ (800c308 <SubghzApp_Init+0x21c>)
 800c1cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1ce:	4a53      	ldr	r2, [pc, #332]	@ (800c31c <SubghzApp_Init+0x230>)
 800c1d0:	6812      	ldr	r2, [r2, #0]
 800c1d2:	b2d2      	uxtb	r2, r2
 800c1d4:	4611      	mov	r1, r2
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	4798      	blx	r3

//	#elif (TEST_MODE == RADIO_TX)
	  //APP_PRINTF("Tx LORA Test\r\n");

	  Radio.SetTxConfig(MODEM_LORA, tx_power_values[l], 0, LORA_BANDWIDTH,
 800c1da:	4b4b      	ldr	r3, [pc, #300]	@ (800c308 <SubghzApp_Init+0x21c>)
 800c1dc:	69dc      	ldr	r4, [r3, #28]
 800c1de:	4b55      	ldr	r3, [pc, #340]	@ (800c334 <SubghzApp_Init+0x248>)
 800c1e0:	f993 3000 	ldrsb.w	r3, [r3]
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	4b54      	ldr	r3, [pc, #336]	@ (800c338 <SubghzApp_Init+0x24c>)
 800c1e8:	5c9b      	ldrb	r3, [r3, r2]
 800c1ea:	b258      	sxtb	r0, r3
 800c1ec:	4b49      	ldr	r3, [pc, #292]	@ (800c314 <SubghzApp_Init+0x228>)
 800c1ee:	f993 3000 	ldrsb.w	r3, [r3]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	4b48      	ldr	r3, [pc, #288]	@ (800c318 <SubghzApp_Init+0x22c>)
 800c1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1fa:	4a4c      	ldr	r2, [pc, #304]	@ (800c32c <SubghzApp_Init+0x240>)
 800c1fc:	f992 2000 	ldrsb.w	r2, [r2]
 800c200:	4611      	mov	r1, r2
 800c202:	4a4b      	ldr	r2, [pc, #300]	@ (800c330 <SubghzApp_Init+0x244>)
 800c204:	5c52      	ldrb	r2, [r2, r1]
 800c206:	4948      	ldr	r1, [pc, #288]	@ (800c328 <SubghzApp_Init+0x23c>)
 800c208:	6809      	ldr	r1, [r1, #0]
 800c20a:	9108      	str	r1, [sp, #32]
 800c20c:	2100      	movs	r1, #0
 800c20e:	9107      	str	r1, [sp, #28]
 800c210:	2100      	movs	r1, #0
 800c212:	9106      	str	r1, [sp, #24]
 800c214:	2100      	movs	r1, #0
 800c216:	9105      	str	r1, [sp, #20]
 800c218:	2101      	movs	r1, #1
 800c21a:	9104      	str	r1, [sp, #16]
 800c21c:	2100      	movs	r1, #0
 800c21e:	9103      	str	r1, [sp, #12]
 800c220:	2108      	movs	r1, #8
 800c222:	9102      	str	r1, [sp, #8]
 800c224:	9201      	str	r2, [sp, #4]
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	2300      	movs	r3, #0
 800c22a:	2200      	movs	r2, #0
 800c22c:	4601      	mov	r1, r0
 800c22e:	2001      	movs	r0, #1
 800c230:	47a0      	blx	r4

//	  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);

	  //Radio.Send(data_buffer, payloadLen);
//	  uint32_t time_on_air = Radio.TimeOnAir(1, LORA_BANDWIDTH, spreading_factor_values[j], coding_rate_values[k], 8, 0, payloadLen, true);
	  time_on_air = Radio.TimeOnAir(1, LORA_BANDWIDTH, spreading_factor_values[j], coding_rate_values[k], 8, 0, max_buffer, true);
 800c232:	4b35      	ldr	r3, [pc, #212]	@ (800c308 <SubghzApp_Init+0x21c>)
 800c234:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c236:	4b37      	ldr	r3, [pc, #220]	@ (800c314 <SubghzApp_Init+0x228>)
 800c238:	f993 3000 	ldrsb.w	r3, [r3]
 800c23c:	461a      	mov	r2, r3
 800c23e:	4b36      	ldr	r3, [pc, #216]	@ (800c318 <SubghzApp_Init+0x22c>)
 800c240:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c244:	4b39      	ldr	r3, [pc, #228]	@ (800c32c <SubghzApp_Init+0x240>)
 800c246:	f993 3000 	ldrsb.w	r3, [r3]
 800c24a:	4619      	mov	r1, r3
 800c24c:	4b38      	ldr	r3, [pc, #224]	@ (800c330 <SubghzApp_Init+0x244>)
 800c24e:	5c59      	ldrb	r1, [r3, r1]
 800c250:	4b32      	ldr	r3, [pc, #200]	@ (800c31c <SubghzApp_Init+0x230>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	b2db      	uxtb	r3, r3
 800c256:	2001      	movs	r0, #1
 800c258:	9003      	str	r0, [sp, #12]
 800c25a:	9302      	str	r3, [sp, #8]
 800c25c:	2300      	movs	r3, #0
 800c25e:	9301      	str	r3, [sp, #4]
 800c260:	2308      	movs	r3, #8
 800c262:	9300      	str	r3, [sp, #0]
 800c264:	460b      	mov	r3, r1
 800c266:	2100      	movs	r1, #0
 800c268:	2001      	movs	r0, #1
 800c26a:	47a0      	blx	r4
 800c26c:	4603      	mov	r3, r0
 800c26e:	4a33      	ldr	r2, [pc, #204]	@ (800c33c <SubghzApp_Init+0x250>)
 800c270:	6013      	str	r3, [r2, #0]
	  delay_on_air = time_on_air/2;
 800c272:	4b32      	ldr	r3, [pc, #200]	@ (800c33c <SubghzApp_Init+0x250>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	085b      	lsrs	r3, r3, #1
 800c278:	4a31      	ldr	r2, [pc, #196]	@ (800c340 <SubghzApp_Init+0x254>)
 800c27a:	6013      	str	r3, [r2, #0]
//	  else {
//		  delay_on_air = 100;
//	  }


	  APP_PRINTF("\nNew test. SF: %d, CR: %d, Tx Power: %d, Toa: %d \r\n", spreading_factor_values[j], coding_rate_values[k], tx_power_values[l], time_on_air);
 800c27c:	4b25      	ldr	r3, [pc, #148]	@ (800c314 <SubghzApp_Init+0x228>)
 800c27e:	f993 3000 	ldrsb.w	r3, [r3]
 800c282:	461a      	mov	r2, r3
 800c284:	4b24      	ldr	r3, [pc, #144]	@ (800c318 <SubghzApp_Init+0x22c>)
 800c286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c28a:	4a28      	ldr	r2, [pc, #160]	@ (800c32c <SubghzApp_Init+0x240>)
 800c28c:	f992 2000 	ldrsb.w	r2, [r2]
 800c290:	4611      	mov	r1, r2
 800c292:	4a27      	ldr	r2, [pc, #156]	@ (800c330 <SubghzApp_Init+0x244>)
 800c294:	5c52      	ldrb	r2, [r2, r1]
 800c296:	4611      	mov	r1, r2
 800c298:	4a26      	ldr	r2, [pc, #152]	@ (800c334 <SubghzApp_Init+0x248>)
 800c29a:	f992 2000 	ldrsb.w	r2, [r2]
 800c29e:	4610      	mov	r0, r2
 800c2a0:	4a25      	ldr	r2, [pc, #148]	@ (800c338 <SubghzApp_Init+0x24c>)
 800c2a2:	5c12      	ldrb	r2, [r2, r0]
 800c2a4:	4610      	mov	r0, r2
 800c2a6:	4a25      	ldr	r2, [pc, #148]	@ (800c33c <SubghzApp_Init+0x250>)
 800c2a8:	6812      	ldr	r2, [r2, #0]
 800c2aa:	9203      	str	r2, [sp, #12]
 800c2ac:	9002      	str	r0, [sp, #8]
 800c2ae:	9101      	str	r1, [sp, #4]
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	4b24      	ldr	r3, [pc, #144]	@ (800c344 <SubghzApp_Init+0x258>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	2100      	movs	r1, #0
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	f001 fba7 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
	  //Reset experiment vals
	  tx_packets = 0;
 800c2be:	4b22      	ldr	r3, [pc, #136]	@ (800c348 <SubghzApp_Init+0x25c>)
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	601a      	str	r2, [r3, #0]
	  retx_packets = 0;
 800c2c4:	4b21      	ldr	r3, [pc, #132]	@ (800c34c <SubghzApp_Init+0x260>)
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	601a      	str	r2, [r3, #0]
	  count_RxOk = 0;
 800c2ca:	4b21      	ldr	r3, [pc, #132]	@ (800c350 <SubghzApp_Init+0x264>)
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	601a      	str	r2, [r3, #0]
	  count_RxKo = 0;
 800c2d0:	4b20      	ldr	r3, [pc, #128]	@ (800c354 <SubghzApp_Init+0x268>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]
	  PER = 0;
 800c2d6:	4b20      	ldr	r3, [pc, #128]	@ (800c358 <SubghzApp_Init+0x26c>)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	601a      	str	r2, [r3, #0]
//	  APP_PRINTF("Rx LORA Test\r\n");
	  Radio.Rx(RX_TIMEOUT_VALUE);
#endif
//  APP_PRINTF("Start data log: 0D 0A\r\n");
  /*register task to to be run in while(1) after Radio IT*/
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, Rx_Process);
 800c2dc:	4a1f      	ldr	r2, [pc, #124]	@ (800c35c <SubghzApp_Init+0x270>)
 800c2de:	2100      	movs	r1, #0
 800c2e0:	2001      	movs	r0, #1
 800c2e2:	f001 f855 	bl	800d390 <UTIL_SEQ_RegTask>

  /* USER CODE END SubghzApp_Init_2 */
}
 800c2e6:	bf00      	nop
 800c2e8:	3704      	adds	r7, #4
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd90      	pop	{r4, r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	2000861c 	.word	0x2000861c
 800c2f4:	0800c785 	.word	0x0800c785
 800c2f8:	0800c79d 	.word	0x0800c79d
 800c2fc:	0800c815 	.word	0x0800c815
 800c300:	0800c839 	.word	0x0800c839
 800c304:	0800c85d 	.word	0x0800c85d
 800c308:	08010fd8 	.word	0x08010fd8
 800c30c:	1b6369e0 	.word	0x1b6369e0
 800c310:	20008754 	.word	0x20008754
 800c314:	2000886c 	.word	0x2000886c
 800c318:	200040e4 	.word	0x200040e4
 800c31c:	20008878 	.word	0x20008878
 800c320:	2000887c 	.word	0x2000887c
 800c324:	20008880 	.word	0x20008880
 800c328:	20008884 	.word	0x20008884
 800c32c:	2000886d 	.word	0x2000886d
 800c330:	200040f4 	.word	0x200040f4
 800c334:	2000886e 	.word	0x2000886e
 800c338:	200040f8 	.word	0x200040f8
 800c33c:	20008888 	.word	0x20008888
 800c340:	20008758 	.word	0x20008758
 800c344:	08010b6c 	.word	0x08010b6c
 800c348:	20008870 	.word	0x20008870
 800c34c:	20008874 	.word	0x20008874
 800c350:	2000875c 	.word	0x2000875c
 800c354:	20008760 	.word	0x20008760
 800c358:	20008764 	.word	0x20008764
 800c35c:	0800c879 	.word	0x0800c879

0800c360 <Tx_Compressed>:

/* USER CODE BEGIN EF */
bool Tx_Compressed(uint8_t* compressed_data, uint32_t compressed_size_bits, int8_t data_type, int8_t sf_i, int8_t cr_i, int8_t txp_i){
 800c360:	b580      	push	{r7, lr}
 800c362:	b090      	sub	sp, #64	@ 0x40
 800c364:	af02      	add	r7, sp, #8
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	4611      	mov	r1, r2
 800c36c:	461a      	mov	r2, r3
 800c36e:	460b      	mov	r3, r1
 800c370:	71fb      	strb	r3, [r7, #7]
 800c372:	4613      	mov	r3, r2
 800c374:	71bb      	strb	r3, [r7, #6]
	j = sf_i;
 800c376:	4a91      	ldr	r2, [pc, #580]	@ (800c5bc <Tx_Compressed+0x25c>)
 800c378:	79bb      	ldrb	r3, [r7, #6]
 800c37a:	7013      	strb	r3, [r2, #0]
	k = cr_i;
 800c37c:	4a90      	ldr	r2, [pc, #576]	@ (800c5c0 <Tx_Compressed+0x260>)
 800c37e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800c382:	7013      	strb	r3, [r2, #0]
	l = txp_i;
 800c384:	4a8f      	ldr	r2, [pc, #572]	@ (800c5c4 <Tx_Compressed+0x264>)
 800c386:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800c38a:	7013      	strb	r3, [r2, #0]
	SubghzApp_Init();
 800c38c:	f7ff feae 	bl	800c0ec <SubghzApp_Init>
	APP_PRINTF("Sending data type %d", data_type);
 800c390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	4b8c      	ldr	r3, [pc, #560]	@ (800c5c8 <Tx_Compressed+0x268>)
 800c398:	2200      	movs	r2, #0
 800c39a:	2100      	movs	r1, #0
 800c39c:	2000      	movs	r0, #0
 800c39e:	f001 fb35 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
	array_tx_complete = 0;
 800c3a2:	4b8a      	ldr	r3, [pc, #552]	@ (800c5cc <Tx_Compressed+0x26c>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	701a      	strb	r2, [r3, #0]
	//Create packet containing compressed data
	//int i = 0; //index for offset of data buffer

	uint32_t total_bytes = compressed_size_bits/8;
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	08db      	lsrs	r3, r3, #3
 800c3ac:	623b      	str	r3, [r7, #32]
	APP_PRINTF("\r\nTotal bytes: %d\r\n", total_bytes);
 800c3ae:	6a3b      	ldr	r3, [r7, #32]
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	4b87      	ldr	r3, [pc, #540]	@ (800c5d0 <Tx_Compressed+0x270>)
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	f001 fb27 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
	data_buffer[0] =  DATA_PACKET_HEADER; //Set first byte as code for packet header
 800c3be:	4b85      	ldr	r3, [pc, #532]	@ (800c5d4 <Tx_Compressed+0x274>)
 800c3c0:	2202      	movs	r2, #2
 800c3c2:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = nodeID_1;
 800c3c4:	4b83      	ldr	r3, [pc, #524]	@ (800c5d4 <Tx_Compressed+0x274>)
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	705a      	strb	r2, [r3, #1]
	if (total_bytes > payload_var) { //data cannot fit into one packet of 255bytes
 800c3ca:	4b83      	ldr	r3, [pc, #524]	@ (800c5d8 <Tx_Compressed+0x278>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6a3a      	ldr	r2, [r7, #32]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	f240 8194 	bls.w	800c6fe <Tx_Compressed+0x39e>
		uint32_t total_packets = total_bytes/payload_var + 1;
 800c3d6:	4b80      	ldr	r3, [pc, #512]	@ (800c5d8 <Tx_Compressed+0x278>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	6a3a      	ldr	r2, [r7, #32]
 800c3dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	61fb      	str	r3, [r7, #28]
		uint32_t byte_count = 0; //counting how many bytes have been sent
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	61bb      	str	r3, [r7, #24]
		int k = 0; //index for compressed data, track what's been sent
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	637b      	str	r3, [r7, #52]	@ 0x34

		for (int32_t j = 0; j < total_packets; j++){
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3f0:	e17f      	b.n	800c6f2 <Tx_Compressed+0x392>
			ACK_Received_flag = 0;
 800c3f2:	4b7a      	ldr	r3, [pc, #488]	@ (800c5dc <Tx_Compressed+0x27c>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	601a      	str	r2, [r3, #0]
			data_buffer[2] = j; //1st byte: Packet no.
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	4b75      	ldr	r3, [pc, #468]	@ (800c5d4 <Tx_Compressed+0x274>)
 800c3fe:	709a      	strb	r2, [r3, #2]
			data_buffer[3] = total_packets; //2nd byte: Total packets to be transmitted
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	b2da      	uxtb	r2, r3
 800c404:	4b73      	ldr	r3, [pc, #460]	@ (800c5d4 <Tx_Compressed+0x274>)
 800c406:	70da      	strb	r2, [r3, #3]
			data_buffer[4] = data_type; //3rd byte: Sensor ID (ie x, y, x, r, q, p)
 800c408:	79fa      	ldrb	r2, [r7, #7]
 800c40a:	4b72      	ldr	r3, [pc, #456]	@ (800c5d4 <Tx_Compressed+0x274>)
 800c40c:	711a      	strb	r2, [r3, #4]

//			dataPacket.pkt_no = j; //1st byte: Packet no.
//			dataPacket.pkt_total = total_packets; //2nd byte: Total packets to be transmitted
//			dataPacket.data_type = data_type; //3rd byte: Sensor ID (ie x, y, x, r, q, p)

			if (total_bytes - k >= payload_var) {
 800c40e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c410:	6a3a      	ldr	r2, [r7, #32]
 800c412:	1ad2      	subs	r2, r2, r3
 800c414:	4b70      	ldr	r3, [pc, #448]	@ (800c5d8 <Tx_Compressed+0x278>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	429a      	cmp	r2, r3
 800c41a:	f0c0 8095 	bcc.w	800c548 <Tx_Compressed+0x1e8>
				memcpy(&data_buffer[5], &compressed_data[k], payload_var);	//Rest of packet: Compressed sensor data
 800c41e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	4413      	add	r3, r2
 800c424:	4a6c      	ldr	r2, [pc, #432]	@ (800c5d8 <Tx_Compressed+0x278>)
 800c426:	6812      	ldr	r2, [r2, #0]
 800c428:	4619      	mov	r1, r3
 800c42a:	486d      	ldr	r0, [pc, #436]	@ (800c5e0 <Tx_Compressed+0x280>)
 800c42c:	f002 fd3f 	bl	800eeae <memcpy>
				k = k + payload_var;
 800c430:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c432:	4b69      	ldr	r3, [pc, #420]	@ (800c5d8 <Tx_Compressed+0x278>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4413      	add	r3, r2
 800c438:	637b      	str	r3, [r7, #52]	@ 0x34
				Radio.Send(data_buffer, payload_var+5);
 800c43a:	4b6a      	ldr	r3, [pc, #424]	@ (800c5e4 <Tx_Compressed+0x284>)
 800c43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c43e:	4a66      	ldr	r2, [pc, #408]	@ (800c5d8 <Tx_Compressed+0x278>)
 800c440:	6812      	ldr	r2, [r2, #0]
 800c442:	b2d2      	uxtb	r2, r2
 800c444:	3205      	adds	r2, #5
 800c446:	b2d2      	uxtb	r2, r2
 800c448:	4611      	mov	r1, r2
 800c44a:	4862      	ldr	r0, [pc, #392]	@ (800c5d4 <Tx_Compressed+0x274>)
 800c44c:	4798      	blx	r3
				tx_packets++;
 800c44e:	4b66      	ldr	r3, [pc, #408]	@ (800c5e8 <Tx_Compressed+0x288>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	3301      	adds	r3, #1
 800c454:	4a64      	ldr	r2, [pc, #400]	@ (800c5e8 <Tx_Compressed+0x288>)
 800c456:	6013      	str	r3, [r2, #0]
				while (RadioTxDone_flag != 1){
 800c458:	e002      	b.n	800c460 <Tx_Compressed+0x100>
					HAL_Delay(5);
 800c45a:	2005      	movs	r0, #5
 800c45c:	f7f5 fc3c 	bl	8001cd8 <HAL_Delay>
				while (RadioTxDone_flag != 1){
 800c460:	4b62      	ldr	r3, [pc, #392]	@ (800c5ec <Tx_Compressed+0x28c>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b01      	cmp	r3, #1
 800c466:	d1f8      	bne.n	800c45a <Tx_Compressed+0xfa>
				}
				//Radio.Standby();
				APP_PRINTF("Tx no. %d sent\n\r", j);
 800c468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	4b60      	ldr	r3, [pc, #384]	@ (800c5f0 <Tx_Compressed+0x290>)
 800c46e:	2200      	movs	r2, #0
 800c470:	2100      	movs	r1, #0
 800c472:	2000      	movs	r0, #0
 800c474:	f001 faca 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
				RadioTxDone_flag = 0;
 800c478:	4b5c      	ldr	r3, [pc, #368]	@ (800c5ec <Tx_Compressed+0x28c>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	601a      	str	r2, [r3, #0]
					APP_PRINTF("\n");}
				  HAL_Delay(10);}
				APP_PRINTF("\n\r");
#endif
				//wait for ACK
				Radio.Rx(RX_TIMEOUT_VALUE); //Wait to receive ACK
 800c47e:	4b59      	ldr	r3, [pc, #356]	@ (800c5e4 <Tx_Compressed+0x284>)
 800c480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c482:	4a5c      	ldr	r2, [pc, #368]	@ (800c5f4 <Tx_Compressed+0x294>)
 800c484:	6812      	ldr	r2, [r2, #0]
 800c486:	4610      	mov	r0, r2
 800c488:	4798      	blx	r3
//				APP_PRINTF("Waiting for ACK.\r\n");
				uint32_t timeout = get_timeout_value();
 800c48a:	f000 fa77 	bl	800c97c <get_timeout_value>
 800c48e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				uint32_t num_retrans = 0; //retransmissions for this packet
 800c490:	2300      	movs	r3, #0
 800c492:	62bb      	str	r3, [r7, #40]	@ 0x28
				while(!ACK_Received_flag) {
 800c494:	e03d      	b.n	800c512 <Tx_Compressed+0x1b2>
					//APP_PRINTF("Waiting for ACK.");
					//if timeout, resend then rx again
					if (check_timeout(timeout)) {
 800c496:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c498:	f000 fa7c 	bl	800c994 <check_timeout>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d037      	beq.n	800c512 <Tx_Compressed+0x1b2>
						if (num_retrans > 4) {
 800c4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a4:	2b04      	cmp	r3, #4
 800c4a6:	d907      	bls.n	800c4b8 <Tx_Compressed+0x158>
							APP_PRINTF("Reached retransmission limit. Ending test.\r\n")
 800c4a8:	4b53      	ldr	r3, [pc, #332]	@ (800c5f8 <Tx_Compressed+0x298>)
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	f001 faac 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
							return false;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	e13a      	b.n	800c72e <Tx_Compressed+0x3ce>
						}
						APP_PRINTF("Rx Timeout. Sending packet %d again.\r\n", j);
 800c4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	4b4f      	ldr	r3, [pc, #316]	@ (800c5fc <Tx_Compressed+0x29c>)
 800c4be:	2200      	movs	r2, #0
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	f001 faa2 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
						// Timeout reached, resend the packet
						Radio.Send(data_buffer, payload_var+5);
 800c4c8:	4b46      	ldr	r3, [pc, #280]	@ (800c5e4 <Tx_Compressed+0x284>)
 800c4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4cc:	4a42      	ldr	r2, [pc, #264]	@ (800c5d8 <Tx_Compressed+0x278>)
 800c4ce:	6812      	ldr	r2, [r2, #0]
 800c4d0:	b2d2      	uxtb	r2, r2
 800c4d2:	3205      	adds	r2, #5
 800c4d4:	b2d2      	uxtb	r2, r2
 800c4d6:	4611      	mov	r1, r2
 800c4d8:	483e      	ldr	r0, [pc, #248]	@ (800c5d4 <Tx_Compressed+0x274>)
 800c4da:	4798      	blx	r3
						tx_packets++;
 800c4dc:	4b42      	ldr	r3, [pc, #264]	@ (800c5e8 <Tx_Compressed+0x288>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	4a41      	ldr	r2, [pc, #260]	@ (800c5e8 <Tx_Compressed+0x288>)
 800c4e4:	6013      	str	r3, [r2, #0]
						retx_packets++;
 800c4e6:	4b46      	ldr	r3, [pc, #280]	@ (800c600 <Tx_Compressed+0x2a0>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	4a44      	ldr	r2, [pc, #272]	@ (800c600 <Tx_Compressed+0x2a0>)
 800c4ee:	6013      	str	r3, [r2, #0]
						num_retrans++;
 800c4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	62bb      	str	r3, [r7, #40]	@ 0x28
						HAL_Delay(delay_on_air);
 800c4f6:	4b43      	ldr	r3, [pc, #268]	@ (800c604 <Tx_Compressed+0x2a4>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7f5 fbec 	bl	8001cd8 <HAL_Delay>
						Radio.Rx(RX_TIMEOUT_VALUE);  // Switch to Rx mode again after resending
 800c500:	4b38      	ldr	r3, [pc, #224]	@ (800c5e4 <Tx_Compressed+0x284>)
 800c502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c504:	4a3b      	ldr	r2, [pc, #236]	@ (800c5f4 <Tx_Compressed+0x294>)
 800c506:	6812      	ldr	r2, [r2, #0]
 800c508:	4610      	mov	r0, r2
 800c50a:	4798      	blx	r3
						timeout = get_timeout_value();  // Reset the timeout
 800c50c:	f000 fa36 	bl	800c97c <get_timeout_value>
 800c510:	62f8      	str	r0, [r7, #44]	@ 0x2c
				while(!ACK_Received_flag) {
 800c512:	4b32      	ldr	r3, [pc, #200]	@ (800c5dc <Tx_Compressed+0x27c>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d0bd      	beq.n	800c496 <Tx_Compressed+0x136>
					}
				}
				APP_PRINTF("ACK no. %d received. ");
 800c51a:	4b3b      	ldr	r3, [pc, #236]	@ (800c608 <Tx_Compressed+0x2a8>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	2100      	movs	r1, #0
 800c520:	2000      	movs	r0, #0
 800c522:	f001 fa73 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
				HAL_Delay(50);
 800c526:	2032      	movs	r0, #50	@ 0x32
 800c528:	f7f5 fbd6 	bl	8001cd8 <HAL_Delay>
				HAL_Delay(delay_on_air);
 800c52c:	4b35      	ldr	r3, [pc, #212]	@ (800c604 <Tx_Compressed+0x2a4>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4618      	mov	r0, r3
 800c532:	f7f5 fbd1 	bl	8001cd8 <HAL_Delay>
				APP_PRINTF("Next packet.\r\n", j);
 800c536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	4b34      	ldr	r3, [pc, #208]	@ (800c60c <Tx_Compressed+0x2ac>)
 800c53c:	2200      	movs	r2, #0
 800c53e:	2100      	movs	r1, #0
 800c540:	2000      	movs	r0, #0
 800c542:	f001 fa63 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
 800c546:	e0c2      	b.n	800c6ce <Tx_Compressed+0x36e>

			}
			//last packet of transmission
			else {
				uint32_t remaining_bytes = total_bytes - k;
 800c548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c54a:	6a3a      	ldr	r2, [r7, #32]
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	617b      	str	r3, [r7, #20]
				//Rest of packet: Compressed sensor data
				memcpy(&data_buffer[5], &compressed_data[k], remaining_bytes);
 800c550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	4413      	add	r3, r2
 800c556:	697a      	ldr	r2, [r7, #20]
 800c558:	4619      	mov	r1, r3
 800c55a:	4821      	ldr	r0, [pc, #132]	@ (800c5e0 <Tx_Compressed+0x280>)
 800c55c:	f002 fca7 	bl	800eeae <memcpy>
				//memcpy(dataPacket.data, &compressed_data[k], remaining_bytes);
				k = k + remaining_bytes;
 800c560:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	4413      	add	r3, r2
 800c566:	637b      	str	r3, [r7, #52]	@ 0x34
				Radio.Send(data_buffer, (remaining_bytes+5));
 800c568:	4b1e      	ldr	r3, [pc, #120]	@ (800c5e4 <Tx_Compressed+0x284>)
 800c56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c56c:	697a      	ldr	r2, [r7, #20]
 800c56e:	b2d2      	uxtb	r2, r2
 800c570:	3205      	adds	r2, #5
 800c572:	b2d2      	uxtb	r2, r2
 800c574:	4611      	mov	r1, r2
 800c576:	4817      	ldr	r0, [pc, #92]	@ (800c5d4 <Tx_Compressed+0x274>)
 800c578:	4798      	blx	r3
				HAL_Delay(100); //change 30 sep
 800c57a:	2064      	movs	r0, #100	@ 0x64
 800c57c:	f7f5 fbac 	bl	8001cd8 <HAL_Delay>
//				HAL_Delay(delay_on_air);
				while (RadioTxDone_flag != 1){
 800c580:	e002      	b.n	800c588 <Tx_Compressed+0x228>
					HAL_Delay(1);
 800c582:	2001      	movs	r0, #1
 800c584:	f7f5 fba8 	bl	8001cd8 <HAL_Delay>
				while (RadioTxDone_flag != 1){
 800c588:	4b18      	ldr	r3, [pc, #96]	@ (800c5ec <Tx_Compressed+0x28c>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d1f8      	bne.n	800c582 <Tx_Compressed+0x222>
				}
				//Radio.Standby();
				APP_PRINTF("Tx no. %d sent. Final packet.\n\r", j);
 800c590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c592:	9300      	str	r3, [sp, #0]
 800c594:	4b1e      	ldr	r3, [pc, #120]	@ (800c610 <Tx_Compressed+0x2b0>)
 800c596:	2200      	movs	r2, #0
 800c598:	2100      	movs	r1, #0
 800c59a:	2000      	movs	r0, #0
 800c59c:	f001 fa36 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
				RadioTxDone_flag = 0;
 800c5a0:	4b12      	ldr	r3, [pc, #72]	@ (800c5ec <Tx_Compressed+0x28c>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	601a      	str	r2, [r3, #0]
				//wait for ACK
				Radio.Rx(RX_TIMEOUT_VALUE); //Wait to receive ACK
 800c5a6:	4b0f      	ldr	r3, [pc, #60]	@ (800c5e4 <Tx_Compressed+0x284>)
 800c5a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5aa:	4a12      	ldr	r2, [pc, #72]	@ (800c5f4 <Tx_Compressed+0x294>)
 800c5ac:	6812      	ldr	r2, [r2, #0]
 800c5ae:	4610      	mov	r0, r2
 800c5b0:	4798      	blx	r3
//				APP_PRINTF("Waiting for ACK.\r\n");
				uint32_t timeout = get_timeout_value();
 800c5b2:	f000 f9e3 	bl	800c97c <get_timeout_value>
 800c5b6:	6278      	str	r0, [r7, #36]	@ 0x24
				while(!ACK_Received_flag) {
 800c5b8:	e051      	b.n	800c65e <Tx_Compressed+0x2fe>
 800c5ba:	bf00      	nop
 800c5bc:	2000886c 	.word	0x2000886c
 800c5c0:	2000886d 	.word	0x2000886d
 800c5c4:	2000886e 	.word	0x2000886e
 800c5c8:	08010ba0 	.word	0x08010ba0
 800c5cc:	20008320 	.word	0x20008320
 800c5d0:	08010bb8 	.word	0x08010bb8
 800c5d4:	20008654 	.word	0x20008654
 800c5d8:	2000887c 	.word	0x2000887c
 800c5dc:	2000864c 	.word	0x2000864c
 800c5e0:	20008659 	.word	0x20008659
 800c5e4:	08010fd8 	.word	0x08010fd8
 800c5e8:	20008870 	.word	0x20008870
 800c5ec:	20008638 	.word	0x20008638
 800c5f0:	08010bcc 	.word	0x08010bcc
 800c5f4:	20008880 	.word	0x20008880
 800c5f8:	08010be0 	.word	0x08010be0
 800c5fc:	08010c10 	.word	0x08010c10
 800c600:	20008874 	.word	0x20008874
 800c604:	20008758 	.word	0x20008758
 800c608:	08010c38 	.word	0x08010c38
 800c60c:	08010c50 	.word	0x08010c50
 800c610:	08010c60 	.word	0x08010c60
					//APP_PRINTF("Waiting for ACK.");
					//if timeout, resend then rx again
					if (check_timeout(timeout)) {
 800c614:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c616:	f000 f9bd 	bl	800c994 <check_timeout>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d01e      	beq.n	800c65e <Tx_Compressed+0x2fe>
						APP_PRINTF("Rx Timeout. Sending packet %d again.\r\n", j);
 800c620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c622:	9300      	str	r3, [sp, #0]
 800c624:	4b44      	ldr	r3, [pc, #272]	@ (800c738 <Tx_Compressed+0x3d8>)
 800c626:	2200      	movs	r2, #0
 800c628:	2100      	movs	r1, #0
 800c62a:	2000      	movs	r0, #0
 800c62c:	f001 f9ee 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
						// Timeout reached, resend the packet
						Radio.Send(data_buffer, (remaining_bytes+5));
 800c630:	4b42      	ldr	r3, [pc, #264]	@ (800c73c <Tx_Compressed+0x3dc>)
 800c632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c634:	697a      	ldr	r2, [r7, #20]
 800c636:	b2d2      	uxtb	r2, r2
 800c638:	3205      	adds	r2, #5
 800c63a:	b2d2      	uxtb	r2, r2
 800c63c:	4611      	mov	r1, r2
 800c63e:	4840      	ldr	r0, [pc, #256]	@ (800c740 <Tx_Compressed+0x3e0>)
 800c640:	4798      	blx	r3
						HAL_Delay(delay_on_air);
 800c642:	4b40      	ldr	r3, [pc, #256]	@ (800c744 <Tx_Compressed+0x3e4>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4618      	mov	r0, r3
 800c648:	f7f5 fb46 	bl	8001cd8 <HAL_Delay>
						Radio.Rx(RX_TIMEOUT_VALUE);  // Switch to Rx mode again after resending
 800c64c:	4b3b      	ldr	r3, [pc, #236]	@ (800c73c <Tx_Compressed+0x3dc>)
 800c64e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c650:	4a3d      	ldr	r2, [pc, #244]	@ (800c748 <Tx_Compressed+0x3e8>)
 800c652:	6812      	ldr	r2, [r2, #0]
 800c654:	4610      	mov	r0, r2
 800c656:	4798      	blx	r3
						timeout = get_timeout_value();  // Reset the timeout
 800c658:	f000 f990 	bl	800c97c <get_timeout_value>
 800c65c:	6278      	str	r0, [r7, #36]	@ 0x24
				while(!ACK_Received_flag) {
 800c65e:	4b3b      	ldr	r3, [pc, #236]	@ (800c74c <Tx_Compressed+0x3ec>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0d6      	beq.n	800c614 <Tx_Compressed+0x2b4>
					}
				}
				APP_PRINTF("ACK no. %d received. Finished transmission.\r\n", j);
 800c666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	4b39      	ldr	r3, [pc, #228]	@ (800c750 <Tx_Compressed+0x3f0>)
 800c66c:	2200      	movs	r2, #0
 800c66e:	2100      	movs	r1, #0
 800c670:	2000      	movs	r0, #0
 800c672:	f001 f9cb 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
				APP_PRINTF("Total packets transmitted: %d, Retransmissions: %d\r\n", tx_packets, retx_packets);
 800c676:	4b37      	ldr	r3, [pc, #220]	@ (800c754 <Tx_Compressed+0x3f4>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a37      	ldr	r2, [pc, #220]	@ (800c758 <Tx_Compressed+0x3f8>)
 800c67c:	6812      	ldr	r2, [r2, #0]
 800c67e:	9201      	str	r2, [sp, #4]
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	4b36      	ldr	r3, [pc, #216]	@ (800c75c <Tx_Compressed+0x3fc>)
 800c684:	2200      	movs	r2, #0
 800c686:	2100      	movs	r1, #0
 800c688:	2000      	movs	r0, #0
 800c68a:	f001 f9bf 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
				APP_PRINTF("Total ToA: %d ms \r\n", tx_packets*time_on_air);
 800c68e:	4b31      	ldr	r3, [pc, #196]	@ (800c754 <Tx_Compressed+0x3f4>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a33      	ldr	r2, [pc, #204]	@ (800c760 <Tx_Compressed+0x400>)
 800c694:	6812      	ldr	r2, [r2, #0]
 800c696:	fb02 f303 	mul.w	r3, r2, r3
 800c69a:	9300      	str	r3, [sp, #0]
 800c69c:	4b31      	ldr	r3, [pc, #196]	@ (800c764 <Tx_Compressed+0x404>)
 800c69e:	2200      	movs	r2, #0
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	2000      	movs	r0, #0
 800c6a4:	f001 f9b2 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
				HAL_Delay(delay_on_air*2);
 800c6a8:	4b26      	ldr	r3, [pc, #152]	@ (800c744 <Tx_Compressed+0x3e4>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	005b      	lsls	r3, r3, #1
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7f5 fb12 	bl	8001cd8 <HAL_Delay>
				sendBeacon(0, 0);
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	f000 f93e 	bl	800c938 <sendBeacon>
				HAL_Delay(delay_on_air*2);
 800c6bc:	4b21      	ldr	r3, [pc, #132]	@ (800c744 <Tx_Compressed+0x3e4>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	005b      	lsls	r3, r3, #1
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7f5 fb08 	bl	8001cd8 <HAL_Delay>
				array_tx_complete = 1;
 800c6c8:	4b27      	ldr	r3, [pc, #156]	@ (800c768 <Tx_Compressed+0x408>)
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	701a      	strb	r2, [r3, #0]
#endif
			}
			//HAL_Delay(3000); //for testing


			  RadioRxDone_flag = 0;
 800c6ce:	4b27      	ldr	r3, [pc, #156]	@ (800c76c <Tx_Compressed+0x40c>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	601a      	str	r2, [r3, #0]
			  RadioRxTimeout_flag = 0;
 800c6d4:	4b26      	ldr	r3, [pc, #152]	@ (800c770 <Tx_Compressed+0x410>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	601a      	str	r2, [r3, #0]
			  RadioError_flag = 0;
 800c6da:	4b26      	ldr	r3, [pc, #152]	@ (800c774 <Tx_Compressed+0x414>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	601a      	str	r2, [r3, #0]
			  RadioTxDone_flag = 0;
 800c6e0:	4b25      	ldr	r3, [pc, #148]	@ (800c778 <Tx_Compressed+0x418>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	601a      	str	r2, [r3, #0]
			  RadioTxTimeout_flag = 0;
 800c6e6:	4b25      	ldr	r3, [pc, #148]	@ (800c77c <Tx_Compressed+0x41c>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	601a      	str	r2, [r3, #0]
		for (int32_t j = 0; j < total_packets; j++){
 800c6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f4:	69fa      	ldr	r2, [r7, #28]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	f63f ae7b 	bhi.w	800c3f2 <Tx_Compressed+0x92>
 800c6fc:	e016      	b.n	800c72c <Tx_Compressed+0x3cc>
		}
	}


	else { //if data less than 250 bytes, can transmit it all in one packet
		data_buffer[2] = 1; //only packet, 	//1st byte: Packet no.
 800c6fe:	4b10      	ldr	r3, [pc, #64]	@ (800c740 <Tx_Compressed+0x3e0>)
 800c700:	2201      	movs	r2, #1
 800c702:	709a      	strb	r2, [r3, #2]
		data_buffer[3] = 1; //2nd byte: Total packets to be transmitted
 800c704:	4b0e      	ldr	r3, [pc, #56]	@ (800c740 <Tx_Compressed+0x3e0>)
 800c706:	2201      	movs	r2, #1
 800c708:	70da      	strb	r2, [r3, #3]
		data_buffer[4] = data_type;	//3rd byte: Sensor ID (ie x, y, x, r, q, p)
 800c70a:	79fa      	ldrb	r2, [r7, #7]
 800c70c:	4b0c      	ldr	r3, [pc, #48]	@ (800c740 <Tx_Compressed+0x3e0>)
 800c70e:	711a      	strb	r2, [r3, #4]
		memcpy(&data_buffer[5], compressed_data, total_bytes); 	//Rest of packet: Compressed sensor data
 800c710:	6a3a      	ldr	r2, [r7, #32]
 800c712:	68f9      	ldr	r1, [r7, #12]
 800c714:	481a      	ldr	r0, [pc, #104]	@ (800c780 <Tx_Compressed+0x420>)
 800c716:	f002 fbca 	bl	800eeae <memcpy>
#endif
		//wait for ACK

		//memcpy(data_buffer, dataPacket, 255);
//		Radio.Send((uint8_t *)&dataPacket, (3+total_bytes));
		Radio.Send(data_buffer, (5+total_bytes)); //Real
 800c71a:	4b08      	ldr	r3, [pc, #32]	@ (800c73c <Tx_Compressed+0x3dc>)
 800c71c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c71e:	6a3a      	ldr	r2, [r7, #32]
 800c720:	b2d2      	uxtb	r2, r2
 800c722:	3205      	adds	r2, #5
 800c724:	b2d2      	uxtb	r2, r2
 800c726:	4611      	mov	r1, r2
 800c728:	4805      	ldr	r0, [pc, #20]	@ (800c740 <Tx_Compressed+0x3e0>)
 800c72a:	4798      	blx	r3
	}
	return true;
 800c72c:	2301      	movs	r3, #1
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3738      	adds	r7, #56	@ 0x38
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	08010c10 	.word	0x08010c10
 800c73c:	08010fd8 	.word	0x08010fd8
 800c740:	20008654 	.word	0x20008654
 800c744:	20008758 	.word	0x20008758
 800c748:	20008880 	.word	0x20008880
 800c74c:	2000864c 	.word	0x2000864c
 800c750:	08010c80 	.word	0x08010c80
 800c754:	20008870 	.word	0x20008870
 800c758:	20008874 	.word	0x20008874
 800c75c:	08010cb0 	.word	0x08010cb0
 800c760:	20008888 	.word	0x20008888
 800c764:	08010ce8 	.word	0x08010ce8
 800c768:	20008320 	.word	0x20008320
 800c76c:	20008640 	.word	0x20008640
 800c770:	20008644 	.word	0x20008644
 800c774:	20008648 	.word	0x20008648
 800c778:	20008638 	.word	0x20008638
 800c77c:	2000863c 	.word	0x2000863c
 800c780:	20008659 	.word	0x20008659

0800c784 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800c784:	b480      	push	{r7}
 800c786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  RadioTxDone_flag = 1;
 800c788:	4b03      	ldr	r3, [pc, #12]	@ (800c798 <OnTxDone+0x14>)
 800c78a:	2201      	movs	r2, #1
 800c78c:	601a      	str	r2, [r3, #0]
//#if (TEST_MODE == RADIO_RX)
//  APP_PRINTF("Rx says TxDone\r\n");
//#endif
  //UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnTxDone */
}
 800c78e:	bf00      	nop
 800c790:	46bd      	mov	sp, r7
 800c792:	bc80      	pop	{r7}
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	20008638 	.word	0x20008638

0800c79c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b086      	sub	sp, #24
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	4608      	mov	r0, r1
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	817b      	strh	r3, [r7, #10]
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	813b      	strh	r3, [r7, #8]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  last_rx_rssi = rssi;
 800c7b6:	4a11      	ldr	r2, [pc, #68]	@ (800c7fc <OnRxDone+0x60>)
 800c7b8:	893b      	ldrh	r3, [r7, #8]
 800c7ba:	8013      	strh	r3, [r2, #0]
  last_rx_cfo = LoraSnr_FskCfo;
 800c7bc:	4a10      	ldr	r2, [pc, #64]	@ (800c800 <OnRxDone+0x64>)
 800c7be:	79fb      	ldrb	r3, [r7, #7]
 800c7c0:	7013      	strb	r3, [r2, #0]
  memcpy(data_rx, payload, size); //data_rx uint8, payload uint8
 800c7c2:	897b      	ldrh	r3, [r7, #10]
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	68f9      	ldr	r1, [r7, #12]
 800c7c8:	480e      	ldr	r0, [pc, #56]	@ (800c804 <OnRxDone+0x68>)
 800c7ca:	f002 fb70 	bl	800eeae <memcpy>
  /* Set Rxdone flag */
  RadioRxDone_flag = 1;
 800c7ce:	4b0e      	ldr	r3, [pc, #56]	@ (800c808 <OnRxDone+0x6c>)
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	601a      	str	r2, [r3, #0]
  payloadLen = size;
 800c7d4:	4a0d      	ldr	r2, [pc, #52]	@ (800c80c <OnRxDone+0x70>)
 800c7d6:	897b      	ldrh	r3, [r7, #10]
 800c7d8:	8013      	strh	r3, [r2, #0]
#if (TEST_MODE == RADIO_TX)
  //cast payload to correct structure
  pktACK* ACK = (pktACK*)data_rx;
 800c7da:	4b0a      	ldr	r3, [pc, #40]	@ (800c804 <OnRxDone+0x68>)
 800c7dc:	617b      	str	r3, [r7, #20]
  if (ACK->header ==  ACK_HEADER){
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	f003 0307 	and.w	r3, r3, #7
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	2b03      	cmp	r3, #3
 800c7ea:	d102      	bne.n	800c7f2 <OnRxDone+0x56>
	  ACK_Received_flag = 1;
 800c7ec:	4b08      	ldr	r3, [pc, #32]	@ (800c810 <OnRxDone+0x74>)
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  //Rx_Process();
#endif

  /* USER CODE END OnRxDone */
}
 800c7f2:	bf00      	nop
 800c7f4:	3718      	adds	r7, #24
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	20008650 	.word	0x20008650
 800c800:	20008652 	.word	0x20008652
 800c804:	20008768 	.word	0x20008768
 800c808:	20008640 	.word	0x20008640
 800c80c:	200040e2 	.word	0x200040e2
 800c810:	2000864c 	.word	0x2000864c

0800c814 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
   RadioTxTimeout_flag = 1;
 800c818:	4b05      	ldr	r3, [pc, #20]	@ (800c830 <OnTxTimeout+0x1c>)
 800c81a:	2201      	movs	r2, #1
 800c81c:	601a      	str	r2, [r3, #0]
   APP_PRINTF("TxTimeout\r\n");
 800c81e:	4b05      	ldr	r3, [pc, #20]	@ (800c834 <OnTxTimeout+0x20>)
 800c820:	2200      	movs	r2, #0
 800c822:	2100      	movs	r1, #0
 800c824:	2000      	movs	r0, #0
 800c826:	f001 f8f1 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
  /* Run process in background*/
  //UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnTxTimeout */
}
 800c82a:	bf00      	nop
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	2000863c 	.word	0x2000863c
 800c834:	08010de4 	.word	0x08010de4

0800c838 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  RadioRxTimeout_flag = 1;
 800c83c:	4b05      	ldr	r3, [pc, #20]	@ (800c854 <OnRxTimeout+0x1c>)
 800c83e:	2201      	movs	r2, #1
 800c840:	601a      	str	r2, [r3, #0]
  /* Run Per process in background*/
	#if (TEST_MODE == RADIO_TX)
	  APP_PRINTF("Tx says RxTimeout\r\n");
 800c842:	4b05      	ldr	r3, [pc, #20]	@ (800c858 <OnRxTimeout+0x20>)
 800c844:	2200      	movs	r2, #0
 800c846:	2100      	movs	r1, #0
 800c848:	2000      	movs	r0, #0
 800c84a:	f001 f8df 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
#elif (TEST_MODE == RADIO_RX)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
	  //Rx_Process();
#endif
  /* USER CODE END OnRxTimeout */
}
 800c84e:	bf00      	nop
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	20008644 	.word	0x20008644
 800c858:	08010df0 	.word	0x08010df0

0800c85c <OnRxError>:

static void OnRxError(void)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  RadioError_flag = 1;
 800c860:	4b04      	ldr	r3, [pc, #16]	@ (800c874 <OnRxError+0x18>)
 800c862:	2201      	movs	r2, #1
 800c864:	601a      	str	r2, [r3, #0]
  /* Run Per process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800c866:	2100      	movs	r1, #0
 800c868:	2001      	movs	r0, #1
 800c86a:	f000 fdb3 	bl	800d3d4 <UTIL_SEQ_SetTask>
  //Rx_Process();
  /* USER CODE END OnRxError */
}
 800c86e:	bf00      	nop
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	20008648 	.word	0x20008648

0800c878 <Rx_Process>:

/* USER CODE BEGIN PrFD */
//State entered after beacon received, waiting for packets
static void Rx_Process(void){
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af02      	add	r7, sp, #8
	//APP_PRINTF("Rx Running");
	  data_offset = 0;
 800c87e:	4b20      	ldr	r3, [pc, #128]	@ (800c900 <Rx_Process+0x88>)
 800c880:	2200      	movs	r2, #0
 800c882:	801a      	strh	r2, [r3, #0]
		count_RxOk++;
	  }

#endif
	  /* Reset timeout flag */
	  RadioRxDone_flag = 0;
 800c884:	4b1f      	ldr	r3, [pc, #124]	@ (800c904 <Rx_Process+0x8c>)
 800c886:	2200      	movs	r2, #0
 800c888:	601a      	str	r2, [r3, #0]
	  RadioRxTimeout_flag = 0;
 800c88a:	4b1f      	ldr	r3, [pc, #124]	@ (800c908 <Rx_Process+0x90>)
 800c88c:	2200      	movs	r2, #0
 800c88e:	601a      	str	r2, [r3, #0]
	  RadioError_flag = 0;
 800c890:	4b1e      	ldr	r3, [pc, #120]	@ (800c90c <Rx_Process+0x94>)
 800c892:	2200      	movs	r2, #0
 800c894:	601a      	str	r2, [r3, #0]
	  RadioTxDone_flag = 0;
 800c896:	4b1e      	ldr	r3, [pc, #120]	@ (800c910 <Rx_Process+0x98>)
 800c898:	2200      	movs	r2, #0
 800c89a:	601a      	str	r2, [r3, #0]
	  RadioTxTimeout_flag = 0;
 800c89c:	4b1d      	ldr	r3, [pc, #116]	@ (800c914 <Rx_Process+0x9c>)
 800c89e:	2200      	movs	r2, #0
 800c8a0:	601a      	str	r2, [r3, #0]

//	  HAL_Delay(100);

	  Radio.Rx(RX_TIMEOUT_VALUE);
 800c8a2:	4b1d      	ldr	r3, [pc, #116]	@ (800c918 <Rx_Process+0xa0>)
 800c8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8a6:	4a1d      	ldr	r2, [pc, #116]	@ (800c91c <Rx_Process+0xa4>)
 800c8a8:	6812      	ldr	r2, [r2, #0]
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	4798      	blx	r3

	  /* This delay is only to give enough time to allow DMA to empty APP_PRINTF queue*/
	  //HAL_Delay(500);

	  RadioError_flag = 0;
 800c8ae:	4b17      	ldr	r3, [pc, #92]	@ (800c90c <Rx_Process+0x94>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	601a      	str	r2, [r3, #0]
	  packetCnt++;
 800c8b4:	4b1a      	ldr	r3, [pc, #104]	@ (800c920 <Rx_Process+0xa8>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	4a19      	ldr	r2, [pc, #100]	@ (800c920 <Rx_Process+0xa8>)
 800c8bc:	6013      	str	r3, [r2, #0]
	  PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 800c8be:	4b19      	ldr	r3, [pc, #100]	@ (800c924 <Rx_Process+0xac>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2264      	movs	r2, #100	@ 0x64
 800c8c4:	fb03 f202 	mul.w	r2, r3, r2
 800c8c8:	4b16      	ldr	r3, [pc, #88]	@ (800c924 <Rx_Process+0xac>)
 800c8ca:	6819      	ldr	r1, [r3, #0]
 800c8cc:	4b16      	ldr	r3, [pc, #88]	@ (800c928 <Rx_Process+0xb0>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	440b      	add	r3, r1
 800c8d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8d6:	4a15      	ldr	r2, [pc, #84]	@ (800c92c <Rx_Process+0xb4>)
 800c8d8:	6013      	str	r3, [r2, #0]
	  APP_PRINTF("%d\r\n", PER);
 800c8da:	4b14      	ldr	r3, [pc, #80]	@ (800c92c <Rx_Process+0xb4>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	4b13      	ldr	r3, [pc, #76]	@ (800c930 <Rx_Process+0xb8>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	2000      	movs	r0, #0
 800c8e8:	f001 f890 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>
	  APP_PRINTF("\r\n");
 800c8ec:	4b11      	ldr	r3, [pc, #68]	@ (800c934 <Rx_Process+0xbc>)
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	2000      	movs	r0, #0
 800c8f4:	f001 f88a 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>

}
 800c8f8:	bf00      	nop
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	20008754 	.word	0x20008754
 800c904:	20008640 	.word	0x20008640
 800c908:	20008644 	.word	0x20008644
 800c90c:	20008648 	.word	0x20008648
 800c910:	20008638 	.word	0x20008638
 800c914:	2000863c 	.word	0x2000863c
 800c918:	08010fd8 	.word	0x08010fd8
 800c91c:	20008880 	.word	0x20008880
 800c920:	20008868 	.word	0x20008868
 800c924:	20008760 	.word	0x20008760
 800c928:	2000875c 	.word	0x2000875c
 800c92c:	20008764 	.word	0x20008764
 800c930:	08010e04 	.word	0x08010e04
 800c934:	08010e0c 	.word	0x08010e0c

0800c938 <sendBeacon>:
	}
}


//#if (TEST_MODE == RADIO_TX)
bool sendBeacon(uint16_t data_log_no, uint16_t packet_total) {
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	4603      	mov	r3, r0
 800c940:	460a      	mov	r2, r1
 800c942:	80fb      	strh	r3, [r7, #6]
 800c944:	4613      	mov	r3, r2
 800c946:	80bb      	strh	r3, [r7, #4]
//	beacon Beacon; //instantiate beacon packet
//	Beacon.node_ID = nodeID_1;
//	Beacon.data_log_no = dataName;
//	Beacon.pkt_total = packet_total;
//	Radio.Send((uint8_t *)&Beacon, 4);
	data_buffer[0] = BEACON_HEADER;
 800c948:	4b09      	ldr	r3, [pc, #36]	@ (800c970 <sendBeacon+0x38>)
 800c94a:	2201      	movs	r2, #1
 800c94c:	701a      	strb	r2, [r3, #0]
	Radio.Send(data_buffer, 4);
 800c94e:	4b09      	ldr	r3, [pc, #36]	@ (800c974 <sendBeacon+0x3c>)
 800c950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c952:	2104      	movs	r1, #4
 800c954:	4806      	ldr	r0, [pc, #24]	@ (800c970 <sendBeacon+0x38>)
 800c956:	4798      	blx	r3
	APP_PRINTF("Beacon sent.\r\n");
 800c958:	4b07      	ldr	r3, [pc, #28]	@ (800c978 <sendBeacon+0x40>)
 800c95a:	2200      	movs	r2, #0
 800c95c:	2100      	movs	r1, #0
 800c95e:	2000      	movs	r0, #0
 800c960:	f001 f854 	bl	800da0c <UTIL_ADV_TRACE_COND_FSend>

	return true;
 800c964:	2301      	movs	r3, #1
}
 800c966:	4618      	mov	r0, r3
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	20008654 	.word	0x20008654
 800c974:	08010fd8 	.word	0x08010fd8
 800c978:	08010e40 	.word	0x08010e40

0800c97c <get_timeout_value>:

uint32_t get_timeout_value() {
 800c97c:	b580      	push	{r7, lr}
 800c97e:	af00      	add	r7, sp, #0
    // Return the current time plus a timeout duration (e.g., 5000 ms = 5 seconds)
    return HAL_GetTick() + RX_TIMEOUT_VALUE;  // Timeout duration of 5 seconds
 800c980:	f7f5 f996 	bl	8001cb0 <HAL_GetTick>
 800c984:	4602      	mov	r2, r0
 800c986:	4b02      	ldr	r3, [pc, #8]	@ (800c990 <get_timeout_value+0x14>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4413      	add	r3, r2
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	20008880 	.word	0x20008880

0800c994 <check_timeout>:

bool check_timeout(uint32_t timeout) {
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
    // Compare the current time with the timeout value
    return HAL_GetTick() > timeout;
 800c99c:	f7f5 f988 	bl	8001cb0 <HAL_GetTick>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	bf34      	ite	cc
 800c9a8:	2301      	movcc	r3, #1
 800c9aa:	2300      	movcs	r3, #0
 800c9ac:	b2db      	uxtb	r3, r3
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800c9ba:	f7f5 ffe1 	bl	8002980 <BSP_RADIO_Init>
 800c9be:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c9ce:	79fb      	ldrb	r3, [r7, #7]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7f6 f813 	bl	80029fc <BSP_RADIO_ConfigRFSwitch>
 800c9d6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800c9e4:	f7f6 f866 	bl	8002ab4 <BSP_RADIO_GetTxConfig>
 800c9e8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800c9f2:	f7f6 f866 	bl	8002ac2 <BSP_RADIO_IsTCXO>
 800c9f6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800ca00:	f7f6 f866 	bl	8002ad0 <BSP_RADIO_IsDCDC>
 800ca04:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b082      	sub	sp, #8
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	4603      	mov	r3, r0
 800ca12:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ca14:	79fb      	ldrb	r3, [r7, #7]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7f6 f861 	bl	8002ade <BSP_RADIO_GetRFOMaxPowerConfig>
 800ca1c:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
	...

0800ca28 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ca28:	b480      	push	{r7}
 800ca2a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ca2c:	4b04      	ldr	r3, [pc, #16]	@ (800ca40 <UTIL_LPM_Init+0x18>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ca32:	4b04      	ldr	r3, [pc, #16]	@ (800ca44 <UTIL_LPM_Init+0x1c>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ca38:	bf00      	nop
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bc80      	pop	{r7}
 800ca3e:	4770      	bx	lr
 800ca40:	2000888c 	.word	0x2000888c
 800ca44:	20008890 	.word	0x20008890

0800ca48 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b087      	sub	sp, #28
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	460b      	mov	r3, r1
 800ca52:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca54:	f3ef 8310 	mrs	r3, PRIMASK
 800ca58:	613b      	str	r3, [r7, #16]
  return(result);
 800ca5a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ca5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca5e:	b672      	cpsid	i
}
 800ca60:	bf00      	nop
  
  switch( state )
 800ca62:	78fb      	ldrb	r3, [r7, #3]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d008      	beq.n	800ca7a <UTIL_LPM_SetStopMode+0x32>
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d10e      	bne.n	800ca8a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800ca6c:	4b0d      	ldr	r3, [pc, #52]	@ (800caa4 <UTIL_LPM_SetStopMode+0x5c>)
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	4a0b      	ldr	r2, [pc, #44]	@ (800caa4 <UTIL_LPM_SetStopMode+0x5c>)
 800ca76:	6013      	str	r3, [r2, #0]
      break;
 800ca78:	e008      	b.n	800ca8c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	43da      	mvns	r2, r3
 800ca7e:	4b09      	ldr	r3, [pc, #36]	@ (800caa4 <UTIL_LPM_SetStopMode+0x5c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4013      	ands	r3, r2
 800ca84:	4a07      	ldr	r2, [pc, #28]	@ (800caa4 <UTIL_LPM_SetStopMode+0x5c>)
 800ca86:	6013      	str	r3, [r2, #0]
      break;
 800ca88:	e000      	b.n	800ca8c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800ca8a:	bf00      	nop
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f383 8810 	msr	PRIMASK, r3
}
 800ca96:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ca98:	bf00      	nop
 800ca9a:	371c      	adds	r7, #28
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bc80      	pop	{r7}
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	2000888c 	.word	0x2000888c

0800caa8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800caa8:	b480      	push	{r7}
 800caaa:	b087      	sub	sp, #28
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cab4:	f3ef 8310 	mrs	r3, PRIMASK
 800cab8:	613b      	str	r3, [r7, #16]
  return(result);
 800caba:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800cabc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cabe:	b672      	cpsid	i
}
 800cac0:	bf00      	nop
  
  switch(state)
 800cac2:	78fb      	ldrb	r3, [r7, #3]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d008      	beq.n	800cada <UTIL_LPM_SetOffMode+0x32>
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d10e      	bne.n	800caea <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800cacc:	4b0d      	ldr	r3, [pc, #52]	@ (800cb04 <UTIL_LPM_SetOffMode+0x5c>)
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	4a0b      	ldr	r2, [pc, #44]	@ (800cb04 <UTIL_LPM_SetOffMode+0x5c>)
 800cad6:	6013      	str	r3, [r2, #0]
      break;
 800cad8:	e008      	b.n	800caec <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	43da      	mvns	r2, r3
 800cade:	4b09      	ldr	r3, [pc, #36]	@ (800cb04 <UTIL_LPM_SetOffMode+0x5c>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4013      	ands	r3, r2
 800cae4:	4a07      	ldr	r2, [pc, #28]	@ (800cb04 <UTIL_LPM_SetOffMode+0x5c>)
 800cae6:	6013      	str	r3, [r2, #0]
      break;
 800cae8:	e000      	b.n	800caec <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800caea:	bf00      	nop
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f383 8810 	msr	PRIMASK, r3
}
 800caf6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800caf8:	bf00      	nop
 800cafa:	371c      	adds	r7, #28
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bc80      	pop	{r7}
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	20008890 	.word	0x20008890

0800cb08 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb0e:	f3ef 8310 	mrs	r3, PRIMASK
 800cb12:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb14:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800cb16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb18:	b672      	cpsid	i
}
 800cb1a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800cb1c:	4b12      	ldr	r3, [pc, #72]	@ (800cb68 <UTIL_LPM_EnterLowPower+0x60>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d006      	beq.n	800cb32 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800cb24:	4b11      	ldr	r3, [pc, #68]	@ (800cb6c <UTIL_LPM_EnterLowPower+0x64>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800cb2a:	4b10      	ldr	r3, [pc, #64]	@ (800cb6c <UTIL_LPM_EnterLowPower+0x64>)
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	4798      	blx	r3
 800cb30:	e010      	b.n	800cb54 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800cb32:	4b0f      	ldr	r3, [pc, #60]	@ (800cb70 <UTIL_LPM_EnterLowPower+0x68>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d006      	beq.n	800cb48 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800cb3a:	4b0c      	ldr	r3, [pc, #48]	@ (800cb6c <UTIL_LPM_EnterLowPower+0x64>)
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800cb40:	4b0a      	ldr	r3, [pc, #40]	@ (800cb6c <UTIL_LPM_EnterLowPower+0x64>)
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	4798      	blx	r3
 800cb46:	e005      	b.n	800cb54 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800cb48:	4b08      	ldr	r3, [pc, #32]	@ (800cb6c <UTIL_LPM_EnterLowPower+0x64>)
 800cb4a:	691b      	ldr	r3, [r3, #16]
 800cb4c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800cb4e:	4b07      	ldr	r3, [pc, #28]	@ (800cb6c <UTIL_LPM_EnterLowPower+0x64>)
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	4798      	blx	r3
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f383 8810 	msr	PRIMASK, r3
}
 800cb5e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800cb60:	bf00      	nop
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	2000888c 	.word	0x2000888c
 800cb6c:	08010ea8 	.word	0x08010ea8
 800cb70:	20008890 	.word	0x20008890

0800cb74 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800cb74:	b480      	push	{r7}
 800cb76:	b087      	sub	sp, #28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	613b      	str	r3, [r7, #16]

  while( size-- )
 800cb8a:	e007      	b.n	800cb9c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800cb8c:	693a      	ldr	r2, [r7, #16]
 800cb8e:	1c53      	adds	r3, r2, #1
 800cb90:	613b      	str	r3, [r7, #16]
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	1c59      	adds	r1, r3, #1
 800cb96:	6179      	str	r1, [r7, #20]
 800cb98:	7812      	ldrb	r2, [r2, #0]
 800cb9a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800cb9c:	88fb      	ldrh	r3, [r7, #6]
 800cb9e:	1e5a      	subs	r2, r3, #1
 800cba0:	80fa      	strh	r2, [r7, #6]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1f2      	bne.n	800cb8c <UTIL_MEM_cpy_8+0x18>
    }
}
 800cba6:	bf00      	nop
 800cba8:	bf00      	nop
 800cbaa:	371c      	adds	r7, #28
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bc80      	pop	{r7}
 800cbb0:	4770      	bx	lr

0800cbb2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	b085      	sub	sp, #20
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	460b      	mov	r3, r1
 800cbbc:	70fb      	strb	r3, [r7, #3]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800cbc6:	e004      	b.n	800cbd2 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	1c5a      	adds	r2, r3, #1
 800cbcc:	60fa      	str	r2, [r7, #12]
 800cbce:	78fa      	ldrb	r2, [r7, #3]
 800cbd0:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800cbd2:	883b      	ldrh	r3, [r7, #0]
 800cbd4:	1e5a      	subs	r2, r3, #1
 800cbd6:	803a      	strh	r2, [r7, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1f5      	bne.n	800cbc8 <UTIL_MEM_set_8+0x16>
  }
}
 800cbdc:	bf00      	nop
 800cbde:	bf00      	nop
 800cbe0:	3714      	adds	r7, #20
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bc80      	pop	{r7}
 800cbe6:	4770      	bx	lr

0800cbe8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800cbe8:	b082      	sub	sp, #8
 800cbea:	b480      	push	{r7}
 800cbec:	b087      	sub	sp, #28
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	60f8      	str	r0, [r7, #12]
 800cbf2:	1d38      	adds	r0, r7, #4
 800cbf4:	e880 0006 	stmia.w	r0, {r1, r2}
 800cbf8:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	613b      	str	r3, [r7, #16]
 800cbfe:	2300      	movs	r3, #0
 800cc00:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc06:	4413      	add	r3, r2
 800cc08:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800cc0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	4413      	add	r3, r2
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	b21b      	sxth	r3, r3
 800cc1c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800cc1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cc22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc26:	db0a      	blt.n	800cc3e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800cc2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	b21b      	sxth	r3, r3
 800cc3c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	461a      	mov	r2, r3
 800cc42:	f107 0310 	add.w	r3, r7, #16
 800cc46:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cc4a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	371c      	adds	r7, #28
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bc80      	pop	{r7}
 800cc56:	b002      	add	sp, #8
 800cc58:	4770      	bx	lr
	...

0800cc5c <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b08a      	sub	sp, #40	@ 0x28
 800cc60:	af02      	add	r7, sp, #8
 800cc62:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800cc64:	2300      	movs	r3, #0
 800cc66:	61bb      	str	r3, [r7, #24]
 800cc68:	2300      	movs	r3, #0
 800cc6a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	613b      	str	r3, [r7, #16]
 800cc70:	2300      	movs	r3, #0
 800cc72:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800cc74:	4b14      	ldr	r3, [pc, #80]	@ (800ccc8 <SysTimeGet+0x6c>)
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	f107 0218 	add.w	r2, r7, #24
 800cc7c:	3204      	adds	r2, #4
 800cc7e:	4610      	mov	r0, r2
 800cc80:	4798      	blx	r3
 800cc82:	4603      	mov	r3, r0
 800cc84:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800cc86:	4b10      	ldr	r3, [pc, #64]	@ (800ccc8 <SysTimeGet+0x6c>)
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	4798      	blx	r3
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	b21b      	sxth	r3, r3
 800cc90:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800cc92:	4b0d      	ldr	r3, [pc, #52]	@ (800ccc8 <SysTimeGet+0x6c>)
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	4798      	blx	r3
 800cc98:	4603      	mov	r3, r0
 800cc9a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800cc9c:	f107 0010 	add.w	r0, r7, #16
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	f107 0208 	add.w	r2, r7, #8
 800ccaa:	ca06      	ldmia	r2, {r1, r2}
 800ccac:	f7ff ff9c 	bl	800cbe8 <SysTimeAdd>

  return sysTime;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	f107 0310 	add.w	r3, r7, #16
 800ccb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ccbc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	3720      	adds	r7, #32
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	08010f8c 	.word	0x08010f8c

0800cccc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b085      	sub	sp, #20
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  int i = 0;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800ccd8:	e00e      	b.n	800ccf8 <ee_skip_atoi+0x2c>
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	4613      	mov	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4413      	add	r3, r2
 800cce2:	005b      	lsls	r3, r3, #1
 800cce4:	4618      	mov	r0, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	1c59      	adds	r1, r3, #1
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	6011      	str	r1, [r2, #0]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	4403      	add	r3, r0
 800ccf4:	3b30      	subs	r3, #48	@ 0x30
 800ccf6:	60fb      	str	r3, [r7, #12]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	2b2f      	cmp	r3, #47	@ 0x2f
 800cd00:	d904      	bls.n	800cd0c <ee_skip_atoi+0x40>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b39      	cmp	r3, #57	@ 0x39
 800cd0a:	d9e6      	bls.n	800ccda <ee_skip_atoi+0xe>
  return i;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3714      	adds	r7, #20
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bc80      	pop	{r7}
 800cd16:	4770      	bx	lr

0800cd18 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b099      	sub	sp, #100	@ 0x64
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800cd26:	4b71      	ldr	r3, [pc, #452]	@ (800ceec <ee_number+0x1d4>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800cd2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d002      	beq.n	800cd3c <ee_number+0x24>
 800cd36:	4b6e      	ldr	r3, [pc, #440]	@ (800cef0 <ee_number+0x1d8>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	dd02      	ble.n	800cd48 <ee_number+0x30>
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	2b24      	cmp	r3, #36	@ 0x24
 800cd46:	dd01      	ble.n	800cd4c <ee_number+0x34>
 800cd48:	2300      	movs	r3, #0
 800cd4a:	e0ca      	b.n	800cee2 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800cd4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd4e:	f003 0301 	and.w	r3, r3, #1
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d001      	beq.n	800cd5a <ee_number+0x42>
 800cd56:	2330      	movs	r3, #48	@ 0x30
 800cd58:	e000      	b.n	800cd5c <ee_number+0x44>
 800cd5a:	2320      	movs	r3, #32
 800cd5c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 800cd60:	2300      	movs	r3, #0
 800cd62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 800cd66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd68:	f003 0302 	and.w	r3, r3, #2
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00b      	beq.n	800cd88 <ee_number+0x70>
  {
    if (num < 0)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	da08      	bge.n	800cd88 <ee_number+0x70>
    {
      sign = '-';
 800cd76:	232d      	movs	r3, #45	@ 0x2d
 800cd78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	425b      	negs	r3, r3
 800cd80:	607b      	str	r3, [r7, #4]
      size--;
 800cd82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cd84:	3b01      	subs	r3, #1
 800cd86:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d11e      	bne.n	800cdd0 <ee_number+0xb8>
    tmp[i++] = '0';
 800cd92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd94:	1c5a      	adds	r2, r3, #1
 800cd96:	657a      	str	r2, [r7, #84]	@ 0x54
 800cd98:	3360      	adds	r3, #96	@ 0x60
 800cd9a:	443b      	add	r3, r7
 800cd9c:	2230      	movs	r2, #48	@ 0x30
 800cd9e:	f803 2c50 	strb.w	r2, [r3, #-80]
 800cda2:	e018      	b.n	800cdd6 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	683a      	ldr	r2, [r7, #0]
 800cda8:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdac:	fb01 f202 	mul.w	r2, r1, r2
 800cdb0:	1a9b      	subs	r3, r3, r2
 800cdb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cdb4:	441a      	add	r2, r3
 800cdb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdb8:	1c59      	adds	r1, r3, #1
 800cdba:	6579      	str	r1, [r7, #84]	@ 0x54
 800cdbc:	7812      	ldrb	r2, [r2, #0]
 800cdbe:	3360      	adds	r3, #96	@ 0x60
 800cdc0:	443b      	add	r3, r7
 800cdc2:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdce:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1e6      	bne.n	800cda4 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800cdd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cdd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdda:	429a      	cmp	r2, r3
 800cddc:	dd01      	ble.n	800cde2 <ee_number+0xca>
 800cdde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cde0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 800cde2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cde4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800cdea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cdec:	f003 0301 	and.w	r3, r3, #1
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d112      	bne.n	800ce1a <ee_number+0x102>
 800cdf4:	e00c      	b.n	800ce10 <ee_number+0xf8>
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	1c5a      	adds	r2, r3, #1
 800cdfa:	60fa      	str	r2, [r7, #12]
 800cdfc:	2220      	movs	r2, #32
 800cdfe:	701a      	strb	r2, [r3, #0]
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	3b01      	subs	r3, #1
 800ce04:	60bb      	str	r3, [r7, #8]
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d101      	bne.n	800ce10 <ee_number+0xf8>
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	e068      	b.n	800cee2 <ee_number+0x1ca>
 800ce10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ce12:	1e5a      	subs	r2, r3, #1
 800ce14:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	dced      	bgt.n	800cdf6 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800ce1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d01b      	beq.n	800ce5a <ee_number+0x142>
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	1c5a      	adds	r2, r3, #1
 800ce26:	60fa      	str	r2, [r7, #12]
 800ce28:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800ce2c:	701a      	strb	r2, [r3, #0]
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	60bb      	str	r3, [r7, #8]
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10f      	bne.n	800ce5a <ee_number+0x142>
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	e051      	b.n	800cee2 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	1c5a      	adds	r2, r3, #1
 800ce42:	60fa      	str	r2, [r7, #12]
 800ce44:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800ce48:	701a      	strb	r2, [r3, #0]
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	60bb      	str	r3, [r7, #8]
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d101      	bne.n	800ce5a <ee_number+0x142>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	e043      	b.n	800cee2 <ee_number+0x1ca>
 800ce5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ce5c:	1e5a      	subs	r2, r3, #1
 800ce5e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	dcec      	bgt.n	800ce3e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800ce64:	e00c      	b.n	800ce80 <ee_number+0x168>
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	1c5a      	adds	r2, r3, #1
 800ce6a:	60fa      	str	r2, [r7, #12]
 800ce6c:	2230      	movs	r2, #48	@ 0x30
 800ce6e:	701a      	strb	r2, [r3, #0]
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	3b01      	subs	r3, #1
 800ce74:	60bb      	str	r3, [r7, #8]
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d101      	bne.n	800ce80 <ee_number+0x168>
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	e030      	b.n	800cee2 <ee_number+0x1ca>
 800ce80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce82:	1e5a      	subs	r2, r3, #1
 800ce84:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ce86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	dbec      	blt.n	800ce66 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800ce8c:	e010      	b.n	800ceb0 <ee_number+0x198>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	1c5a      	adds	r2, r3, #1
 800ce92:	60fa      	str	r2, [r7, #12]
 800ce94:	f107 0110 	add.w	r1, r7, #16
 800ce98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce9a:	440a      	add	r2, r1
 800ce9c:	7812      	ldrb	r2, [r2, #0]
 800ce9e:	701a      	strb	r2, [r3, #0]
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	3b01      	subs	r3, #1
 800cea4:	60bb      	str	r3, [r7, #8]
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d101      	bne.n	800ceb0 <ee_number+0x198>
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	e018      	b.n	800cee2 <ee_number+0x1ca>
 800ceb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ceb2:	1e5a      	subs	r2, r3, #1
 800ceb4:	657a      	str	r2, [r7, #84]	@ 0x54
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	dce9      	bgt.n	800ce8e <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800ceba:	e00c      	b.n	800ced6 <ee_number+0x1be>
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	1c5a      	adds	r2, r3, #1
 800cec0:	60fa      	str	r2, [r7, #12]
 800cec2:	2220      	movs	r2, #32
 800cec4:	701a      	strb	r2, [r3, #0]
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	60bb      	str	r3, [r7, #8]
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d101      	bne.n	800ced6 <ee_number+0x1be>
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	e005      	b.n	800cee2 <ee_number+0x1ca>
 800ced6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ced8:	1e5a      	subs	r2, r3, #1
 800ceda:	66ba      	str	r2, [r7, #104]	@ 0x68
 800cedc:	2b00      	cmp	r3, #0
 800cede:	dced      	bgt.n	800cebc <ee_number+0x1a4>

  return str;
 800cee0:	68fb      	ldr	r3, [r7, #12]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3764      	adds	r7, #100	@ 0x64
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bc80      	pop	{r7}
 800ceea:	4770      	bx	lr
 800ceec:	20004100 	.word	0x20004100
 800cef0:	20004104 	.word	0x20004104

0800cef4 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b092      	sub	sp, #72	@ 0x48
 800cef8:	af04      	add	r7, sp, #16
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	607a      	str	r2, [r7, #4]
 800cf00:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	dc01      	bgt.n	800cf0c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	e13e      	b.n	800d18a <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf10:	e128      	b.n	800d164 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800cf12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	1ad2      	subs	r2, r2, r3
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	f280 812e 	bge.w	800d17e <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	2b25      	cmp	r3, #37	@ 0x25
 800cf28:	d006      	beq.n	800cf38 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf2e:	1c59      	adds	r1, r3, #1
 800cf30:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cf32:	7812      	ldrb	r2, [r2, #0]
 800cf34:	701a      	strb	r2, [r3, #0]
      continue;
 800cf36:	e112      	b.n	800d15e <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	2b30      	cmp	r3, #48	@ 0x30
 800cf48:	d103      	bne.n	800cf52 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800cf4a:	6a3b      	ldr	r3, [r7, #32]
 800cf4c:	f043 0301 	orr.w	r3, r3, #1
 800cf50:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800cf52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf56:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	2b2f      	cmp	r3, #47	@ 0x2f
 800cf5e:	d908      	bls.n	800cf72 <tiny_vsnprintf_like+0x7e>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	2b39      	cmp	r3, #57	@ 0x39
 800cf66:	d804      	bhi.n	800cf72 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800cf68:	1d3b      	adds	r3, r7, #4
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7ff feae 	bl	800cccc <ee_skip_atoi>
 800cf70:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800cf72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf76:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800cf78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf7c:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800cf7e:	230a      	movs	r3, #10
 800cf80:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	3b58      	subs	r3, #88	@ 0x58
 800cf88:	2b20      	cmp	r3, #32
 800cf8a:	f200 8094 	bhi.w	800d0b6 <tiny_vsnprintf_like+0x1c2>
 800cf8e:	a201      	add	r2, pc, #4	@ (adr r2, 800cf94 <tiny_vsnprintf_like+0xa0>)
 800cf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf94:	0800d09f 	.word	0x0800d09f
 800cf98:	0800d0b7 	.word	0x0800d0b7
 800cf9c:	0800d0b7 	.word	0x0800d0b7
 800cfa0:	0800d0b7 	.word	0x0800d0b7
 800cfa4:	0800d0b7 	.word	0x0800d0b7
 800cfa8:	0800d0b7 	.word	0x0800d0b7
 800cfac:	0800d0b7 	.word	0x0800d0b7
 800cfb0:	0800d0b7 	.word	0x0800d0b7
 800cfb4:	0800d0b7 	.word	0x0800d0b7
 800cfb8:	0800d0b7 	.word	0x0800d0b7
 800cfbc:	0800d0b7 	.word	0x0800d0b7
 800cfc0:	0800d023 	.word	0x0800d023
 800cfc4:	0800d0ad 	.word	0x0800d0ad
 800cfc8:	0800d0b7 	.word	0x0800d0b7
 800cfcc:	0800d0b7 	.word	0x0800d0b7
 800cfd0:	0800d0b7 	.word	0x0800d0b7
 800cfd4:	0800d0b7 	.word	0x0800d0b7
 800cfd8:	0800d0ad 	.word	0x0800d0ad
 800cfdc:	0800d0b7 	.word	0x0800d0b7
 800cfe0:	0800d0b7 	.word	0x0800d0b7
 800cfe4:	0800d0b7 	.word	0x0800d0b7
 800cfe8:	0800d0b7 	.word	0x0800d0b7
 800cfec:	0800d0b7 	.word	0x0800d0b7
 800cff0:	0800d0b7 	.word	0x0800d0b7
 800cff4:	0800d0b7 	.word	0x0800d0b7
 800cff8:	0800d0b7 	.word	0x0800d0b7
 800cffc:	0800d0b7 	.word	0x0800d0b7
 800d000:	0800d043 	.word	0x0800d043
 800d004:	0800d0b7 	.word	0x0800d0b7
 800d008:	0800d103 	.word	0x0800d103
 800d00c:	0800d0b7 	.word	0x0800d0b7
 800d010:	0800d0b7 	.word	0x0800d0b7
 800d014:	0800d0a7 	.word	0x0800d0a7
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800d018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d01a:	1c5a      	adds	r2, r3, #1
 800d01c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d01e:	2220      	movs	r2, #32
 800d020:	701a      	strb	r2, [r3, #0]
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	3b01      	subs	r3, #1
 800d026:	61fb      	str	r3, [r7, #28]
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	dcf4      	bgt.n	800d018 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	1d1a      	adds	r2, r3, #4
 800d032:	603a      	str	r2, [r7, #0]
 800d034:	6819      	ldr	r1, [r3, #0]
 800d036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d038:	1c5a      	adds	r2, r3, #1
 800d03a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d03c:	b2ca      	uxtb	r2, r1
 800d03e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800d040:	e08d      	b.n	800d15e <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	1d1a      	adds	r2, r3, #4
 800d046:	603a      	str	r2, [r7, #0]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 800d04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d101      	bne.n	800d056 <tiny_vsnprintf_like+0x162>
 800d052:	4b50      	ldr	r3, [pc, #320]	@ (800d194 <tiny_vsnprintf_like+0x2a0>)
 800d054:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800d056:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d058:	f7f3 f8e2 	bl	8000220 <strlen>
 800d05c:	4603      	mov	r3, r0
 800d05e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800d060:	e004      	b.n	800d06c <tiny_vsnprintf_like+0x178>
 800d062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d064:	1c5a      	adds	r2, r3, #1
 800d066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d068:	2220      	movs	r2, #32
 800d06a:	701a      	strb	r2, [r3, #0]
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	1e5a      	subs	r2, r3, #1
 800d070:	61fa      	str	r2, [r7, #28]
 800d072:	693a      	ldr	r2, [r7, #16]
 800d074:	429a      	cmp	r2, r3
 800d076:	dbf4      	blt.n	800d062 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800d078:	2300      	movs	r3, #0
 800d07a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d07c:	e00a      	b.n	800d094 <tiny_vsnprintf_like+0x1a0>
 800d07e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d080:	1c53      	adds	r3, r2, #1
 800d082:	627b      	str	r3, [r7, #36]	@ 0x24
 800d084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d086:	1c59      	adds	r1, r3, #1
 800d088:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d08a:	7812      	ldrb	r2, [r2, #0]
 800d08c:	701a      	strb	r2, [r3, #0]
 800d08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d090:	3301      	adds	r3, #1
 800d092:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	429a      	cmp	r2, r3
 800d09a:	dbf0      	blt.n	800d07e <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800d09c:	e05f      	b.n	800d15e <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0a4:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800d0a6:	2310      	movs	r3, #16
 800d0a8:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 800d0aa:	e02b      	b.n	800d104 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
 800d0ae:	f043 0302 	orr.w	r3, r3, #2
 800d0b2:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800d0b4:	e025      	b.n	800d102 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	2b25      	cmp	r3, #37	@ 0x25
 800d0bc:	d004      	beq.n	800d0c8 <tiny_vsnprintf_like+0x1d4>
 800d0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c0:	1c5a      	adds	r2, r3, #1
 800d0c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d0c4:	2225      	movs	r2, #37	@ 0x25
 800d0c6:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800d0c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	1ad2      	subs	r2, r2, r3
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	da16      	bge.n	800d104 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d006      	beq.n	800d0ec <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e2:	1c59      	adds	r1, r3, #1
 800d0e4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d0e6:	7812      	ldrb	r2, [r2, #0]
 800d0e8:	701a      	strb	r2, [r3, #0]
 800d0ea:	e002      	b.n	800d0f2 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800d0f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	1ad2      	subs	r2, r2, r3
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	db2d      	blt.n	800d15c <tiny_vsnprintf_like+0x268>
 800d100:	e000      	b.n	800d104 <tiny_vsnprintf_like+0x210>
        break;
 800d102:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	2b6c      	cmp	r3, #108	@ 0x6c
 800d108:	d105      	bne.n	800d116 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	1d1a      	adds	r2, r3, #4
 800d10e:	603a      	str	r2, [r7, #0]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	637b      	str	r3, [r7, #52]	@ 0x34
 800d114:	e00f      	b.n	800d136 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800d116:	6a3b      	ldr	r3, [r7, #32]
 800d118:	f003 0302 	and.w	r3, r3, #2
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d005      	beq.n	800d12c <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	1d1a      	adds	r2, r3, #4
 800d124:	603a      	str	r2, [r7, #0]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	637b      	str	r3, [r7, #52]	@ 0x34
 800d12a:	e004      	b.n	800d136 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	1d1a      	adds	r2, r3, #4
 800d130:	603a      	str	r2, [r7, #0]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	1e5a      	subs	r2, r3, #1
 800d13a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	1acb      	subs	r3, r1, r3
 800d140:	1ad1      	subs	r1, r2, r3
 800d142:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d144:	6a3b      	ldr	r3, [r7, #32]
 800d146:	9302      	str	r3, [sp, #8]
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	9301      	str	r3, [sp, #4]
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	9300      	str	r3, [sp, #0]
 800d150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d152:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d154:	f7ff fde0 	bl	800cd18 <ee_number>
 800d158:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d15a:	e000      	b.n	800d15e <tiny_vsnprintf_like+0x26a>
        continue;
 800d15c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	3301      	adds	r3, #1
 800d162:	607b      	str	r3, [r7, #4]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f47f aed2 	bne.w	800cf12 <tiny_vsnprintf_like+0x1e>
 800d16e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	1ad2      	subs	r2, r2, r3
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	3b01      	subs	r3, #1
 800d178:	429a      	cmp	r2, r3
 800d17a:	f6bf aeca 	bge.w	800cf12 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800d17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d180:	2200      	movs	r2, #0
 800d182:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800d184:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	1ad3      	subs	r3, r2, r3
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3738      	adds	r7, #56	@ 0x38
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	08010ea0 	.word	0x08010ea0

0800d198 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b090      	sub	sp, #64	@ 0x40
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d1a0:	4b73      	ldr	r3, [pc, #460]	@ (800d370 <UTIL_SEQ_Run+0x1d8>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800d1a6:	4b72      	ldr	r3, [pc, #456]	@ (800d370 <UTIL_SEQ_Run+0x1d8>)
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	4013      	ands	r3, r2
 800d1ae:	4a70      	ldr	r2, [pc, #448]	@ (800d370 <UTIL_SEQ_Run+0x1d8>)
 800d1b0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800d1b2:	4b70      	ldr	r3, [pc, #448]	@ (800d374 <UTIL_SEQ_Run+0x1dc>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800d1b8:	4b6f      	ldr	r3, [pc, #444]	@ (800d378 <UTIL_SEQ_Run+0x1e0>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800d1be:	4b6f      	ldr	r3, [pc, #444]	@ (800d37c <UTIL_SEQ_Run+0x1e4>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800d1c4:	4b6e      	ldr	r3, [pc, #440]	@ (800d380 <UTIL_SEQ_Run+0x1e8>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d1ca:	e08d      	b.n	800d2e8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d1d0:	e002      	b.n	800d1d8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800d1d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d1d8:	4a6a      	ldr	r2, [pc, #424]	@ (800d384 <UTIL_SEQ_Run+0x1ec>)
 800d1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e2:	401a      	ands	r2, r3
 800d1e4:	4b62      	ldr	r3, [pc, #392]	@ (800d370 <UTIL_SEQ_Run+0x1d8>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d0f1      	beq.n	800d1d2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800d1ee:	4a65      	ldr	r2, [pc, #404]	@ (800d384 <UTIL_SEQ_Run+0x1ec>)
 800d1f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1f2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f8:	401a      	ands	r2, r3
 800d1fa:	4b5d      	ldr	r3, [pc, #372]	@ (800d370 <UTIL_SEQ_Run+0x1d8>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4013      	ands	r3, r2
 800d200:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d202:	4a60      	ldr	r2, [pc, #384]	@ (800d384 <UTIL_SEQ_Run+0x1ec>)
 800d204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d206:	00db      	lsls	r3, r3, #3
 800d208:	4413      	add	r3, r2
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d20e:	4013      	ands	r3, r2
 800d210:	2b00      	cmp	r3, #0
 800d212:	d106      	bne.n	800d222 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d214:	4a5b      	ldr	r2, [pc, #364]	@ (800d384 <UTIL_SEQ_Run+0x1ec>)
 800d216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d218:	00db      	lsls	r3, r3, #3
 800d21a:	4413      	add	r3, r2
 800d21c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d220:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d222:	4a58      	ldr	r2, [pc, #352]	@ (800d384 <UTIL_SEQ_Run+0x1ec>)
 800d224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d226:	00db      	lsls	r3, r3, #3
 800d228:	4413      	add	r3, r2
 800d22a:	685a      	ldr	r2, [r3, #4]
 800d22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22e:	4013      	ands	r3, r2
 800d230:	4618      	mov	r0, r3
 800d232:	f000 f907 	bl	800d444 <SEQ_BitPosition>
 800d236:	4603      	mov	r3, r0
 800d238:	461a      	mov	r2, r3
 800d23a:	4b53      	ldr	r3, [pc, #332]	@ (800d388 <UTIL_SEQ_Run+0x1f0>)
 800d23c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d23e:	4a51      	ldr	r2, [pc, #324]	@ (800d384 <UTIL_SEQ_Run+0x1ec>)
 800d240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d242:	00db      	lsls	r3, r3, #3
 800d244:	4413      	add	r3, r2
 800d246:	685a      	ldr	r2, [r3, #4]
 800d248:	4b4f      	ldr	r3, [pc, #316]	@ (800d388 <UTIL_SEQ_Run+0x1f0>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2101      	movs	r1, #1
 800d24e:	fa01 f303 	lsl.w	r3, r1, r3
 800d252:	43db      	mvns	r3, r3
 800d254:	401a      	ands	r2, r3
 800d256:	494b      	ldr	r1, [pc, #300]	@ (800d384 <UTIL_SEQ_Run+0x1ec>)
 800d258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d25a:	00db      	lsls	r3, r3, #3
 800d25c:	440b      	add	r3, r1
 800d25e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d260:	f3ef 8310 	mrs	r3, PRIMASK
 800d264:	61bb      	str	r3, [r7, #24]
  return(result);
 800d266:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d268:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d26a:	b672      	cpsid	i
}
 800d26c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d26e:	4b46      	ldr	r3, [pc, #280]	@ (800d388 <UTIL_SEQ_Run+0x1f0>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2201      	movs	r2, #1
 800d274:	fa02 f303 	lsl.w	r3, r2, r3
 800d278:	43da      	mvns	r2, r3
 800d27a:	4b3e      	ldr	r3, [pc, #248]	@ (800d374 <UTIL_SEQ_Run+0x1dc>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4013      	ands	r3, r2
 800d280:	4a3c      	ldr	r2, [pc, #240]	@ (800d374 <UTIL_SEQ_Run+0x1dc>)
 800d282:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d284:	2301      	movs	r3, #1
 800d286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d288:	e013      	b.n	800d2b2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d28c:	3b01      	subs	r3, #1
 800d28e:	4a3d      	ldr	r2, [pc, #244]	@ (800d384 <UTIL_SEQ_Run+0x1ec>)
 800d290:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d294:	4b3c      	ldr	r3, [pc, #240]	@ (800d388 <UTIL_SEQ_Run+0x1f0>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2201      	movs	r2, #1
 800d29a:	fa02 f303 	lsl.w	r3, r2, r3
 800d29e:	43da      	mvns	r2, r3
 800d2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	400a      	ands	r2, r1
 800d2a6:	4937      	ldr	r1, [pc, #220]	@ (800d384 <UTIL_SEQ_Run+0x1ec>)
 800d2a8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d2ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d1e8      	bne.n	800d28a <UTIL_SEQ_Run+0xf2>
 800d2b8:	6a3b      	ldr	r3, [r7, #32]
 800d2ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	f383 8810 	msr	PRIMASK, r3
}
 800d2c2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d2c4:	4b30      	ldr	r3, [pc, #192]	@ (800d388 <UTIL_SEQ_Run+0x1f0>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a30      	ldr	r2, [pc, #192]	@ (800d38c <UTIL_SEQ_Run+0x1f4>)
 800d2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2ce:	4798      	blx	r3

    local_taskset = TaskSet;
 800d2d0:	4b28      	ldr	r3, [pc, #160]	@ (800d374 <UTIL_SEQ_Run+0x1dc>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800d2d6:	4b28      	ldr	r3, [pc, #160]	@ (800d378 <UTIL_SEQ_Run+0x1e0>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800d2dc:	4b27      	ldr	r3, [pc, #156]	@ (800d37c <UTIL_SEQ_Run+0x1e4>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800d2e2:	4b27      	ldr	r3, [pc, #156]	@ (800d380 <UTIL_SEQ_Run+0x1e8>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d2e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ec:	401a      	ands	r2, r3
 800d2ee:	4b20      	ldr	r3, [pc, #128]	@ (800d370 <UTIL_SEQ_Run+0x1d8>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d005      	beq.n	800d304 <UTIL_SEQ_Run+0x16c>
 800d2f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fc:	4013      	ands	r3, r2
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	f43f af64 	beq.w	800d1cc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d304:	4b20      	ldr	r3, [pc, #128]	@ (800d388 <UTIL_SEQ_Run+0x1f0>)
 800d306:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d30a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d30c:	f000 f88e 	bl	800d42c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d310:	f3ef 8310 	mrs	r3, PRIMASK
 800d314:	613b      	str	r3, [r7, #16]
  return(result);
 800d316:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d318:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d31a:	b672      	cpsid	i
}
 800d31c:	bf00      	nop
  local_taskset = TaskSet;
 800d31e:	4b15      	ldr	r3, [pc, #84]	@ (800d374 <UTIL_SEQ_Run+0x1dc>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800d324:	4b14      	ldr	r3, [pc, #80]	@ (800d378 <UTIL_SEQ_Run+0x1e0>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800d32a:	4b14      	ldr	r3, [pc, #80]	@ (800d37c <UTIL_SEQ_Run+0x1e4>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d330:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d334:	401a      	ands	r2, r3
 800d336:	4b0e      	ldr	r3, [pc, #56]	@ (800d370 <UTIL_SEQ_Run+0x1d8>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4013      	ands	r3, r2
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d107      	bne.n	800d350 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800d340:	4b0f      	ldr	r3, [pc, #60]	@ (800d380 <UTIL_SEQ_Run+0x1e8>)
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d346:	4013      	ands	r3, r2
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d101      	bne.n	800d350 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800d34c:	f7f4 fc5a 	bl	8001c04 <UTIL_SEQ_Idle>
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f383 8810 	msr	PRIMASK, r3
}
 800d35a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800d35c:	f000 f86c 	bl	800d438 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d360:	4a03      	ldr	r2, [pc, #12]	@ (800d370 <UTIL_SEQ_Run+0x1d8>)
 800d362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d364:	6013      	str	r3, [r2, #0]

  return;
 800d366:	bf00      	nop
}
 800d368:	3740      	adds	r7, #64	@ 0x40
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	2000410c 	.word	0x2000410c
 800d374:	20008894 	.word	0x20008894
 800d378:	20008898 	.word	0x20008898
 800d37c:	20004108 	.word	0x20004108
 800d380:	2000889c 	.word	0x2000889c
 800d384:	200088a8 	.word	0x200088a8
 800d388:	200088a0 	.word	0x200088a0
 800d38c:	200088a4 	.word	0x200088a4

0800d390 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b088      	sub	sp, #32
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d39c:	f3ef 8310 	mrs	r3, PRIMASK
 800d3a0:	617b      	str	r3, [r7, #20]
  return(result);
 800d3a2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800d3a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d3a6:	b672      	cpsid	i
}
 800d3a8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f000 f84a 	bl	800d444 <SEQ_BitPosition>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	4a06      	ldr	r2, [pc, #24]	@ (800d3d0 <UTIL_SEQ_RegTask+0x40>)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	f383 8810 	msr	PRIMASK, r3
}
 800d3c6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800d3c8:	bf00      	nop
}
 800d3ca:	3720      	adds	r7, #32
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	200088a4 	.word	0x200088a4

0800d3d4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b087      	sub	sp, #28
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3de:	f3ef 8310 	mrs	r3, PRIMASK
 800d3e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d3e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d3e8:	b672      	cpsid	i
}
 800d3ea:	bf00      	nop

  TaskSet |= TaskId_bm;
 800d3ec:	4b0d      	ldr	r3, [pc, #52]	@ (800d424 <UTIL_SEQ_SetTask+0x50>)
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	4a0b      	ldr	r2, [pc, #44]	@ (800d424 <UTIL_SEQ_SetTask+0x50>)
 800d3f6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d3f8:	4a0b      	ldr	r2, [pc, #44]	@ (800d428 <UTIL_SEQ_SetTask+0x54>)
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	431a      	orrs	r2, r3
 800d404:	4908      	ldr	r1, [pc, #32]	@ (800d428 <UTIL_SEQ_SetTask+0x54>)
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	f383 8810 	msr	PRIMASK, r3
}
 800d416:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d418:	bf00      	nop
}
 800d41a:	371c      	adds	r7, #28
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bc80      	pop	{r7}
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	20008894 	.word	0x20008894
 800d428:	200088a8 	.word	0x200088a8

0800d42c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d42c:	b480      	push	{r7}
 800d42e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d430:	bf00      	nop
}
 800d432:	46bd      	mov	sp, r7
 800d434:	bc80      	pop	{r7}
 800d436:	4770      	bx	lr

0800d438 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d438:	b480      	push	{r7}
 800d43a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d43c:	bf00      	nop
}
 800d43e:	46bd      	mov	sp, r7
 800d440:	bc80      	pop	{r7}
 800d442:	4770      	bx	lr

0800d444 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d444:	b480      	push	{r7}
 800d446:	b085      	sub	sp, #20
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800d44c:	2300      	movs	r3, #0
 800d44e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d45a:	d204      	bcs.n	800d466 <SEQ_BitPosition+0x22>
 800d45c:	2310      	movs	r3, #16
 800d45e:	73fb      	strb	r3, [r7, #15]
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	041b      	lsls	r3, r3, #16
 800d464:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d46c:	d205      	bcs.n	800d47a <SEQ_BitPosition+0x36>
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
 800d470:	3308      	adds	r3, #8
 800d472:	73fb      	strb	r3, [r7, #15]
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	021b      	lsls	r3, r3, #8
 800d478:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d480:	d205      	bcs.n	800d48e <SEQ_BitPosition+0x4a>
 800d482:	7bfb      	ldrb	r3, [r7, #15]
 800d484:	3304      	adds	r3, #4
 800d486:	73fb      	strb	r3, [r7, #15]
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	011b      	lsls	r3, r3, #4
 800d48c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	0f1b      	lsrs	r3, r3, #28
 800d492:	4a07      	ldr	r2, [pc, #28]	@ (800d4b0 <SEQ_BitPosition+0x6c>)
 800d494:	5cd2      	ldrb	r2, [r2, r3]
 800d496:	7bfb      	ldrb	r3, [r7, #15]
 800d498:	4413      	add	r3, r2
 800d49a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	f1c3 031f 	rsb	r3, r3, #31
 800d4a2:	b2db      	uxtb	r3, r3
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3714      	adds	r7, #20
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bc80      	pop	{r7}
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	08011118 	.word	0x08011118

0800d4b4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800d4b8:	4b04      	ldr	r3, [pc, #16]	@ (800d4cc <UTIL_TIMER_Init+0x18>)
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800d4be:	4b04      	ldr	r3, [pc, #16]	@ (800d4d0 <UTIL_TIMER_Init+0x1c>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4798      	blx	r3
 800d4c4:	4603      	mov	r3, r0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	200088b0 	.word	0x200088b0
 800d4d0:	08010f60 	.word	0x08010f60

0800d4d4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	603b      	str	r3, [r7, #0]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d023      	beq.n	800d532 <UTIL_TIMER_Create+0x5e>
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d020      	beq.n	800d532 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800d4f6:	4b11      	ldr	r3, [pc, #68]	@ (800d53c <UTIL_TIMER_Create+0x68>)
 800d4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4fa:	68b8      	ldr	r0, [r7, #8]
 800d4fc:	4798      	blx	r3
 800d4fe:	4602      	mov	r2, r0
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2200      	movs	r2, #0
 800d508:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2200      	movs	r2, #0
 800d50e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2200      	movs	r2, #0
 800d514:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	683a      	ldr	r2, [r7, #0]
 800d51a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	69ba      	ldr	r2, [r7, #24]
 800d520:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	79fa      	ldrb	r2, [r7, #7]
 800d526:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2200      	movs	r2, #0
 800d52c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800d52e:	2300      	movs	r3, #0
 800d530:	e000      	b.n	800d534 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800d532:	2301      	movs	r3, #1
  }
}
 800d534:	4618      	mov	r0, r3
 800d536:	3710      	adds	r7, #16
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	08010f60 	.word	0x08010f60

0800d540 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b08a      	sub	sp, #40	@ 0x28
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d548:	2300      	movs	r3, #0
 800d54a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d056      	beq.n	800d602 <UTIL_TIMER_Start+0xc2>
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 f9a9 	bl	800d8ac <TimerExists>
 800d55a:	4603      	mov	r3, r0
 800d55c:	f083 0301 	eor.w	r3, r3, #1
 800d560:	b2db      	uxtb	r3, r3
 800d562:	2b00      	cmp	r3, #0
 800d564:	d04d      	beq.n	800d602 <UTIL_TIMER_Start+0xc2>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	7a5b      	ldrb	r3, [r3, #9]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d149      	bne.n	800d602 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d56e:	f3ef 8310 	mrs	r3, PRIMASK
 800d572:	613b      	str	r3, [r7, #16]
  return(result);
 800d574:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800d576:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d578:	b672      	cpsid	i
}
 800d57a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800d582:	4b24      	ldr	r3, [pc, #144]	@ (800d614 <UTIL_TIMER_Start+0xd4>)
 800d584:	6a1b      	ldr	r3, [r3, #32]
 800d586:	4798      	blx	r3
 800d588:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800d58a:	6a3a      	ldr	r2, [r7, #32]
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d201      	bcs.n	800d596 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a3a      	ldr	r2, [r7, #32]
 800d59a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800d5ae:	4b1a      	ldr	r3, [pc, #104]	@ (800d618 <UTIL_TIMER_Start+0xd8>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d106      	bne.n	800d5c4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800d5b6:	4b17      	ldr	r3, [pc, #92]	@ (800d614 <UTIL_TIMER_Start+0xd4>)
 800d5b8:	691b      	ldr	r3, [r3, #16]
 800d5ba:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 f9eb 	bl	800d998 <TimerInsertNewHeadTimer>
 800d5c2:	e017      	b.n	800d5f4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800d5c4:	4b13      	ldr	r3, [pc, #76]	@ (800d614 <UTIL_TIMER_Start+0xd4>)
 800d5c6:	699b      	ldr	r3, [r3, #24]
 800d5c8:	4798      	blx	r3
 800d5ca:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	441a      	add	r2, r3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	4b0e      	ldr	r3, [pc, #56]	@ (800d618 <UTIL_TIMER_Start+0xd8>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d203      	bcs.n	800d5ee <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 f9d6 	bl	800d998 <TimerInsertNewHeadTimer>
 800d5ec:	e002      	b.n	800d5f4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f9a2 	bl	800d938 <TimerInsertTimer>
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f383 8810 	msr	PRIMASK, r3
}
 800d5fe:	bf00      	nop
  {
 800d600:	e002      	b.n	800d608 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800d602:	2301      	movs	r3, #1
 800d604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800d608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3728      	adds	r7, #40	@ 0x28
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	08010f60 	.word	0x08010f60
 800d618:	200088b0 	.word	0x200088b0

0800d61c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b088      	sub	sp, #32
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d624:	2300      	movs	r3, #0
 800d626:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d05b      	beq.n	800d6e6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d62e:	f3ef 8310 	mrs	r3, PRIMASK
 800d632:	60fb      	str	r3, [r7, #12]
  return(result);
 800d634:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800d636:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d638:	b672      	cpsid	i
}
 800d63a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800d63c:	4b2d      	ldr	r3, [pc, #180]	@ (800d6f4 <UTIL_TIMER_Stop+0xd8>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800d642:	4b2c      	ldr	r3, [pc, #176]	@ (800d6f4 <UTIL_TIMER_Stop+0xd8>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2201      	movs	r2, #1
 800d64c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800d64e:	4b29      	ldr	r3, [pc, #164]	@ (800d6f4 <UTIL_TIMER_Stop+0xd8>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d041      	beq.n	800d6da <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2200      	movs	r2, #0
 800d65a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800d65c:	4b25      	ldr	r3, [pc, #148]	@ (800d6f4 <UTIL_TIMER_Stop+0xd8>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	429a      	cmp	r2, r3
 800d664:	d134      	bne.n	800d6d0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800d666:	4b23      	ldr	r3, [pc, #140]	@ (800d6f4 <UTIL_TIMER_Stop+0xd8>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2200      	movs	r2, #0
 800d66c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800d66e:	4b21      	ldr	r3, [pc, #132]	@ (800d6f4 <UTIL_TIMER_Stop+0xd8>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	695b      	ldr	r3, [r3, #20]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00a      	beq.n	800d68e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800d678:	4b1e      	ldr	r3, [pc, #120]	@ (800d6f4 <UTIL_TIMER_Stop+0xd8>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	695b      	ldr	r3, [r3, #20]
 800d67e:	4a1d      	ldr	r2, [pc, #116]	@ (800d6f4 <UTIL_TIMER_Stop+0xd8>)
 800d680:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800d682:	4b1c      	ldr	r3, [pc, #112]	@ (800d6f4 <UTIL_TIMER_Stop+0xd8>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4618      	mov	r0, r3
 800d688:	f000 f92c 	bl	800d8e4 <TimerSetTimeout>
 800d68c:	e023      	b.n	800d6d6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800d68e:	4b1a      	ldr	r3, [pc, #104]	@ (800d6f8 <UTIL_TIMER_Stop+0xdc>)
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	4798      	blx	r3
            TimerListHead = NULL;
 800d694:	4b17      	ldr	r3, [pc, #92]	@ (800d6f4 <UTIL_TIMER_Stop+0xd8>)
 800d696:	2200      	movs	r2, #0
 800d698:	601a      	str	r2, [r3, #0]
 800d69a:	e01c      	b.n	800d6d6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800d69c:	697a      	ldr	r2, [r7, #20]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d110      	bne.n	800d6c6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	695b      	ldr	r3, [r3, #20]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d006      	beq.n	800d6ba <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	695b      	ldr	r3, [r3, #20]
 800d6b0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	697a      	ldr	r2, [r7, #20]
 800d6b6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800d6b8:	e00d      	b.n	800d6d6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	697a      	ldr	r2, [r7, #20]
 800d6c2:	615a      	str	r2, [r3, #20]
            break;
 800d6c4:	e007      	b.n	800d6d6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	695b      	ldr	r3, [r3, #20]
 800d6ce:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1e2      	bne.n	800d69c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	77fb      	strb	r3, [r7, #31]
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	f383 8810 	msr	PRIMASK, r3
}
 800d6e4:	e001      	b.n	800d6ea <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800d6ea:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3720      	adds	r7, #32
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	200088b0 	.word	0x200088b0
 800d6f8:	08010f60 	.word	0x08010f60

0800d6fc <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b084      	sub	sp, #16
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d706:	2300      	movs	r3, #0
 800d708:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d102      	bne.n	800d716 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800d710:	2301      	movs	r3, #1
 800d712:	73fb      	strb	r3, [r7, #15]
 800d714:	e014      	b.n	800d740 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800d716:	4b0d      	ldr	r3, [pc, #52]	@ (800d74c <UTIL_TIMER_SetPeriod+0x50>)
 800d718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d71a:	6838      	ldr	r0, [r7, #0]
 800d71c:	4798      	blx	r3
 800d71e:	4602      	mov	r2, r0
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 f8c1 	bl	800d8ac <TimerExists>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d007      	beq.n	800d740 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f7ff ff73 	bl	800d61c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f7ff ff02 	bl	800d540 <UTIL_TIMER_Start>
 800d73c:	4603      	mov	r3, r0
 800d73e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800d740:	7bfb      	ldrb	r3, [r7, #15]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	08010f60 	.word	0x08010f60

0800d750 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800d750:	b590      	push	{r4, r7, lr}
 800d752:	b089      	sub	sp, #36	@ 0x24
 800d754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d756:	f3ef 8310 	mrs	r3, PRIMASK
 800d75a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d75c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800d75e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800d760:	b672      	cpsid	i
}
 800d762:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800d764:	4b38      	ldr	r3, [pc, #224]	@ (800d848 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800d766:	695b      	ldr	r3, [r3, #20]
 800d768:	4798      	blx	r3
 800d76a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800d76c:	4b36      	ldr	r3, [pc, #216]	@ (800d848 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800d76e:	691b      	ldr	r3, [r3, #16]
 800d770:	4798      	blx	r3
 800d772:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800d774:	693a      	ldr	r2, [r7, #16]
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800d77c:	4b33      	ldr	r3, [pc, #204]	@ (800d84c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d037      	beq.n	800d7f4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800d784:	4b31      	ldr	r3, [pc, #196]	@ (800d84c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	68fa      	ldr	r2, [r7, #12]
 800d790:	429a      	cmp	r2, r3
 800d792:	d206      	bcs.n	800d7a2 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	1ad2      	subs	r2, r2, r3
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	601a      	str	r2, [r3, #0]
 800d7a0:	e002      	b.n	800d7a8 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	695b      	ldr	r3, [r3, #20]
 800d7ac:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d1ea      	bne.n	800d78a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800d7b4:	e01e      	b.n	800d7f4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800d7b6:	4b25      	ldr	r3, [pc, #148]	@ (800d84c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800d7bc:	4b23      	ldr	r3, [pc, #140]	@ (800d84c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	695b      	ldr	r3, [r3, #20]
 800d7c2:	4a22      	ldr	r2, [pc, #136]	@ (800d84c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d7c4:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	69fa      	ldr	r2, [r7, #28]
 800d7d8:	6912      	ldr	r2, [r2, #16]
 800d7da:	4610      	mov	r0, r2
 800d7dc:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	7adb      	ldrb	r3, [r3, #11]
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d106      	bne.n	800d7f4 <UTIL_TIMER_IRQ_Handler+0xa4>
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	7a9b      	ldrb	r3, [r3, #10]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d102      	bne.n	800d7f4 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800d7ee:	69f8      	ldr	r0, [r7, #28]
 800d7f0:	f7ff fea6 	bl	800d540 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800d7f4:	4b15      	ldr	r3, [pc, #84]	@ (800d84c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00d      	beq.n	800d818 <UTIL_TIMER_IRQ_Handler+0xc8>
 800d7fc:	4b13      	ldr	r3, [pc, #76]	@ (800d84c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d0d7      	beq.n	800d7b6 <UTIL_TIMER_IRQ_Handler+0x66>
 800d806:	4b11      	ldr	r3, [pc, #68]	@ (800d84c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	681c      	ldr	r4, [r3, #0]
 800d80c:	4b0e      	ldr	r3, [pc, #56]	@ (800d848 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800d80e:	699b      	ldr	r3, [r3, #24]
 800d810:	4798      	blx	r3
 800d812:	4603      	mov	r3, r0
 800d814:	429c      	cmp	r4, r3
 800d816:	d3ce      	bcc.n	800d7b6 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800d818:	4b0c      	ldr	r3, [pc, #48]	@ (800d84c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d009      	beq.n	800d834 <UTIL_TIMER_IRQ_Handler+0xe4>
 800d820:	4b0a      	ldr	r3, [pc, #40]	@ (800d84c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	7a1b      	ldrb	r3, [r3, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d104      	bne.n	800d834 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800d82a:	4b08      	ldr	r3, [pc, #32]	@ (800d84c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4618      	mov	r0, r3
 800d830:	f000 f858 	bl	800d8e4 <TimerSetTimeout>
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f383 8810 	msr	PRIMASK, r3
}
 800d83e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800d840:	bf00      	nop
 800d842:	3724      	adds	r7, #36	@ 0x24
 800d844:	46bd      	mov	sp, r7
 800d846:	bd90      	pop	{r4, r7, pc}
 800d848:	08010f60 	.word	0x08010f60
 800d84c:	200088b0 	.word	0x200088b0

0800d850 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800d856:	4b06      	ldr	r3, [pc, #24]	@ (800d870 <UTIL_TIMER_GetCurrentTime+0x20>)
 800d858:	69db      	ldr	r3, [r3, #28]
 800d85a:	4798      	blx	r3
 800d85c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800d85e:	4b04      	ldr	r3, [pc, #16]	@ (800d870 <UTIL_TIMER_GetCurrentTime+0x20>)
 800d860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	4798      	blx	r3
 800d866:	4603      	mov	r3, r0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	08010f60 	.word	0x08010f60

0800d874 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800d87c:	4b0a      	ldr	r3, [pc, #40]	@ (800d8a8 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d87e:	69db      	ldr	r3, [r3, #28]
 800d880:	4798      	blx	r3
 800d882:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800d884:	4b08      	ldr	r3, [pc, #32]	@ (800d8a8 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	4798      	blx	r3
 800d88c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800d88e:	4b06      	ldr	r3, [pc, #24]	@ (800d8a8 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d892:	68f9      	ldr	r1, [r7, #12]
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	1a8a      	subs	r2, r1, r2
 800d898:	4610      	mov	r0, r2
 800d89a:	4798      	blx	r3
 800d89c:	4603      	mov	r3, r0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	08010f60 	.word	0x08010f60

0800d8ac <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d8b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d8e0 <TimerExists+0x34>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800d8ba:	e008      	b.n	800d8ce <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d101      	bne.n	800d8c8 <TimerExists+0x1c>
    {
      return true;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e006      	b.n	800d8d6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	695b      	ldr	r3, [r3, #20]
 800d8cc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d1f3      	bne.n	800d8bc <TimerExists+0x10>
  }
  return false;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3714      	adds	r7, #20
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bc80      	pop	{r7}
 800d8de:	4770      	bx	lr
 800d8e0:	200088b0 	.word	0x200088b0

0800d8e4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800d8e4:	b590      	push	{r4, r7, lr}
 800d8e6:	b085      	sub	sp, #20
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800d8ec:	4b11      	ldr	r3, [pc, #68]	@ (800d934 <TimerSetTimeout+0x50>)
 800d8ee:	6a1b      	ldr	r3, [r3, #32]
 800d8f0:	4798      	blx	r3
 800d8f2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681c      	ldr	r4, [r3, #0]
 800d8fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d934 <TimerSetTimeout+0x50>)
 800d900:	699b      	ldr	r3, [r3, #24]
 800d902:	4798      	blx	r3
 800d904:	4602      	mov	r2, r0
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	4413      	add	r3, r2
 800d90a:	429c      	cmp	r4, r3
 800d90c:	d207      	bcs.n	800d91e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800d90e:	4b09      	ldr	r3, [pc, #36]	@ (800d934 <TimerSetTimeout+0x50>)
 800d910:	699b      	ldr	r3, [r3, #24]
 800d912:	4798      	blx	r3
 800d914:	4602      	mov	r2, r0
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	441a      	add	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800d91e:	4b05      	ldr	r3, [pc, #20]	@ (800d934 <TimerSetTimeout+0x50>)
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	6812      	ldr	r2, [r2, #0]
 800d926:	4610      	mov	r0, r2
 800d928:	4798      	blx	r3
}
 800d92a:	bf00      	nop
 800d92c:	3714      	adds	r7, #20
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd90      	pop	{r4, r7, pc}
 800d932:	bf00      	nop
 800d934:	08010f60 	.word	0x08010f60

0800d938 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d940:	4b14      	ldr	r3, [pc, #80]	@ (800d994 <TimerInsertTimer+0x5c>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800d946:	4b13      	ldr	r3, [pc, #76]	@ (800d994 <TimerInsertTimer+0x5c>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	695b      	ldr	r3, [r3, #20]
 800d94c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800d94e:	e012      	b.n	800d976 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d905      	bls.n	800d968 <TimerInsertTimer+0x30>
    {
        cur = next;
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	695b      	ldr	r3, [r3, #20]
 800d964:	60bb      	str	r3, [r7, #8]
 800d966:	e006      	b.n	800d976 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	687a      	ldr	r2, [r7, #4]
 800d96c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	68ba      	ldr	r2, [r7, #8]
 800d972:	615a      	str	r2, [r3, #20]
        return;
 800d974:	e009      	b.n	800d98a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	695b      	ldr	r3, [r3, #20]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d1e8      	bne.n	800d950 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	615a      	str	r2, [r3, #20]
}
 800d98a:	3714      	adds	r7, #20
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bc80      	pop	{r7}
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop
 800d994:	200088b0 	.word	0x200088b0

0800d998 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d9a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d9d0 <TimerInsertNewHeadTimer+0x38>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d002      	beq.n	800d9b2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800d9b8:	4a05      	ldr	r2, [pc, #20]	@ (800d9d0 <TimerInsertNewHeadTimer+0x38>)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800d9be:	4b04      	ldr	r3, [pc, #16]	@ (800d9d0 <TimerInsertNewHeadTimer+0x38>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7ff ff8e 	bl	800d8e4 <TimerSetTimeout>
}
 800d9c8:	bf00      	nop
 800d9ca:	3710      	adds	r7, #16
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	200088b0 	.word	0x200088b0

0800d9d4 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800d9d8:	2218      	movs	r2, #24
 800d9da:	2100      	movs	r1, #0
 800d9dc:	4807      	ldr	r0, [pc, #28]	@ (800d9fc <UTIL_ADV_TRACE_Init+0x28>)
 800d9de:	f7ff f8e8 	bl	800cbb2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800d9e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d9e6:	2100      	movs	r1, #0
 800d9e8:	4805      	ldr	r0, [pc, #20]	@ (800da00 <UTIL_ADV_TRACE_Init+0x2c>)
 800d9ea:	f7ff f8e2 	bl	800cbb2 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800d9ee:	4b05      	ldr	r3, [pc, #20]	@ (800da04 <UTIL_ADV_TRACE_Init+0x30>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4805      	ldr	r0, [pc, #20]	@ (800da08 <UTIL_ADV_TRACE_Init+0x34>)
 800d9f4:	4798      	blx	r3
 800d9f6:	4603      	mov	r3, r0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	200088b4 	.word	0x200088b4
 800da00:	200088cc 	.word	0x200088cc
 800da04:	08010fa0 	.word	0x08010fa0
 800da08:	0800dc51 	.word	0x0800dc51

0800da0c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800da0c:	b408      	push	{r3}
 800da0e:	b580      	push	{r7, lr}
 800da10:	b08d      	sub	sp, #52	@ 0x34
 800da12:	af00      	add	r7, sp, #0
 800da14:	60f8      	str	r0, [r7, #12]
 800da16:	60b9      	str	r1, [r7, #8]
 800da18:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800da1a:	2300      	movs	r3, #0
 800da1c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800da1e:	2300      	movs	r3, #0
 800da20:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800da22:	4b37      	ldr	r3, [pc, #220]	@ (800db00 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800da24:	7a1b      	ldrb	r3, [r3, #8]
 800da26:	461a      	mov	r2, r3
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d902      	bls.n	800da34 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800da2e:	f06f 0304 	mvn.w	r3, #4
 800da32:	e05e      	b.n	800daf2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800da34:	4b32      	ldr	r3, [pc, #200]	@ (800db00 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800da36:	68da      	ldr	r2, [r3, #12]
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	4013      	ands	r3, r2
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d002      	beq.n	800da48 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800da42:	f06f 0305 	mvn.w	r3, #5
 800da46:	e054      	b.n	800daf2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800da48:	4b2d      	ldr	r3, [pc, #180]	@ (800db00 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d00a      	beq.n	800da66 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d007      	beq.n	800da66 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800da56:	4b2a      	ldr	r3, [pc, #168]	@ (800db00 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	f107 0116 	add.w	r1, r7, #22
 800da5e:	f107 0218 	add.w	r2, r7, #24
 800da62:	4610      	mov	r0, r2
 800da64:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800da66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800da6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800da6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800da74:	4823      	ldr	r0, [pc, #140]	@ (800db04 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800da76:	f7ff fa3d 	bl	800cef4 <tiny_vsnprintf_like>
 800da7a:	4603      	mov	r3, r0
 800da7c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 800da7e:	f000 f9f1 	bl	800de64 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800da82:	8afa      	ldrh	r2, [r7, #22]
 800da84:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800da86:	4413      	add	r3, r2
 800da88:	b29b      	uxth	r3, r3
 800da8a:	f107 0214 	add.w	r2, r7, #20
 800da8e:	4611      	mov	r1, r2
 800da90:	4618      	mov	r0, r3
 800da92:	f000 f969 	bl	800dd68 <TRACE_AllocateBufer>
 800da96:	4603      	mov	r3, r0
 800da98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da9c:	d025      	beq.n	800daea <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800da9e:	2300      	movs	r3, #0
 800daa0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800daa2:	e00e      	b.n	800dac2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800daa4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800daa6:	8aba      	ldrh	r2, [r7, #20]
 800daa8:	3330      	adds	r3, #48	@ 0x30
 800daaa:	443b      	add	r3, r7
 800daac:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800dab0:	4b15      	ldr	r3, [pc, #84]	@ (800db08 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800dab2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800dab4:	8abb      	ldrh	r3, [r7, #20]
 800dab6:	3301      	adds	r3, #1
 800dab8:	b29b      	uxth	r3, r3
 800daba:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800dabc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800dabe:	3301      	adds	r3, #1
 800dac0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800dac2:	8afb      	ldrh	r3, [r7, #22]
 800dac4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d3ec      	bcc.n	800daa4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800daca:	8abb      	ldrh	r3, [r7, #20]
 800dacc:	461a      	mov	r2, r3
 800dace:	4b0e      	ldr	r3, [pc, #56]	@ (800db08 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800dad0:	18d0      	adds	r0, r2, r3
 800dad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dad6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800dada:	f7ff fa0b 	bl	800cef4 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800dade:	f000 f9df 	bl	800dea0 <TRACE_UnLock>

    return TRACE_Send();
 800dae2:	f000 f831 	bl	800db48 <TRACE_Send>
 800dae6:	4603      	mov	r3, r0
 800dae8:	e003      	b.n	800daf2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800daea:	f000 f9d9 	bl	800dea0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800daee:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3734      	adds	r7, #52	@ 0x34
 800daf6:	46bd      	mov	sp, r7
 800daf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dafc:	b001      	add	sp, #4
 800dafe:	4770      	bx	lr
 800db00:	200088b4 	.word	0x200088b4
 800db04:	20008acc 	.word	0x20008acc
 800db08:	200088cc 	.word	0x200088cc

0800db0c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800db14:	4a03      	ldr	r2, [pc, #12]	@ (800db24 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6053      	str	r3, [r2, #4]
}
 800db1a:	bf00      	nop
 800db1c:	370c      	adds	r7, #12
 800db1e:	46bd      	mov	sp, r7
 800db20:	bc80      	pop	{r7}
 800db22:	4770      	bx	lr
 800db24:	200088b4 	.word	0x200088b4

0800db28 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	4603      	mov	r3, r0
 800db30:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800db32:	4a04      	ldr	r2, [pc, #16]	@ (800db44 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800db34:	79fb      	ldrb	r3, [r7, #7]
 800db36:	7213      	strb	r3, [r2, #8]
}
 800db38:	bf00      	nop
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bc80      	pop	{r7}
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	200088b4 	.word	0x200088b4

0800db48 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b088      	sub	sp, #32
 800db4c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800db4e:	2300      	movs	r3, #0
 800db50:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800db52:	2300      	movs	r3, #0
 800db54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db56:	f3ef 8310 	mrs	r3, PRIMASK
 800db5a:	613b      	str	r3, [r7, #16]
  return(result);
 800db5c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800db5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800db60:	b672      	cpsid	i
}
 800db62:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800db64:	f000 f9ba 	bl	800dedc <TRACE_IsLocked>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d15d      	bne.n	800dc2a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800db6e:	f000 f979 	bl	800de64 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800db72:	4b34      	ldr	r3, [pc, #208]	@ (800dc44 <TRACE_Send+0xfc>)
 800db74:	8a1a      	ldrh	r2, [r3, #16]
 800db76:	4b33      	ldr	r3, [pc, #204]	@ (800dc44 <TRACE_Send+0xfc>)
 800db78:	8a5b      	ldrh	r3, [r3, #18]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d04d      	beq.n	800dc1a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800db7e:	4b31      	ldr	r3, [pc, #196]	@ (800dc44 <TRACE_Send+0xfc>)
 800db80:	789b      	ldrb	r3, [r3, #2]
 800db82:	2b01      	cmp	r3, #1
 800db84:	d117      	bne.n	800dbb6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800db86:	4b2f      	ldr	r3, [pc, #188]	@ (800dc44 <TRACE_Send+0xfc>)
 800db88:	881a      	ldrh	r2, [r3, #0]
 800db8a:	4b2e      	ldr	r3, [pc, #184]	@ (800dc44 <TRACE_Send+0xfc>)
 800db8c:	8a1b      	ldrh	r3, [r3, #16]
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	b29a      	uxth	r2, r3
 800db92:	4b2c      	ldr	r3, [pc, #176]	@ (800dc44 <TRACE_Send+0xfc>)
 800db94:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800db96:	4b2b      	ldr	r3, [pc, #172]	@ (800dc44 <TRACE_Send+0xfc>)
 800db98:	2202      	movs	r2, #2
 800db9a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800db9c:	4b29      	ldr	r3, [pc, #164]	@ (800dc44 <TRACE_Send+0xfc>)
 800db9e:	2200      	movs	r2, #0
 800dba0:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800dba2:	4b28      	ldr	r3, [pc, #160]	@ (800dc44 <TRACE_Send+0xfc>)
 800dba4:	8a9b      	ldrh	r3, [r3, #20]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d105      	bne.n	800dbb6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800dbaa:	4b26      	ldr	r3, [pc, #152]	@ (800dc44 <TRACE_Send+0xfc>)
 800dbac:	2200      	movs	r2, #0
 800dbae:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800dbb0:	4b24      	ldr	r3, [pc, #144]	@ (800dc44 <TRACE_Send+0xfc>)
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800dbb6:	4b23      	ldr	r3, [pc, #140]	@ (800dc44 <TRACE_Send+0xfc>)
 800dbb8:	789b      	ldrb	r3, [r3, #2]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d115      	bne.n	800dbea <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800dbbe:	4b21      	ldr	r3, [pc, #132]	@ (800dc44 <TRACE_Send+0xfc>)
 800dbc0:	8a5a      	ldrh	r2, [r3, #18]
 800dbc2:	4b20      	ldr	r3, [pc, #128]	@ (800dc44 <TRACE_Send+0xfc>)
 800dbc4:	8a1b      	ldrh	r3, [r3, #16]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d908      	bls.n	800dbdc <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800dbca:	4b1e      	ldr	r3, [pc, #120]	@ (800dc44 <TRACE_Send+0xfc>)
 800dbcc:	8a5a      	ldrh	r2, [r3, #18]
 800dbce:	4b1d      	ldr	r3, [pc, #116]	@ (800dc44 <TRACE_Send+0xfc>)
 800dbd0:	8a1b      	ldrh	r3, [r3, #16]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	b29a      	uxth	r2, r3
 800dbd6:	4b1b      	ldr	r3, [pc, #108]	@ (800dc44 <TRACE_Send+0xfc>)
 800dbd8:	829a      	strh	r2, [r3, #20]
 800dbda:	e006      	b.n	800dbea <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800dbdc:	4b19      	ldr	r3, [pc, #100]	@ (800dc44 <TRACE_Send+0xfc>)
 800dbde:	8a1b      	ldrh	r3, [r3, #16]
 800dbe0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	4b17      	ldr	r3, [pc, #92]	@ (800dc44 <TRACE_Send+0xfc>)
 800dbe8:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800dbea:	4b16      	ldr	r3, [pc, #88]	@ (800dc44 <TRACE_Send+0xfc>)
 800dbec:	8a1b      	ldrh	r3, [r3, #16]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	4b15      	ldr	r3, [pc, #84]	@ (800dc48 <TRACE_Send+0x100>)
 800dbf2:	4413      	add	r3, r2
 800dbf4:	61bb      	str	r3, [r7, #24]
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f383 8810 	msr	PRIMASK, r3
}
 800dc00:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800dc02:	f7f4 f825 	bl	8001c50 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800dc06:	4b11      	ldr	r3, [pc, #68]	@ (800dc4c <TRACE_Send+0x104>)
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	4a0e      	ldr	r2, [pc, #56]	@ (800dc44 <TRACE_Send+0xfc>)
 800dc0c:	8a92      	ldrh	r2, [r2, #20]
 800dc0e:	4611      	mov	r1, r2
 800dc10:	69b8      	ldr	r0, [r7, #24]
 800dc12:	4798      	blx	r3
 800dc14:	4603      	mov	r3, r0
 800dc16:	77fb      	strb	r3, [r7, #31]
 800dc18:	e00d      	b.n	800dc36 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800dc1a:	f000 f941 	bl	800dea0 <TRACE_UnLock>
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	f383 8810 	msr	PRIMASK, r3
}
 800dc28:	e005      	b.n	800dc36 <TRACE_Send+0xee>
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f383 8810 	msr	PRIMASK, r3
}
 800dc34:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800dc36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3720      	adds	r7, #32
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	200088b4 	.word	0x200088b4
 800dc48:	200088cc 	.word	0x200088cc
 800dc4c:	08010fa0 	.word	0x08010fa0

0800dc50 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b088      	sub	sp, #32
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc5c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc60:	617b      	str	r3, [r7, #20]
  return(result);
 800dc62:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800dc64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc66:	b672      	cpsid	i
}
 800dc68:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800dc6a:	4b3c      	ldr	r3, [pc, #240]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dc6c:	789b      	ldrb	r3, [r3, #2]
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	d106      	bne.n	800dc80 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800dc72:	4b3a      	ldr	r3, [pc, #232]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800dc78:	4b38      	ldr	r3, [pc, #224]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	821a      	strh	r2, [r3, #16]
 800dc7e:	e00a      	b.n	800dc96 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800dc80:	4b36      	ldr	r3, [pc, #216]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dc82:	8a1a      	ldrh	r2, [r3, #16]
 800dc84:	4b35      	ldr	r3, [pc, #212]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dc86:	8a9b      	ldrh	r3, [r3, #20]
 800dc88:	4413      	add	r3, r2
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	4b32      	ldr	r3, [pc, #200]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dc94:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800dc96:	4b31      	ldr	r3, [pc, #196]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dc98:	8a1a      	ldrh	r2, [r3, #16]
 800dc9a:	4b30      	ldr	r3, [pc, #192]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dc9c:	8a5b      	ldrh	r3, [r3, #18]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d04d      	beq.n	800dd3e <TRACE_TxCpltCallback+0xee>
 800dca2:	4b2e      	ldr	r3, [pc, #184]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dca4:	8adb      	ldrh	r3, [r3, #22]
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d149      	bne.n	800dd3e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800dcaa:	4b2c      	ldr	r3, [pc, #176]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dcac:	789b      	ldrb	r3, [r3, #2]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d117      	bne.n	800dce2 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800dcb2:	4b2a      	ldr	r3, [pc, #168]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dcb4:	881a      	ldrh	r2, [r3, #0]
 800dcb6:	4b29      	ldr	r3, [pc, #164]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dcb8:	8a1b      	ldrh	r3, [r3, #16]
 800dcba:	1ad3      	subs	r3, r2, r3
 800dcbc:	b29a      	uxth	r2, r3
 800dcbe:	4b27      	ldr	r3, [pc, #156]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dcc0:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800dcc2:	4b26      	ldr	r3, [pc, #152]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dcc4:	2202      	movs	r2, #2
 800dcc6:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800dcc8:	4b24      	ldr	r3, [pc, #144]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800dcce:	4b23      	ldr	r3, [pc, #140]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dcd0:	8a9b      	ldrh	r3, [r3, #20]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d105      	bne.n	800dce2 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800dcd6:	4b21      	ldr	r3, [pc, #132]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dcd8:	2200      	movs	r2, #0
 800dcda:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800dcdc:	4b1f      	ldr	r3, [pc, #124]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dcde:	2200      	movs	r2, #0
 800dce0:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800dce2:	4b1e      	ldr	r3, [pc, #120]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dce4:	789b      	ldrb	r3, [r3, #2]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d115      	bne.n	800dd16 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800dcea:	4b1c      	ldr	r3, [pc, #112]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dcec:	8a5a      	ldrh	r2, [r3, #18]
 800dcee:	4b1b      	ldr	r3, [pc, #108]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dcf0:	8a1b      	ldrh	r3, [r3, #16]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d908      	bls.n	800dd08 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800dcf6:	4b19      	ldr	r3, [pc, #100]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dcf8:	8a5a      	ldrh	r2, [r3, #18]
 800dcfa:	4b18      	ldr	r3, [pc, #96]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dcfc:	8a1b      	ldrh	r3, [r3, #16]
 800dcfe:	1ad3      	subs	r3, r2, r3
 800dd00:	b29a      	uxth	r2, r3
 800dd02:	4b16      	ldr	r3, [pc, #88]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dd04:	829a      	strh	r2, [r3, #20]
 800dd06:	e006      	b.n	800dd16 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800dd08:	4b14      	ldr	r3, [pc, #80]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dd0a:	8a1b      	ldrh	r3, [r3, #16]
 800dd0c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	4b12      	ldr	r3, [pc, #72]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dd14:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800dd16:	4b11      	ldr	r3, [pc, #68]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dd18:	8a1b      	ldrh	r3, [r3, #16]
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	4b10      	ldr	r3, [pc, #64]	@ (800dd60 <TRACE_TxCpltCallback+0x110>)
 800dd1e:	4413      	add	r3, r2
 800dd20:	61fb      	str	r3, [r7, #28]
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	f383 8810 	msr	PRIMASK, r3
}
 800dd2c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800dd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800dd64 <TRACE_TxCpltCallback+0x114>)
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	4a0a      	ldr	r2, [pc, #40]	@ (800dd5c <TRACE_TxCpltCallback+0x10c>)
 800dd34:	8a92      	ldrh	r2, [r2, #20]
 800dd36:	4611      	mov	r1, r2
 800dd38:	69f8      	ldr	r0, [r7, #28]
 800dd3a:	4798      	blx	r3
 800dd3c:	e00a      	b.n	800dd54 <TRACE_TxCpltCallback+0x104>
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f383 8810 	msr	PRIMASK, r3
}
 800dd48:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800dd4a:	f7f3 ff89 	bl	8001c60 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800dd4e:	f000 f8a7 	bl	800dea0 <TRACE_UnLock>
  }
}
 800dd52:	bf00      	nop
 800dd54:	bf00      	nop
 800dd56:	3720      	adds	r7, #32
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	200088b4 	.word	0x200088b4
 800dd60:	200088cc 	.word	0x200088cc
 800dd64:	08010fa0 	.word	0x08010fa0

0800dd68 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b087      	sub	sp, #28
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	4603      	mov	r3, r0
 800dd70:	6039      	str	r1, [r7, #0]
 800dd72:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800dd74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd78:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd7a:	f3ef 8310 	mrs	r3, PRIMASK
 800dd7e:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd80:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800dd82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800dd84:	b672      	cpsid	i
}
 800dd86:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800dd88:	4b35      	ldr	r3, [pc, #212]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800dd8a:	8a5a      	ldrh	r2, [r3, #18]
 800dd8c:	4b34      	ldr	r3, [pc, #208]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800dd8e:	8a1b      	ldrh	r3, [r3, #16]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d11b      	bne.n	800ddcc <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800dd94:	4b32      	ldr	r3, [pc, #200]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800dd96:	8a5b      	ldrh	r3, [r3, #18]
 800dd98:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800dd9c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800dd9e:	88fa      	ldrh	r2, [r7, #6]
 800dda0:	8afb      	ldrh	r3, [r7, #22]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d33a      	bcc.n	800de1c <TRACE_AllocateBufer+0xb4>
 800dda6:	4b2e      	ldr	r3, [pc, #184]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800dda8:	8a1b      	ldrh	r3, [r3, #16]
 800ddaa:	88fa      	ldrh	r2, [r7, #6]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d235      	bcs.n	800de1c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800ddb0:	4b2b      	ldr	r3, [pc, #172]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800ddb6:	4b2a      	ldr	r3, [pc, #168]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800ddb8:	8a5a      	ldrh	r2, [r3, #18]
 800ddba:	4b29      	ldr	r3, [pc, #164]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800ddbc:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800ddbe:	4b28      	ldr	r3, [pc, #160]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800ddc0:	8a1b      	ldrh	r3, [r3, #16]
 800ddc2:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800ddc4:	4b26      	ldr	r3, [pc, #152]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	825a      	strh	r2, [r3, #18]
 800ddca:	e027      	b.n	800de1c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ddcc:	4b24      	ldr	r3, [pc, #144]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800ddce:	8a5a      	ldrh	r2, [r3, #18]
 800ddd0:	4b23      	ldr	r3, [pc, #140]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800ddd2:	8a1b      	ldrh	r3, [r3, #16]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d91b      	bls.n	800de10 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800ddd8:	4b21      	ldr	r3, [pc, #132]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800ddda:	8a5b      	ldrh	r3, [r3, #18]
 800dddc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800dde0:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800dde2:	88fa      	ldrh	r2, [r7, #6]
 800dde4:	8afb      	ldrh	r3, [r7, #22]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d318      	bcc.n	800de1c <TRACE_AllocateBufer+0xb4>
 800ddea:	4b1d      	ldr	r3, [pc, #116]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800ddec:	8a1b      	ldrh	r3, [r3, #16]
 800ddee:	88fa      	ldrh	r2, [r7, #6]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d213      	bcs.n	800de1c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800ddf4:	4b1a      	ldr	r3, [pc, #104]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800ddfa:	4b19      	ldr	r3, [pc, #100]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800ddfc:	8a5a      	ldrh	r2, [r3, #18]
 800ddfe:	4b18      	ldr	r3, [pc, #96]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800de00:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800de02:	4b17      	ldr	r3, [pc, #92]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800de04:	8a1b      	ldrh	r3, [r3, #16]
 800de06:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800de08:	4b15      	ldr	r3, [pc, #84]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800de0a:	2200      	movs	r2, #0
 800de0c:	825a      	strh	r2, [r3, #18]
 800de0e:	e005      	b.n	800de1c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800de10:	4b13      	ldr	r3, [pc, #76]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800de12:	8a1a      	ldrh	r2, [r3, #16]
 800de14:	4b12      	ldr	r3, [pc, #72]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800de16:	8a5b      	ldrh	r3, [r3, #18]
 800de18:	1ad3      	subs	r3, r2, r3
 800de1a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800de1c:	8afa      	ldrh	r2, [r7, #22]
 800de1e:	88fb      	ldrh	r3, [r7, #6]
 800de20:	429a      	cmp	r2, r3
 800de22:	d90f      	bls.n	800de44 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800de24:	4b0e      	ldr	r3, [pc, #56]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800de26:	8a5a      	ldrh	r2, [r3, #18]
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800de2c:	4b0c      	ldr	r3, [pc, #48]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800de2e:	8a5a      	ldrh	r2, [r3, #18]
 800de30:	88fb      	ldrh	r3, [r7, #6]
 800de32:	4413      	add	r3, r2
 800de34:	b29b      	uxth	r3, r3
 800de36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	4b08      	ldr	r3, [pc, #32]	@ (800de60 <TRACE_AllocateBufer+0xf8>)
 800de3e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800de40:	2300      	movs	r3, #0
 800de42:	82bb      	strh	r3, [r7, #20]
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	f383 8810 	msr	PRIMASK, r3
}
 800de4e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800de50:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800de54:	4618      	mov	r0, r3
 800de56:	371c      	adds	r7, #28
 800de58:	46bd      	mov	sp, r7
 800de5a:	bc80      	pop	{r7}
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	200088b4 	.word	0x200088b4

0800de64 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de6a:	f3ef 8310 	mrs	r3, PRIMASK
 800de6e:	607b      	str	r3, [r7, #4]
  return(result);
 800de70:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800de72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800de74:	b672      	cpsid	i
}
 800de76:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800de78:	4b08      	ldr	r3, [pc, #32]	@ (800de9c <TRACE_Lock+0x38>)
 800de7a:	8adb      	ldrh	r3, [r3, #22]
 800de7c:	3301      	adds	r3, #1
 800de7e:	b29a      	uxth	r2, r3
 800de80:	4b06      	ldr	r3, [pc, #24]	@ (800de9c <TRACE_Lock+0x38>)
 800de82:	82da      	strh	r2, [r3, #22]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	f383 8810 	msr	PRIMASK, r3
}
 800de8e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800de90:	bf00      	nop
 800de92:	3714      	adds	r7, #20
 800de94:	46bd      	mov	sp, r7
 800de96:	bc80      	pop	{r7}
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	200088b4 	.word	0x200088b4

0800dea0 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b085      	sub	sp, #20
 800dea4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dea6:	f3ef 8310 	mrs	r3, PRIMASK
 800deaa:	607b      	str	r3, [r7, #4]
  return(result);
 800deac:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800deae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800deb0:	b672      	cpsid	i
}
 800deb2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800deb4:	4b08      	ldr	r3, [pc, #32]	@ (800ded8 <TRACE_UnLock+0x38>)
 800deb6:	8adb      	ldrh	r3, [r3, #22]
 800deb8:	3b01      	subs	r3, #1
 800deba:	b29a      	uxth	r2, r3
 800debc:	4b06      	ldr	r3, [pc, #24]	@ (800ded8 <TRACE_UnLock+0x38>)
 800debe:	82da      	strh	r2, [r3, #22]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	f383 8810 	msr	PRIMASK, r3
}
 800deca:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800decc:	bf00      	nop
 800dece:	3714      	adds	r7, #20
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bc80      	pop	{r7}
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	200088b4 	.word	0x200088b4

0800dedc <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800dedc:	b480      	push	{r7}
 800dede:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800dee0:	4b05      	ldr	r3, [pc, #20]	@ (800def8 <TRACE_IsLocked+0x1c>)
 800dee2:	8adb      	ldrh	r3, [r3, #22]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	bf14      	ite	ne
 800dee8:	2301      	movne	r3, #1
 800deea:	2300      	moveq	r3, #0
 800deec:	b2db      	uxtb	r3, r3
}
 800deee:	4618      	mov	r0, r3
 800def0:	46bd      	mov	sp, r7
 800def2:	bc80      	pop	{r7}
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop
 800def8:	200088b4 	.word	0x200088b4

0800defc <__cvt>:
 800defc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df00:	b088      	sub	sp, #32
 800df02:	2b00      	cmp	r3, #0
 800df04:	461d      	mov	r5, r3
 800df06:	4614      	mov	r4, r2
 800df08:	bfbc      	itt	lt
 800df0a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800df0e:	4614      	movlt	r4, r2
 800df10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800df12:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800df14:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800df18:	bfb6      	itet	lt
 800df1a:	461d      	movlt	r5, r3
 800df1c:	2300      	movge	r3, #0
 800df1e:	232d      	movlt	r3, #45	@ 0x2d
 800df20:	7013      	strb	r3, [r2, #0]
 800df22:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800df24:	f023 0820 	bic.w	r8, r3, #32
 800df28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800df2c:	d005      	beq.n	800df3a <__cvt+0x3e>
 800df2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800df32:	d100      	bne.n	800df36 <__cvt+0x3a>
 800df34:	3601      	adds	r6, #1
 800df36:	2302      	movs	r3, #2
 800df38:	e000      	b.n	800df3c <__cvt+0x40>
 800df3a:	2303      	movs	r3, #3
 800df3c:	aa07      	add	r2, sp, #28
 800df3e:	9204      	str	r2, [sp, #16]
 800df40:	aa06      	add	r2, sp, #24
 800df42:	e9cd a202 	strd	sl, r2, [sp, #8]
 800df46:	e9cd 3600 	strd	r3, r6, [sp]
 800df4a:	4622      	mov	r2, r4
 800df4c:	462b      	mov	r3, r5
 800df4e:	f001 f847 	bl	800efe0 <_dtoa_r>
 800df52:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800df56:	4607      	mov	r7, r0
 800df58:	d119      	bne.n	800df8e <__cvt+0x92>
 800df5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df5c:	07db      	lsls	r3, r3, #31
 800df5e:	d50e      	bpl.n	800df7e <__cvt+0x82>
 800df60:	eb00 0906 	add.w	r9, r0, r6
 800df64:	2200      	movs	r2, #0
 800df66:	2300      	movs	r3, #0
 800df68:	4620      	mov	r0, r4
 800df6a:	4629      	mov	r1, r5
 800df6c:	f7f2 fd84 	bl	8000a78 <__aeabi_dcmpeq>
 800df70:	b108      	cbz	r0, 800df76 <__cvt+0x7a>
 800df72:	f8cd 901c 	str.w	r9, [sp, #28]
 800df76:	2230      	movs	r2, #48	@ 0x30
 800df78:	9b07      	ldr	r3, [sp, #28]
 800df7a:	454b      	cmp	r3, r9
 800df7c:	d31e      	bcc.n	800dfbc <__cvt+0xc0>
 800df7e:	9b07      	ldr	r3, [sp, #28]
 800df80:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800df82:	1bdb      	subs	r3, r3, r7
 800df84:	4638      	mov	r0, r7
 800df86:	6013      	str	r3, [r2, #0]
 800df88:	b008      	add	sp, #32
 800df8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df8e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800df92:	eb00 0906 	add.w	r9, r0, r6
 800df96:	d1e5      	bne.n	800df64 <__cvt+0x68>
 800df98:	7803      	ldrb	r3, [r0, #0]
 800df9a:	2b30      	cmp	r3, #48	@ 0x30
 800df9c:	d10a      	bne.n	800dfb4 <__cvt+0xb8>
 800df9e:	2200      	movs	r2, #0
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	4629      	mov	r1, r5
 800dfa6:	f7f2 fd67 	bl	8000a78 <__aeabi_dcmpeq>
 800dfaa:	b918      	cbnz	r0, 800dfb4 <__cvt+0xb8>
 800dfac:	f1c6 0601 	rsb	r6, r6, #1
 800dfb0:	f8ca 6000 	str.w	r6, [sl]
 800dfb4:	f8da 3000 	ldr.w	r3, [sl]
 800dfb8:	4499      	add	r9, r3
 800dfba:	e7d3      	b.n	800df64 <__cvt+0x68>
 800dfbc:	1c59      	adds	r1, r3, #1
 800dfbe:	9107      	str	r1, [sp, #28]
 800dfc0:	701a      	strb	r2, [r3, #0]
 800dfc2:	e7d9      	b.n	800df78 <__cvt+0x7c>

0800dfc4 <__exponent>:
 800dfc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfc6:	2900      	cmp	r1, #0
 800dfc8:	bfba      	itte	lt
 800dfca:	4249      	neglt	r1, r1
 800dfcc:	232d      	movlt	r3, #45	@ 0x2d
 800dfce:	232b      	movge	r3, #43	@ 0x2b
 800dfd0:	2909      	cmp	r1, #9
 800dfd2:	7002      	strb	r2, [r0, #0]
 800dfd4:	7043      	strb	r3, [r0, #1]
 800dfd6:	dd29      	ble.n	800e02c <__exponent+0x68>
 800dfd8:	f10d 0307 	add.w	r3, sp, #7
 800dfdc:	461d      	mov	r5, r3
 800dfde:	270a      	movs	r7, #10
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	fbb1 f6f7 	udiv	r6, r1, r7
 800dfe6:	fb07 1416 	mls	r4, r7, r6, r1
 800dfea:	3430      	adds	r4, #48	@ 0x30
 800dfec:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dff0:	460c      	mov	r4, r1
 800dff2:	2c63      	cmp	r4, #99	@ 0x63
 800dff4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800dff8:	4631      	mov	r1, r6
 800dffa:	dcf1      	bgt.n	800dfe0 <__exponent+0x1c>
 800dffc:	3130      	adds	r1, #48	@ 0x30
 800dffe:	1e94      	subs	r4, r2, #2
 800e000:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e004:	1c41      	adds	r1, r0, #1
 800e006:	4623      	mov	r3, r4
 800e008:	42ab      	cmp	r3, r5
 800e00a:	d30a      	bcc.n	800e022 <__exponent+0x5e>
 800e00c:	f10d 0309 	add.w	r3, sp, #9
 800e010:	1a9b      	subs	r3, r3, r2
 800e012:	42ac      	cmp	r4, r5
 800e014:	bf88      	it	hi
 800e016:	2300      	movhi	r3, #0
 800e018:	3302      	adds	r3, #2
 800e01a:	4403      	add	r3, r0
 800e01c:	1a18      	subs	r0, r3, r0
 800e01e:	b003      	add	sp, #12
 800e020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e022:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e026:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e02a:	e7ed      	b.n	800e008 <__exponent+0x44>
 800e02c:	2330      	movs	r3, #48	@ 0x30
 800e02e:	3130      	adds	r1, #48	@ 0x30
 800e030:	7083      	strb	r3, [r0, #2]
 800e032:	70c1      	strb	r1, [r0, #3]
 800e034:	1d03      	adds	r3, r0, #4
 800e036:	e7f1      	b.n	800e01c <__exponent+0x58>

0800e038 <_printf_float>:
 800e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03c:	b091      	sub	sp, #68	@ 0x44
 800e03e:	460c      	mov	r4, r1
 800e040:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800e044:	4616      	mov	r6, r2
 800e046:	461f      	mov	r7, r3
 800e048:	4605      	mov	r5, r0
 800e04a:	f000 fecd 	bl	800ede8 <_localeconv_r>
 800e04e:	6803      	ldr	r3, [r0, #0]
 800e050:	9308      	str	r3, [sp, #32]
 800e052:	4618      	mov	r0, r3
 800e054:	f7f2 f8e4 	bl	8000220 <strlen>
 800e058:	2300      	movs	r3, #0
 800e05a:	930e      	str	r3, [sp, #56]	@ 0x38
 800e05c:	f8d8 3000 	ldr.w	r3, [r8]
 800e060:	9009      	str	r0, [sp, #36]	@ 0x24
 800e062:	3307      	adds	r3, #7
 800e064:	f023 0307 	bic.w	r3, r3, #7
 800e068:	f103 0208 	add.w	r2, r3, #8
 800e06c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e070:	f8d4 b000 	ldr.w	fp, [r4]
 800e074:	f8c8 2000 	str.w	r2, [r8]
 800e078:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e07c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e080:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e082:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800e086:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e08a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e08e:	4b9d      	ldr	r3, [pc, #628]	@ (800e304 <_printf_float+0x2cc>)
 800e090:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e094:	f7f2 fd22 	bl	8000adc <__aeabi_dcmpun>
 800e098:	bb70      	cbnz	r0, 800e0f8 <_printf_float+0xc0>
 800e09a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e09e:	4b99      	ldr	r3, [pc, #612]	@ (800e304 <_printf_float+0x2cc>)
 800e0a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e0a4:	f7f2 fcfc 	bl	8000aa0 <__aeabi_dcmple>
 800e0a8:	bb30      	cbnz	r0, 800e0f8 <_printf_float+0xc0>
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	4640      	mov	r0, r8
 800e0b0:	4649      	mov	r1, r9
 800e0b2:	f7f2 fceb 	bl	8000a8c <__aeabi_dcmplt>
 800e0b6:	b110      	cbz	r0, 800e0be <_printf_float+0x86>
 800e0b8:	232d      	movs	r3, #45	@ 0x2d
 800e0ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0be:	4a92      	ldr	r2, [pc, #584]	@ (800e308 <_printf_float+0x2d0>)
 800e0c0:	4b92      	ldr	r3, [pc, #584]	@ (800e30c <_printf_float+0x2d4>)
 800e0c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e0c6:	bf94      	ite	ls
 800e0c8:	4690      	movls	r8, r2
 800e0ca:	4698      	movhi	r8, r3
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	6123      	str	r3, [r4, #16]
 800e0d0:	f02b 0304 	bic.w	r3, fp, #4
 800e0d4:	6023      	str	r3, [r4, #0]
 800e0d6:	f04f 0900 	mov.w	r9, #0
 800e0da:	9700      	str	r7, [sp, #0]
 800e0dc:	4633      	mov	r3, r6
 800e0de:	aa0f      	add	r2, sp, #60	@ 0x3c
 800e0e0:	4621      	mov	r1, r4
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	f000 fa7e 	bl	800e5e4 <_printf_common>
 800e0e8:	3001      	adds	r0, #1
 800e0ea:	f040 808f 	bne.w	800e20c <_printf_float+0x1d4>
 800e0ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e0f2:	b011      	add	sp, #68	@ 0x44
 800e0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0f8:	4642      	mov	r2, r8
 800e0fa:	464b      	mov	r3, r9
 800e0fc:	4640      	mov	r0, r8
 800e0fe:	4649      	mov	r1, r9
 800e100:	f7f2 fcec 	bl	8000adc <__aeabi_dcmpun>
 800e104:	b140      	cbz	r0, 800e118 <_printf_float+0xe0>
 800e106:	464b      	mov	r3, r9
 800e108:	2b00      	cmp	r3, #0
 800e10a:	bfbc      	itt	lt
 800e10c:	232d      	movlt	r3, #45	@ 0x2d
 800e10e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e112:	4a7f      	ldr	r2, [pc, #508]	@ (800e310 <_printf_float+0x2d8>)
 800e114:	4b7f      	ldr	r3, [pc, #508]	@ (800e314 <_printf_float+0x2dc>)
 800e116:	e7d4      	b.n	800e0c2 <_printf_float+0x8a>
 800e118:	6863      	ldr	r3, [r4, #4]
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800e120:	d13f      	bne.n	800e1a2 <_printf_float+0x16a>
 800e122:	2306      	movs	r3, #6
 800e124:	6063      	str	r3, [r4, #4]
 800e126:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800e12a:	2200      	movs	r2, #0
 800e12c:	6023      	str	r3, [r4, #0]
 800e12e:	9206      	str	r2, [sp, #24]
 800e130:	aa0e      	add	r2, sp, #56	@ 0x38
 800e132:	e9cd a204 	strd	sl, r2, [sp, #16]
 800e136:	aa0d      	add	r2, sp, #52	@ 0x34
 800e138:	9203      	str	r2, [sp, #12]
 800e13a:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800e13e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e142:	6863      	ldr	r3, [r4, #4]
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	4642      	mov	r2, r8
 800e148:	464b      	mov	r3, r9
 800e14a:	4628      	mov	r0, r5
 800e14c:	910a      	str	r1, [sp, #40]	@ 0x28
 800e14e:	f7ff fed5 	bl	800defc <__cvt>
 800e152:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e154:	2947      	cmp	r1, #71	@ 0x47
 800e156:	4680      	mov	r8, r0
 800e158:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e15a:	d128      	bne.n	800e1ae <_printf_float+0x176>
 800e15c:	1cc8      	adds	r0, r1, #3
 800e15e:	db02      	blt.n	800e166 <_printf_float+0x12e>
 800e160:	6863      	ldr	r3, [r4, #4]
 800e162:	4299      	cmp	r1, r3
 800e164:	dd40      	ble.n	800e1e8 <_printf_float+0x1b0>
 800e166:	f1aa 0a02 	sub.w	sl, sl, #2
 800e16a:	fa5f fa8a 	uxtb.w	sl, sl
 800e16e:	3901      	subs	r1, #1
 800e170:	4652      	mov	r2, sl
 800e172:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e176:	910d      	str	r1, [sp, #52]	@ 0x34
 800e178:	f7ff ff24 	bl	800dfc4 <__exponent>
 800e17c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e17e:	1813      	adds	r3, r2, r0
 800e180:	2a01      	cmp	r2, #1
 800e182:	4681      	mov	r9, r0
 800e184:	6123      	str	r3, [r4, #16]
 800e186:	dc02      	bgt.n	800e18e <_printf_float+0x156>
 800e188:	6822      	ldr	r2, [r4, #0]
 800e18a:	07d2      	lsls	r2, r2, #31
 800e18c:	d501      	bpl.n	800e192 <_printf_float+0x15a>
 800e18e:	3301      	adds	r3, #1
 800e190:	6123      	str	r3, [r4, #16]
 800e192:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800e196:	2b00      	cmp	r3, #0
 800e198:	d09f      	beq.n	800e0da <_printf_float+0xa2>
 800e19a:	232d      	movs	r3, #45	@ 0x2d
 800e19c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1a0:	e79b      	b.n	800e0da <_printf_float+0xa2>
 800e1a2:	2947      	cmp	r1, #71	@ 0x47
 800e1a4:	d1bf      	bne.n	800e126 <_printf_float+0xee>
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d1bd      	bne.n	800e126 <_printf_float+0xee>
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e7ba      	b.n	800e124 <_printf_float+0xec>
 800e1ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e1b2:	d9dc      	bls.n	800e16e <_printf_float+0x136>
 800e1b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e1b8:	d118      	bne.n	800e1ec <_printf_float+0x1b4>
 800e1ba:	2900      	cmp	r1, #0
 800e1bc:	6863      	ldr	r3, [r4, #4]
 800e1be:	dd0b      	ble.n	800e1d8 <_printf_float+0x1a0>
 800e1c0:	6121      	str	r1, [r4, #16]
 800e1c2:	b913      	cbnz	r3, 800e1ca <_printf_float+0x192>
 800e1c4:	6822      	ldr	r2, [r4, #0]
 800e1c6:	07d0      	lsls	r0, r2, #31
 800e1c8:	d502      	bpl.n	800e1d0 <_printf_float+0x198>
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	440b      	add	r3, r1
 800e1ce:	6123      	str	r3, [r4, #16]
 800e1d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e1d2:	f04f 0900 	mov.w	r9, #0
 800e1d6:	e7dc      	b.n	800e192 <_printf_float+0x15a>
 800e1d8:	b913      	cbnz	r3, 800e1e0 <_printf_float+0x1a8>
 800e1da:	6822      	ldr	r2, [r4, #0]
 800e1dc:	07d2      	lsls	r2, r2, #31
 800e1de:	d501      	bpl.n	800e1e4 <_printf_float+0x1ac>
 800e1e0:	3302      	adds	r3, #2
 800e1e2:	e7f4      	b.n	800e1ce <_printf_float+0x196>
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e7f2      	b.n	800e1ce <_printf_float+0x196>
 800e1e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e1ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1ee:	4299      	cmp	r1, r3
 800e1f0:	db05      	blt.n	800e1fe <_printf_float+0x1c6>
 800e1f2:	6823      	ldr	r3, [r4, #0]
 800e1f4:	6121      	str	r1, [r4, #16]
 800e1f6:	07d8      	lsls	r0, r3, #31
 800e1f8:	d5ea      	bpl.n	800e1d0 <_printf_float+0x198>
 800e1fa:	1c4b      	adds	r3, r1, #1
 800e1fc:	e7e7      	b.n	800e1ce <_printf_float+0x196>
 800e1fe:	2900      	cmp	r1, #0
 800e200:	bfd4      	ite	le
 800e202:	f1c1 0202 	rsble	r2, r1, #2
 800e206:	2201      	movgt	r2, #1
 800e208:	4413      	add	r3, r2
 800e20a:	e7e0      	b.n	800e1ce <_printf_float+0x196>
 800e20c:	6823      	ldr	r3, [r4, #0]
 800e20e:	055a      	lsls	r2, r3, #21
 800e210:	d407      	bmi.n	800e222 <_printf_float+0x1ea>
 800e212:	6923      	ldr	r3, [r4, #16]
 800e214:	4642      	mov	r2, r8
 800e216:	4631      	mov	r1, r6
 800e218:	4628      	mov	r0, r5
 800e21a:	47b8      	blx	r7
 800e21c:	3001      	adds	r0, #1
 800e21e:	d12b      	bne.n	800e278 <_printf_float+0x240>
 800e220:	e765      	b.n	800e0ee <_printf_float+0xb6>
 800e222:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e226:	f240 80dd 	bls.w	800e3e4 <_printf_float+0x3ac>
 800e22a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e22e:	2200      	movs	r2, #0
 800e230:	2300      	movs	r3, #0
 800e232:	f7f2 fc21 	bl	8000a78 <__aeabi_dcmpeq>
 800e236:	2800      	cmp	r0, #0
 800e238:	d033      	beq.n	800e2a2 <_printf_float+0x26a>
 800e23a:	4a37      	ldr	r2, [pc, #220]	@ (800e318 <_printf_float+0x2e0>)
 800e23c:	2301      	movs	r3, #1
 800e23e:	4631      	mov	r1, r6
 800e240:	4628      	mov	r0, r5
 800e242:	47b8      	blx	r7
 800e244:	3001      	adds	r0, #1
 800e246:	f43f af52 	beq.w	800e0ee <_printf_float+0xb6>
 800e24a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800e24e:	4543      	cmp	r3, r8
 800e250:	db02      	blt.n	800e258 <_printf_float+0x220>
 800e252:	6823      	ldr	r3, [r4, #0]
 800e254:	07d8      	lsls	r0, r3, #31
 800e256:	d50f      	bpl.n	800e278 <_printf_float+0x240>
 800e258:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e25c:	4631      	mov	r1, r6
 800e25e:	4628      	mov	r0, r5
 800e260:	47b8      	blx	r7
 800e262:	3001      	adds	r0, #1
 800e264:	f43f af43 	beq.w	800e0ee <_printf_float+0xb6>
 800e268:	f04f 0900 	mov.w	r9, #0
 800e26c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e270:	f104 0a1a 	add.w	sl, r4, #26
 800e274:	45c8      	cmp	r8, r9
 800e276:	dc09      	bgt.n	800e28c <_printf_float+0x254>
 800e278:	6823      	ldr	r3, [r4, #0]
 800e27a:	079b      	lsls	r3, r3, #30
 800e27c:	f100 8103 	bmi.w	800e486 <_printf_float+0x44e>
 800e280:	68e0      	ldr	r0, [r4, #12]
 800e282:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e284:	4298      	cmp	r0, r3
 800e286:	bfb8      	it	lt
 800e288:	4618      	movlt	r0, r3
 800e28a:	e732      	b.n	800e0f2 <_printf_float+0xba>
 800e28c:	2301      	movs	r3, #1
 800e28e:	4652      	mov	r2, sl
 800e290:	4631      	mov	r1, r6
 800e292:	4628      	mov	r0, r5
 800e294:	47b8      	blx	r7
 800e296:	3001      	adds	r0, #1
 800e298:	f43f af29 	beq.w	800e0ee <_printf_float+0xb6>
 800e29c:	f109 0901 	add.w	r9, r9, #1
 800e2a0:	e7e8      	b.n	800e274 <_printf_float+0x23c>
 800e2a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	dc39      	bgt.n	800e31c <_printf_float+0x2e4>
 800e2a8:	4a1b      	ldr	r2, [pc, #108]	@ (800e318 <_printf_float+0x2e0>)
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	4631      	mov	r1, r6
 800e2ae:	4628      	mov	r0, r5
 800e2b0:	47b8      	blx	r7
 800e2b2:	3001      	adds	r0, #1
 800e2b4:	f43f af1b 	beq.w	800e0ee <_printf_float+0xb6>
 800e2b8:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800e2bc:	ea59 0303 	orrs.w	r3, r9, r3
 800e2c0:	d102      	bne.n	800e2c8 <_printf_float+0x290>
 800e2c2:	6823      	ldr	r3, [r4, #0]
 800e2c4:	07d9      	lsls	r1, r3, #31
 800e2c6:	d5d7      	bpl.n	800e278 <_printf_float+0x240>
 800e2c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e2cc:	4631      	mov	r1, r6
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	47b8      	blx	r7
 800e2d2:	3001      	adds	r0, #1
 800e2d4:	f43f af0b 	beq.w	800e0ee <_printf_float+0xb6>
 800e2d8:	f04f 0a00 	mov.w	sl, #0
 800e2dc:	f104 0b1a 	add.w	fp, r4, #26
 800e2e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2e2:	425b      	negs	r3, r3
 800e2e4:	4553      	cmp	r3, sl
 800e2e6:	dc01      	bgt.n	800e2ec <_printf_float+0x2b4>
 800e2e8:	464b      	mov	r3, r9
 800e2ea:	e793      	b.n	800e214 <_printf_float+0x1dc>
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	465a      	mov	r2, fp
 800e2f0:	4631      	mov	r1, r6
 800e2f2:	4628      	mov	r0, r5
 800e2f4:	47b8      	blx	r7
 800e2f6:	3001      	adds	r0, #1
 800e2f8:	f43f aef9 	beq.w	800e0ee <_printf_float+0xb6>
 800e2fc:	f10a 0a01 	add.w	sl, sl, #1
 800e300:	e7ee      	b.n	800e2e0 <_printf_float+0x2a8>
 800e302:	bf00      	nop
 800e304:	7fefffff 	.word	0x7fefffff
 800e308:	08011128 	.word	0x08011128
 800e30c:	0801112c 	.word	0x0801112c
 800e310:	08011130 	.word	0x08011130
 800e314:	08011134 	.word	0x08011134
 800e318:	08011138 	.word	0x08011138
 800e31c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e31e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800e322:	4553      	cmp	r3, sl
 800e324:	bfa8      	it	ge
 800e326:	4653      	movge	r3, sl
 800e328:	2b00      	cmp	r3, #0
 800e32a:	4699      	mov	r9, r3
 800e32c:	dc36      	bgt.n	800e39c <_printf_float+0x364>
 800e32e:	f04f 0b00 	mov.w	fp, #0
 800e332:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e336:	f104 021a 	add.w	r2, r4, #26
 800e33a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e33c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e33e:	eba3 0309 	sub.w	r3, r3, r9
 800e342:	455b      	cmp	r3, fp
 800e344:	dc31      	bgt.n	800e3aa <_printf_float+0x372>
 800e346:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e348:	459a      	cmp	sl, r3
 800e34a:	dc3a      	bgt.n	800e3c2 <_printf_float+0x38a>
 800e34c:	6823      	ldr	r3, [r4, #0]
 800e34e:	07da      	lsls	r2, r3, #31
 800e350:	d437      	bmi.n	800e3c2 <_printf_float+0x38a>
 800e352:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e354:	ebaa 0903 	sub.w	r9, sl, r3
 800e358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e35a:	ebaa 0303 	sub.w	r3, sl, r3
 800e35e:	4599      	cmp	r9, r3
 800e360:	bfa8      	it	ge
 800e362:	4699      	movge	r9, r3
 800e364:	f1b9 0f00 	cmp.w	r9, #0
 800e368:	dc33      	bgt.n	800e3d2 <_printf_float+0x39a>
 800e36a:	f04f 0800 	mov.w	r8, #0
 800e36e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e372:	f104 0b1a 	add.w	fp, r4, #26
 800e376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e378:	ebaa 0303 	sub.w	r3, sl, r3
 800e37c:	eba3 0309 	sub.w	r3, r3, r9
 800e380:	4543      	cmp	r3, r8
 800e382:	f77f af79 	ble.w	800e278 <_printf_float+0x240>
 800e386:	2301      	movs	r3, #1
 800e388:	465a      	mov	r2, fp
 800e38a:	4631      	mov	r1, r6
 800e38c:	4628      	mov	r0, r5
 800e38e:	47b8      	blx	r7
 800e390:	3001      	adds	r0, #1
 800e392:	f43f aeac 	beq.w	800e0ee <_printf_float+0xb6>
 800e396:	f108 0801 	add.w	r8, r8, #1
 800e39a:	e7ec      	b.n	800e376 <_printf_float+0x33e>
 800e39c:	4642      	mov	r2, r8
 800e39e:	4631      	mov	r1, r6
 800e3a0:	4628      	mov	r0, r5
 800e3a2:	47b8      	blx	r7
 800e3a4:	3001      	adds	r0, #1
 800e3a6:	d1c2      	bne.n	800e32e <_printf_float+0x2f6>
 800e3a8:	e6a1      	b.n	800e0ee <_printf_float+0xb6>
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	4631      	mov	r1, r6
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	920a      	str	r2, [sp, #40]	@ 0x28
 800e3b2:	47b8      	blx	r7
 800e3b4:	3001      	adds	r0, #1
 800e3b6:	f43f ae9a 	beq.w	800e0ee <_printf_float+0xb6>
 800e3ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e3bc:	f10b 0b01 	add.w	fp, fp, #1
 800e3c0:	e7bb      	b.n	800e33a <_printf_float+0x302>
 800e3c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e3c6:	4631      	mov	r1, r6
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	47b8      	blx	r7
 800e3cc:	3001      	adds	r0, #1
 800e3ce:	d1c0      	bne.n	800e352 <_printf_float+0x31a>
 800e3d0:	e68d      	b.n	800e0ee <_printf_float+0xb6>
 800e3d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e3d4:	464b      	mov	r3, r9
 800e3d6:	4442      	add	r2, r8
 800e3d8:	4631      	mov	r1, r6
 800e3da:	4628      	mov	r0, r5
 800e3dc:	47b8      	blx	r7
 800e3de:	3001      	adds	r0, #1
 800e3e0:	d1c3      	bne.n	800e36a <_printf_float+0x332>
 800e3e2:	e684      	b.n	800e0ee <_printf_float+0xb6>
 800e3e4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800e3e8:	f1ba 0f01 	cmp.w	sl, #1
 800e3ec:	dc01      	bgt.n	800e3f2 <_printf_float+0x3ba>
 800e3ee:	07db      	lsls	r3, r3, #31
 800e3f0:	d536      	bpl.n	800e460 <_printf_float+0x428>
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	4642      	mov	r2, r8
 800e3f6:	4631      	mov	r1, r6
 800e3f8:	4628      	mov	r0, r5
 800e3fa:	47b8      	blx	r7
 800e3fc:	3001      	adds	r0, #1
 800e3fe:	f43f ae76 	beq.w	800e0ee <_printf_float+0xb6>
 800e402:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e406:	4631      	mov	r1, r6
 800e408:	4628      	mov	r0, r5
 800e40a:	47b8      	blx	r7
 800e40c:	3001      	adds	r0, #1
 800e40e:	f43f ae6e 	beq.w	800e0ee <_printf_float+0xb6>
 800e412:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e416:	2200      	movs	r2, #0
 800e418:	2300      	movs	r3, #0
 800e41a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e41e:	f7f2 fb2b 	bl	8000a78 <__aeabi_dcmpeq>
 800e422:	b9c0      	cbnz	r0, 800e456 <_printf_float+0x41e>
 800e424:	4653      	mov	r3, sl
 800e426:	f108 0201 	add.w	r2, r8, #1
 800e42a:	4631      	mov	r1, r6
 800e42c:	4628      	mov	r0, r5
 800e42e:	47b8      	blx	r7
 800e430:	3001      	adds	r0, #1
 800e432:	d10c      	bne.n	800e44e <_printf_float+0x416>
 800e434:	e65b      	b.n	800e0ee <_printf_float+0xb6>
 800e436:	2301      	movs	r3, #1
 800e438:	465a      	mov	r2, fp
 800e43a:	4631      	mov	r1, r6
 800e43c:	4628      	mov	r0, r5
 800e43e:	47b8      	blx	r7
 800e440:	3001      	adds	r0, #1
 800e442:	f43f ae54 	beq.w	800e0ee <_printf_float+0xb6>
 800e446:	f108 0801 	add.w	r8, r8, #1
 800e44a:	45d0      	cmp	r8, sl
 800e44c:	dbf3      	blt.n	800e436 <_printf_float+0x3fe>
 800e44e:	464b      	mov	r3, r9
 800e450:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e454:	e6df      	b.n	800e216 <_printf_float+0x1de>
 800e456:	f04f 0800 	mov.w	r8, #0
 800e45a:	f104 0b1a 	add.w	fp, r4, #26
 800e45e:	e7f4      	b.n	800e44a <_printf_float+0x412>
 800e460:	2301      	movs	r3, #1
 800e462:	4642      	mov	r2, r8
 800e464:	e7e1      	b.n	800e42a <_printf_float+0x3f2>
 800e466:	2301      	movs	r3, #1
 800e468:	464a      	mov	r2, r9
 800e46a:	4631      	mov	r1, r6
 800e46c:	4628      	mov	r0, r5
 800e46e:	47b8      	blx	r7
 800e470:	3001      	adds	r0, #1
 800e472:	f43f ae3c 	beq.w	800e0ee <_printf_float+0xb6>
 800e476:	f108 0801 	add.w	r8, r8, #1
 800e47a:	68e3      	ldr	r3, [r4, #12]
 800e47c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e47e:	1a5b      	subs	r3, r3, r1
 800e480:	4543      	cmp	r3, r8
 800e482:	dcf0      	bgt.n	800e466 <_printf_float+0x42e>
 800e484:	e6fc      	b.n	800e280 <_printf_float+0x248>
 800e486:	f04f 0800 	mov.w	r8, #0
 800e48a:	f104 0919 	add.w	r9, r4, #25
 800e48e:	e7f4      	b.n	800e47a <_printf_float+0x442>

0800e490 <malloc>:
 800e490:	4b02      	ldr	r3, [pc, #8]	@ (800e49c <malloc+0xc>)
 800e492:	4601      	mov	r1, r0
 800e494:	6818      	ldr	r0, [r3, #0]
 800e496:	f000 b825 	b.w	800e4e4 <_malloc_r>
 800e49a:	bf00      	nop
 800e49c:	2000411c 	.word	0x2000411c

0800e4a0 <sbrk_aligned>:
 800e4a0:	b570      	push	{r4, r5, r6, lr}
 800e4a2:	4e0f      	ldr	r6, [pc, #60]	@ (800e4e0 <sbrk_aligned+0x40>)
 800e4a4:	460c      	mov	r4, r1
 800e4a6:	6831      	ldr	r1, [r6, #0]
 800e4a8:	4605      	mov	r5, r0
 800e4aa:	b911      	cbnz	r1, 800e4b2 <sbrk_aligned+0x12>
 800e4ac:	f000 fcc2 	bl	800ee34 <_sbrk_r>
 800e4b0:	6030      	str	r0, [r6, #0]
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	f000 fcbd 	bl	800ee34 <_sbrk_r>
 800e4ba:	1c43      	adds	r3, r0, #1
 800e4bc:	d103      	bne.n	800e4c6 <sbrk_aligned+0x26>
 800e4be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	bd70      	pop	{r4, r5, r6, pc}
 800e4c6:	1cc4      	adds	r4, r0, #3
 800e4c8:	f024 0403 	bic.w	r4, r4, #3
 800e4cc:	42a0      	cmp	r0, r4
 800e4ce:	d0f8      	beq.n	800e4c2 <sbrk_aligned+0x22>
 800e4d0:	1a21      	subs	r1, r4, r0
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	f000 fcae 	bl	800ee34 <_sbrk_r>
 800e4d8:	3001      	adds	r0, #1
 800e4da:	d1f2      	bne.n	800e4c2 <sbrk_aligned+0x22>
 800e4dc:	e7ef      	b.n	800e4be <sbrk_aligned+0x1e>
 800e4de:	bf00      	nop
 800e4e0:	20008bcc 	.word	0x20008bcc

0800e4e4 <_malloc_r>:
 800e4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4e8:	1ccd      	adds	r5, r1, #3
 800e4ea:	f025 0503 	bic.w	r5, r5, #3
 800e4ee:	3508      	adds	r5, #8
 800e4f0:	2d0c      	cmp	r5, #12
 800e4f2:	bf38      	it	cc
 800e4f4:	250c      	movcc	r5, #12
 800e4f6:	2d00      	cmp	r5, #0
 800e4f8:	4606      	mov	r6, r0
 800e4fa:	db01      	blt.n	800e500 <_malloc_r+0x1c>
 800e4fc:	42a9      	cmp	r1, r5
 800e4fe:	d904      	bls.n	800e50a <_malloc_r+0x26>
 800e500:	230c      	movs	r3, #12
 800e502:	6033      	str	r3, [r6, #0]
 800e504:	2000      	movs	r0, #0
 800e506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e50a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e5e0 <_malloc_r+0xfc>
 800e50e:	f000 fa9f 	bl	800ea50 <__malloc_lock>
 800e512:	f8d8 3000 	ldr.w	r3, [r8]
 800e516:	461c      	mov	r4, r3
 800e518:	bb44      	cbnz	r4, 800e56c <_malloc_r+0x88>
 800e51a:	4629      	mov	r1, r5
 800e51c:	4630      	mov	r0, r6
 800e51e:	f7ff ffbf 	bl	800e4a0 <sbrk_aligned>
 800e522:	1c43      	adds	r3, r0, #1
 800e524:	4604      	mov	r4, r0
 800e526:	d158      	bne.n	800e5da <_malloc_r+0xf6>
 800e528:	f8d8 4000 	ldr.w	r4, [r8]
 800e52c:	4627      	mov	r7, r4
 800e52e:	2f00      	cmp	r7, #0
 800e530:	d143      	bne.n	800e5ba <_malloc_r+0xd6>
 800e532:	2c00      	cmp	r4, #0
 800e534:	d04b      	beq.n	800e5ce <_malloc_r+0xea>
 800e536:	6823      	ldr	r3, [r4, #0]
 800e538:	4639      	mov	r1, r7
 800e53a:	4630      	mov	r0, r6
 800e53c:	eb04 0903 	add.w	r9, r4, r3
 800e540:	f000 fc78 	bl	800ee34 <_sbrk_r>
 800e544:	4581      	cmp	r9, r0
 800e546:	d142      	bne.n	800e5ce <_malloc_r+0xea>
 800e548:	6821      	ldr	r1, [r4, #0]
 800e54a:	1a6d      	subs	r5, r5, r1
 800e54c:	4629      	mov	r1, r5
 800e54e:	4630      	mov	r0, r6
 800e550:	f7ff ffa6 	bl	800e4a0 <sbrk_aligned>
 800e554:	3001      	adds	r0, #1
 800e556:	d03a      	beq.n	800e5ce <_malloc_r+0xea>
 800e558:	6823      	ldr	r3, [r4, #0]
 800e55a:	442b      	add	r3, r5
 800e55c:	6023      	str	r3, [r4, #0]
 800e55e:	f8d8 3000 	ldr.w	r3, [r8]
 800e562:	685a      	ldr	r2, [r3, #4]
 800e564:	bb62      	cbnz	r2, 800e5c0 <_malloc_r+0xdc>
 800e566:	f8c8 7000 	str.w	r7, [r8]
 800e56a:	e00f      	b.n	800e58c <_malloc_r+0xa8>
 800e56c:	6822      	ldr	r2, [r4, #0]
 800e56e:	1b52      	subs	r2, r2, r5
 800e570:	d420      	bmi.n	800e5b4 <_malloc_r+0xd0>
 800e572:	2a0b      	cmp	r2, #11
 800e574:	d917      	bls.n	800e5a6 <_malloc_r+0xc2>
 800e576:	1961      	adds	r1, r4, r5
 800e578:	42a3      	cmp	r3, r4
 800e57a:	6025      	str	r5, [r4, #0]
 800e57c:	bf18      	it	ne
 800e57e:	6059      	strne	r1, [r3, #4]
 800e580:	6863      	ldr	r3, [r4, #4]
 800e582:	bf08      	it	eq
 800e584:	f8c8 1000 	streq.w	r1, [r8]
 800e588:	5162      	str	r2, [r4, r5]
 800e58a:	604b      	str	r3, [r1, #4]
 800e58c:	4630      	mov	r0, r6
 800e58e:	f000 fa65 	bl	800ea5c <__malloc_unlock>
 800e592:	f104 000b 	add.w	r0, r4, #11
 800e596:	1d23      	adds	r3, r4, #4
 800e598:	f020 0007 	bic.w	r0, r0, #7
 800e59c:	1ac2      	subs	r2, r0, r3
 800e59e:	bf1c      	itt	ne
 800e5a0:	1a1b      	subne	r3, r3, r0
 800e5a2:	50a3      	strne	r3, [r4, r2]
 800e5a4:	e7af      	b.n	800e506 <_malloc_r+0x22>
 800e5a6:	6862      	ldr	r2, [r4, #4]
 800e5a8:	42a3      	cmp	r3, r4
 800e5aa:	bf0c      	ite	eq
 800e5ac:	f8c8 2000 	streq.w	r2, [r8]
 800e5b0:	605a      	strne	r2, [r3, #4]
 800e5b2:	e7eb      	b.n	800e58c <_malloc_r+0xa8>
 800e5b4:	4623      	mov	r3, r4
 800e5b6:	6864      	ldr	r4, [r4, #4]
 800e5b8:	e7ae      	b.n	800e518 <_malloc_r+0x34>
 800e5ba:	463c      	mov	r4, r7
 800e5bc:	687f      	ldr	r7, [r7, #4]
 800e5be:	e7b6      	b.n	800e52e <_malloc_r+0x4a>
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	42a3      	cmp	r3, r4
 800e5c6:	d1fb      	bne.n	800e5c0 <_malloc_r+0xdc>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	6053      	str	r3, [r2, #4]
 800e5cc:	e7de      	b.n	800e58c <_malloc_r+0xa8>
 800e5ce:	230c      	movs	r3, #12
 800e5d0:	6033      	str	r3, [r6, #0]
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	f000 fa42 	bl	800ea5c <__malloc_unlock>
 800e5d8:	e794      	b.n	800e504 <_malloc_r+0x20>
 800e5da:	6005      	str	r5, [r0, #0]
 800e5dc:	e7d6      	b.n	800e58c <_malloc_r+0xa8>
 800e5de:	bf00      	nop
 800e5e0:	20008bd0 	.word	0x20008bd0

0800e5e4 <_printf_common>:
 800e5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5e8:	4616      	mov	r6, r2
 800e5ea:	4698      	mov	r8, r3
 800e5ec:	688a      	ldr	r2, [r1, #8]
 800e5ee:	690b      	ldr	r3, [r1, #16]
 800e5f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	bfb8      	it	lt
 800e5f8:	4613      	movlt	r3, r2
 800e5fa:	6033      	str	r3, [r6, #0]
 800e5fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e600:	4607      	mov	r7, r0
 800e602:	460c      	mov	r4, r1
 800e604:	b10a      	cbz	r2, 800e60a <_printf_common+0x26>
 800e606:	3301      	adds	r3, #1
 800e608:	6033      	str	r3, [r6, #0]
 800e60a:	6823      	ldr	r3, [r4, #0]
 800e60c:	0699      	lsls	r1, r3, #26
 800e60e:	bf42      	ittt	mi
 800e610:	6833      	ldrmi	r3, [r6, #0]
 800e612:	3302      	addmi	r3, #2
 800e614:	6033      	strmi	r3, [r6, #0]
 800e616:	6825      	ldr	r5, [r4, #0]
 800e618:	f015 0506 	ands.w	r5, r5, #6
 800e61c:	d106      	bne.n	800e62c <_printf_common+0x48>
 800e61e:	f104 0a19 	add.w	sl, r4, #25
 800e622:	68e3      	ldr	r3, [r4, #12]
 800e624:	6832      	ldr	r2, [r6, #0]
 800e626:	1a9b      	subs	r3, r3, r2
 800e628:	42ab      	cmp	r3, r5
 800e62a:	dc26      	bgt.n	800e67a <_printf_common+0x96>
 800e62c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e630:	6822      	ldr	r2, [r4, #0]
 800e632:	3b00      	subs	r3, #0
 800e634:	bf18      	it	ne
 800e636:	2301      	movne	r3, #1
 800e638:	0692      	lsls	r2, r2, #26
 800e63a:	d42b      	bmi.n	800e694 <_printf_common+0xb0>
 800e63c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e640:	4641      	mov	r1, r8
 800e642:	4638      	mov	r0, r7
 800e644:	47c8      	blx	r9
 800e646:	3001      	adds	r0, #1
 800e648:	d01e      	beq.n	800e688 <_printf_common+0xa4>
 800e64a:	6823      	ldr	r3, [r4, #0]
 800e64c:	6922      	ldr	r2, [r4, #16]
 800e64e:	f003 0306 	and.w	r3, r3, #6
 800e652:	2b04      	cmp	r3, #4
 800e654:	bf02      	ittt	eq
 800e656:	68e5      	ldreq	r5, [r4, #12]
 800e658:	6833      	ldreq	r3, [r6, #0]
 800e65a:	1aed      	subeq	r5, r5, r3
 800e65c:	68a3      	ldr	r3, [r4, #8]
 800e65e:	bf0c      	ite	eq
 800e660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e664:	2500      	movne	r5, #0
 800e666:	4293      	cmp	r3, r2
 800e668:	bfc4      	itt	gt
 800e66a:	1a9b      	subgt	r3, r3, r2
 800e66c:	18ed      	addgt	r5, r5, r3
 800e66e:	2600      	movs	r6, #0
 800e670:	341a      	adds	r4, #26
 800e672:	42b5      	cmp	r5, r6
 800e674:	d11a      	bne.n	800e6ac <_printf_common+0xc8>
 800e676:	2000      	movs	r0, #0
 800e678:	e008      	b.n	800e68c <_printf_common+0xa8>
 800e67a:	2301      	movs	r3, #1
 800e67c:	4652      	mov	r2, sl
 800e67e:	4641      	mov	r1, r8
 800e680:	4638      	mov	r0, r7
 800e682:	47c8      	blx	r9
 800e684:	3001      	adds	r0, #1
 800e686:	d103      	bne.n	800e690 <_printf_common+0xac>
 800e688:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e690:	3501      	adds	r5, #1
 800e692:	e7c6      	b.n	800e622 <_printf_common+0x3e>
 800e694:	18e1      	adds	r1, r4, r3
 800e696:	1c5a      	adds	r2, r3, #1
 800e698:	2030      	movs	r0, #48	@ 0x30
 800e69a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e69e:	4422      	add	r2, r4
 800e6a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e6a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e6a8:	3302      	adds	r3, #2
 800e6aa:	e7c7      	b.n	800e63c <_printf_common+0x58>
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	4622      	mov	r2, r4
 800e6b0:	4641      	mov	r1, r8
 800e6b2:	4638      	mov	r0, r7
 800e6b4:	47c8      	blx	r9
 800e6b6:	3001      	adds	r0, #1
 800e6b8:	d0e6      	beq.n	800e688 <_printf_common+0xa4>
 800e6ba:	3601      	adds	r6, #1
 800e6bc:	e7d9      	b.n	800e672 <_printf_common+0x8e>
	...

0800e6c0 <_printf_i>:
 800e6c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c4:	7e0f      	ldrb	r7, [r1, #24]
 800e6c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e6c8:	2f78      	cmp	r7, #120	@ 0x78
 800e6ca:	4691      	mov	r9, r2
 800e6cc:	4680      	mov	r8, r0
 800e6ce:	460c      	mov	r4, r1
 800e6d0:	469a      	mov	sl, r3
 800e6d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e6d6:	d807      	bhi.n	800e6e8 <_printf_i+0x28>
 800e6d8:	2f62      	cmp	r7, #98	@ 0x62
 800e6da:	d80a      	bhi.n	800e6f2 <_printf_i+0x32>
 800e6dc:	2f00      	cmp	r7, #0
 800e6de:	f000 80d2 	beq.w	800e886 <_printf_i+0x1c6>
 800e6e2:	2f58      	cmp	r7, #88	@ 0x58
 800e6e4:	f000 80b9 	beq.w	800e85a <_printf_i+0x19a>
 800e6e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e6f0:	e03a      	b.n	800e768 <_printf_i+0xa8>
 800e6f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e6f6:	2b15      	cmp	r3, #21
 800e6f8:	d8f6      	bhi.n	800e6e8 <_printf_i+0x28>
 800e6fa:	a101      	add	r1, pc, #4	@ (adr r1, 800e700 <_printf_i+0x40>)
 800e6fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e700:	0800e759 	.word	0x0800e759
 800e704:	0800e76d 	.word	0x0800e76d
 800e708:	0800e6e9 	.word	0x0800e6e9
 800e70c:	0800e6e9 	.word	0x0800e6e9
 800e710:	0800e6e9 	.word	0x0800e6e9
 800e714:	0800e6e9 	.word	0x0800e6e9
 800e718:	0800e76d 	.word	0x0800e76d
 800e71c:	0800e6e9 	.word	0x0800e6e9
 800e720:	0800e6e9 	.word	0x0800e6e9
 800e724:	0800e6e9 	.word	0x0800e6e9
 800e728:	0800e6e9 	.word	0x0800e6e9
 800e72c:	0800e86d 	.word	0x0800e86d
 800e730:	0800e797 	.word	0x0800e797
 800e734:	0800e827 	.word	0x0800e827
 800e738:	0800e6e9 	.word	0x0800e6e9
 800e73c:	0800e6e9 	.word	0x0800e6e9
 800e740:	0800e88f 	.word	0x0800e88f
 800e744:	0800e6e9 	.word	0x0800e6e9
 800e748:	0800e797 	.word	0x0800e797
 800e74c:	0800e6e9 	.word	0x0800e6e9
 800e750:	0800e6e9 	.word	0x0800e6e9
 800e754:	0800e82f 	.word	0x0800e82f
 800e758:	6833      	ldr	r3, [r6, #0]
 800e75a:	1d1a      	adds	r2, r3, #4
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	6032      	str	r2, [r6, #0]
 800e760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e764:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e768:	2301      	movs	r3, #1
 800e76a:	e09d      	b.n	800e8a8 <_printf_i+0x1e8>
 800e76c:	6833      	ldr	r3, [r6, #0]
 800e76e:	6820      	ldr	r0, [r4, #0]
 800e770:	1d19      	adds	r1, r3, #4
 800e772:	6031      	str	r1, [r6, #0]
 800e774:	0606      	lsls	r6, r0, #24
 800e776:	d501      	bpl.n	800e77c <_printf_i+0xbc>
 800e778:	681d      	ldr	r5, [r3, #0]
 800e77a:	e003      	b.n	800e784 <_printf_i+0xc4>
 800e77c:	0645      	lsls	r5, r0, #25
 800e77e:	d5fb      	bpl.n	800e778 <_printf_i+0xb8>
 800e780:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e784:	2d00      	cmp	r5, #0
 800e786:	da03      	bge.n	800e790 <_printf_i+0xd0>
 800e788:	232d      	movs	r3, #45	@ 0x2d
 800e78a:	426d      	negs	r5, r5
 800e78c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e790:	4859      	ldr	r0, [pc, #356]	@ (800e8f8 <_printf_i+0x238>)
 800e792:	230a      	movs	r3, #10
 800e794:	e011      	b.n	800e7ba <_printf_i+0xfa>
 800e796:	6821      	ldr	r1, [r4, #0]
 800e798:	6833      	ldr	r3, [r6, #0]
 800e79a:	0608      	lsls	r0, r1, #24
 800e79c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e7a0:	d402      	bmi.n	800e7a8 <_printf_i+0xe8>
 800e7a2:	0649      	lsls	r1, r1, #25
 800e7a4:	bf48      	it	mi
 800e7a6:	b2ad      	uxthmi	r5, r5
 800e7a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800e7aa:	4853      	ldr	r0, [pc, #332]	@ (800e8f8 <_printf_i+0x238>)
 800e7ac:	6033      	str	r3, [r6, #0]
 800e7ae:	bf14      	ite	ne
 800e7b0:	230a      	movne	r3, #10
 800e7b2:	2308      	moveq	r3, #8
 800e7b4:	2100      	movs	r1, #0
 800e7b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e7ba:	6866      	ldr	r6, [r4, #4]
 800e7bc:	60a6      	str	r6, [r4, #8]
 800e7be:	2e00      	cmp	r6, #0
 800e7c0:	bfa2      	ittt	ge
 800e7c2:	6821      	ldrge	r1, [r4, #0]
 800e7c4:	f021 0104 	bicge.w	r1, r1, #4
 800e7c8:	6021      	strge	r1, [r4, #0]
 800e7ca:	b90d      	cbnz	r5, 800e7d0 <_printf_i+0x110>
 800e7cc:	2e00      	cmp	r6, #0
 800e7ce:	d04b      	beq.n	800e868 <_printf_i+0x1a8>
 800e7d0:	4616      	mov	r6, r2
 800e7d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e7d6:	fb03 5711 	mls	r7, r3, r1, r5
 800e7da:	5dc7      	ldrb	r7, [r0, r7]
 800e7dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e7e0:	462f      	mov	r7, r5
 800e7e2:	42bb      	cmp	r3, r7
 800e7e4:	460d      	mov	r5, r1
 800e7e6:	d9f4      	bls.n	800e7d2 <_printf_i+0x112>
 800e7e8:	2b08      	cmp	r3, #8
 800e7ea:	d10b      	bne.n	800e804 <_printf_i+0x144>
 800e7ec:	6823      	ldr	r3, [r4, #0]
 800e7ee:	07df      	lsls	r7, r3, #31
 800e7f0:	d508      	bpl.n	800e804 <_printf_i+0x144>
 800e7f2:	6923      	ldr	r3, [r4, #16]
 800e7f4:	6861      	ldr	r1, [r4, #4]
 800e7f6:	4299      	cmp	r1, r3
 800e7f8:	bfde      	ittt	le
 800e7fa:	2330      	movle	r3, #48	@ 0x30
 800e7fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e800:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e804:	1b92      	subs	r2, r2, r6
 800e806:	6122      	str	r2, [r4, #16]
 800e808:	f8cd a000 	str.w	sl, [sp]
 800e80c:	464b      	mov	r3, r9
 800e80e:	aa03      	add	r2, sp, #12
 800e810:	4621      	mov	r1, r4
 800e812:	4640      	mov	r0, r8
 800e814:	f7ff fee6 	bl	800e5e4 <_printf_common>
 800e818:	3001      	adds	r0, #1
 800e81a:	d14a      	bne.n	800e8b2 <_printf_i+0x1f2>
 800e81c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e820:	b004      	add	sp, #16
 800e822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e826:	6823      	ldr	r3, [r4, #0]
 800e828:	f043 0320 	orr.w	r3, r3, #32
 800e82c:	6023      	str	r3, [r4, #0]
 800e82e:	4833      	ldr	r0, [pc, #204]	@ (800e8fc <_printf_i+0x23c>)
 800e830:	2778      	movs	r7, #120	@ 0x78
 800e832:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e836:	6823      	ldr	r3, [r4, #0]
 800e838:	6831      	ldr	r1, [r6, #0]
 800e83a:	061f      	lsls	r7, r3, #24
 800e83c:	f851 5b04 	ldr.w	r5, [r1], #4
 800e840:	d402      	bmi.n	800e848 <_printf_i+0x188>
 800e842:	065f      	lsls	r7, r3, #25
 800e844:	bf48      	it	mi
 800e846:	b2ad      	uxthmi	r5, r5
 800e848:	6031      	str	r1, [r6, #0]
 800e84a:	07d9      	lsls	r1, r3, #31
 800e84c:	bf44      	itt	mi
 800e84e:	f043 0320 	orrmi.w	r3, r3, #32
 800e852:	6023      	strmi	r3, [r4, #0]
 800e854:	b11d      	cbz	r5, 800e85e <_printf_i+0x19e>
 800e856:	2310      	movs	r3, #16
 800e858:	e7ac      	b.n	800e7b4 <_printf_i+0xf4>
 800e85a:	4827      	ldr	r0, [pc, #156]	@ (800e8f8 <_printf_i+0x238>)
 800e85c:	e7e9      	b.n	800e832 <_printf_i+0x172>
 800e85e:	6823      	ldr	r3, [r4, #0]
 800e860:	f023 0320 	bic.w	r3, r3, #32
 800e864:	6023      	str	r3, [r4, #0]
 800e866:	e7f6      	b.n	800e856 <_printf_i+0x196>
 800e868:	4616      	mov	r6, r2
 800e86a:	e7bd      	b.n	800e7e8 <_printf_i+0x128>
 800e86c:	6833      	ldr	r3, [r6, #0]
 800e86e:	6825      	ldr	r5, [r4, #0]
 800e870:	6961      	ldr	r1, [r4, #20]
 800e872:	1d18      	adds	r0, r3, #4
 800e874:	6030      	str	r0, [r6, #0]
 800e876:	062e      	lsls	r6, r5, #24
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	d501      	bpl.n	800e880 <_printf_i+0x1c0>
 800e87c:	6019      	str	r1, [r3, #0]
 800e87e:	e002      	b.n	800e886 <_printf_i+0x1c6>
 800e880:	0668      	lsls	r0, r5, #25
 800e882:	d5fb      	bpl.n	800e87c <_printf_i+0x1bc>
 800e884:	8019      	strh	r1, [r3, #0]
 800e886:	2300      	movs	r3, #0
 800e888:	6123      	str	r3, [r4, #16]
 800e88a:	4616      	mov	r6, r2
 800e88c:	e7bc      	b.n	800e808 <_printf_i+0x148>
 800e88e:	6833      	ldr	r3, [r6, #0]
 800e890:	1d1a      	adds	r2, r3, #4
 800e892:	6032      	str	r2, [r6, #0]
 800e894:	681e      	ldr	r6, [r3, #0]
 800e896:	6862      	ldr	r2, [r4, #4]
 800e898:	2100      	movs	r1, #0
 800e89a:	4630      	mov	r0, r6
 800e89c:	f7f1 fc70 	bl	8000180 <memchr>
 800e8a0:	b108      	cbz	r0, 800e8a6 <_printf_i+0x1e6>
 800e8a2:	1b80      	subs	r0, r0, r6
 800e8a4:	6060      	str	r0, [r4, #4]
 800e8a6:	6863      	ldr	r3, [r4, #4]
 800e8a8:	6123      	str	r3, [r4, #16]
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8b0:	e7aa      	b.n	800e808 <_printf_i+0x148>
 800e8b2:	6923      	ldr	r3, [r4, #16]
 800e8b4:	4632      	mov	r2, r6
 800e8b6:	4649      	mov	r1, r9
 800e8b8:	4640      	mov	r0, r8
 800e8ba:	47d0      	blx	sl
 800e8bc:	3001      	adds	r0, #1
 800e8be:	d0ad      	beq.n	800e81c <_printf_i+0x15c>
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	079b      	lsls	r3, r3, #30
 800e8c4:	d413      	bmi.n	800e8ee <_printf_i+0x22e>
 800e8c6:	68e0      	ldr	r0, [r4, #12]
 800e8c8:	9b03      	ldr	r3, [sp, #12]
 800e8ca:	4298      	cmp	r0, r3
 800e8cc:	bfb8      	it	lt
 800e8ce:	4618      	movlt	r0, r3
 800e8d0:	e7a6      	b.n	800e820 <_printf_i+0x160>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	4632      	mov	r2, r6
 800e8d6:	4649      	mov	r1, r9
 800e8d8:	4640      	mov	r0, r8
 800e8da:	47d0      	blx	sl
 800e8dc:	3001      	adds	r0, #1
 800e8de:	d09d      	beq.n	800e81c <_printf_i+0x15c>
 800e8e0:	3501      	adds	r5, #1
 800e8e2:	68e3      	ldr	r3, [r4, #12]
 800e8e4:	9903      	ldr	r1, [sp, #12]
 800e8e6:	1a5b      	subs	r3, r3, r1
 800e8e8:	42ab      	cmp	r3, r5
 800e8ea:	dcf2      	bgt.n	800e8d2 <_printf_i+0x212>
 800e8ec:	e7eb      	b.n	800e8c6 <_printf_i+0x206>
 800e8ee:	2500      	movs	r5, #0
 800e8f0:	f104 0619 	add.w	r6, r4, #25
 800e8f4:	e7f5      	b.n	800e8e2 <_printf_i+0x222>
 800e8f6:	bf00      	nop
 800e8f8:	0801113a 	.word	0x0801113a
 800e8fc:	0801114b 	.word	0x0801114b

0800e900 <__sflush_r>:
 800e900:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e906:	0716      	lsls	r6, r2, #28
 800e908:	4605      	mov	r5, r0
 800e90a:	460c      	mov	r4, r1
 800e90c:	d454      	bmi.n	800e9b8 <__sflush_r+0xb8>
 800e90e:	684b      	ldr	r3, [r1, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	dc02      	bgt.n	800e91a <__sflush_r+0x1a>
 800e914:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e916:	2b00      	cmp	r3, #0
 800e918:	dd48      	ble.n	800e9ac <__sflush_r+0xac>
 800e91a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e91c:	2e00      	cmp	r6, #0
 800e91e:	d045      	beq.n	800e9ac <__sflush_r+0xac>
 800e920:	2300      	movs	r3, #0
 800e922:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e926:	682f      	ldr	r7, [r5, #0]
 800e928:	6a21      	ldr	r1, [r4, #32]
 800e92a:	602b      	str	r3, [r5, #0]
 800e92c:	d030      	beq.n	800e990 <__sflush_r+0x90>
 800e92e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	0759      	lsls	r1, r3, #29
 800e934:	d505      	bpl.n	800e942 <__sflush_r+0x42>
 800e936:	6863      	ldr	r3, [r4, #4]
 800e938:	1ad2      	subs	r2, r2, r3
 800e93a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e93c:	b10b      	cbz	r3, 800e942 <__sflush_r+0x42>
 800e93e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e940:	1ad2      	subs	r2, r2, r3
 800e942:	2300      	movs	r3, #0
 800e944:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e946:	6a21      	ldr	r1, [r4, #32]
 800e948:	4628      	mov	r0, r5
 800e94a:	47b0      	blx	r6
 800e94c:	1c43      	adds	r3, r0, #1
 800e94e:	89a3      	ldrh	r3, [r4, #12]
 800e950:	d106      	bne.n	800e960 <__sflush_r+0x60>
 800e952:	6829      	ldr	r1, [r5, #0]
 800e954:	291d      	cmp	r1, #29
 800e956:	d82b      	bhi.n	800e9b0 <__sflush_r+0xb0>
 800e958:	4a28      	ldr	r2, [pc, #160]	@ (800e9fc <__sflush_r+0xfc>)
 800e95a:	410a      	asrs	r2, r1
 800e95c:	07d6      	lsls	r6, r2, #31
 800e95e:	d427      	bmi.n	800e9b0 <__sflush_r+0xb0>
 800e960:	2200      	movs	r2, #0
 800e962:	6062      	str	r2, [r4, #4]
 800e964:	04d9      	lsls	r1, r3, #19
 800e966:	6922      	ldr	r2, [r4, #16]
 800e968:	6022      	str	r2, [r4, #0]
 800e96a:	d504      	bpl.n	800e976 <__sflush_r+0x76>
 800e96c:	1c42      	adds	r2, r0, #1
 800e96e:	d101      	bne.n	800e974 <__sflush_r+0x74>
 800e970:	682b      	ldr	r3, [r5, #0]
 800e972:	b903      	cbnz	r3, 800e976 <__sflush_r+0x76>
 800e974:	6560      	str	r0, [r4, #84]	@ 0x54
 800e976:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e978:	602f      	str	r7, [r5, #0]
 800e97a:	b1b9      	cbz	r1, 800e9ac <__sflush_r+0xac>
 800e97c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e980:	4299      	cmp	r1, r3
 800e982:	d002      	beq.n	800e98a <__sflush_r+0x8a>
 800e984:	4628      	mov	r0, r5
 800e986:	f001 f8f3 	bl	800fb70 <_free_r>
 800e98a:	2300      	movs	r3, #0
 800e98c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e98e:	e00d      	b.n	800e9ac <__sflush_r+0xac>
 800e990:	2301      	movs	r3, #1
 800e992:	4628      	mov	r0, r5
 800e994:	47b0      	blx	r6
 800e996:	4602      	mov	r2, r0
 800e998:	1c50      	adds	r0, r2, #1
 800e99a:	d1c9      	bne.n	800e930 <__sflush_r+0x30>
 800e99c:	682b      	ldr	r3, [r5, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d0c6      	beq.n	800e930 <__sflush_r+0x30>
 800e9a2:	2b1d      	cmp	r3, #29
 800e9a4:	d001      	beq.n	800e9aa <__sflush_r+0xaa>
 800e9a6:	2b16      	cmp	r3, #22
 800e9a8:	d11d      	bne.n	800e9e6 <__sflush_r+0xe6>
 800e9aa:	602f      	str	r7, [r5, #0]
 800e9ac:	2000      	movs	r0, #0
 800e9ae:	e021      	b.n	800e9f4 <__sflush_r+0xf4>
 800e9b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9b4:	b21b      	sxth	r3, r3
 800e9b6:	e01a      	b.n	800e9ee <__sflush_r+0xee>
 800e9b8:	690f      	ldr	r7, [r1, #16]
 800e9ba:	2f00      	cmp	r7, #0
 800e9bc:	d0f6      	beq.n	800e9ac <__sflush_r+0xac>
 800e9be:	0793      	lsls	r3, r2, #30
 800e9c0:	680e      	ldr	r6, [r1, #0]
 800e9c2:	bf08      	it	eq
 800e9c4:	694b      	ldreq	r3, [r1, #20]
 800e9c6:	600f      	str	r7, [r1, #0]
 800e9c8:	bf18      	it	ne
 800e9ca:	2300      	movne	r3, #0
 800e9cc:	1bf6      	subs	r6, r6, r7
 800e9ce:	608b      	str	r3, [r1, #8]
 800e9d0:	2e00      	cmp	r6, #0
 800e9d2:	ddeb      	ble.n	800e9ac <__sflush_r+0xac>
 800e9d4:	6a21      	ldr	r1, [r4, #32]
 800e9d6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e9da:	4633      	mov	r3, r6
 800e9dc:	463a      	mov	r2, r7
 800e9de:	4628      	mov	r0, r5
 800e9e0:	47e0      	blx	ip
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	dc07      	bgt.n	800e9f6 <__sflush_r+0xf6>
 800e9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9ee:	81a3      	strh	r3, [r4, #12]
 800e9f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9f6:	4407      	add	r7, r0
 800e9f8:	1a36      	subs	r6, r6, r0
 800e9fa:	e7e9      	b.n	800e9d0 <__sflush_r+0xd0>
 800e9fc:	dfbffffe 	.word	0xdfbffffe

0800ea00 <_fflush_r>:
 800ea00:	b538      	push	{r3, r4, r5, lr}
 800ea02:	690b      	ldr	r3, [r1, #16]
 800ea04:	4605      	mov	r5, r0
 800ea06:	460c      	mov	r4, r1
 800ea08:	b913      	cbnz	r3, 800ea10 <_fflush_r+0x10>
 800ea0a:	2500      	movs	r5, #0
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	bd38      	pop	{r3, r4, r5, pc}
 800ea10:	b118      	cbz	r0, 800ea1a <_fflush_r+0x1a>
 800ea12:	6a03      	ldr	r3, [r0, #32]
 800ea14:	b90b      	cbnz	r3, 800ea1a <_fflush_r+0x1a>
 800ea16:	f000 f8b3 	bl	800eb80 <__sinit>
 800ea1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d0f3      	beq.n	800ea0a <_fflush_r+0xa>
 800ea22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ea24:	07d0      	lsls	r0, r2, #31
 800ea26:	d404      	bmi.n	800ea32 <_fflush_r+0x32>
 800ea28:	0599      	lsls	r1, r3, #22
 800ea2a:	d402      	bmi.n	800ea32 <_fflush_r+0x32>
 800ea2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea2e:	f000 fa3c 	bl	800eeaa <__retarget_lock_acquire_recursive>
 800ea32:	4628      	mov	r0, r5
 800ea34:	4621      	mov	r1, r4
 800ea36:	f7ff ff63 	bl	800e900 <__sflush_r>
 800ea3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea3c:	07da      	lsls	r2, r3, #31
 800ea3e:	4605      	mov	r5, r0
 800ea40:	d4e4      	bmi.n	800ea0c <_fflush_r+0xc>
 800ea42:	89a3      	ldrh	r3, [r4, #12]
 800ea44:	059b      	lsls	r3, r3, #22
 800ea46:	d4e1      	bmi.n	800ea0c <_fflush_r+0xc>
 800ea48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea4a:	f000 fa2f 	bl	800eeac <__retarget_lock_release_recursive>
 800ea4e:	e7dd      	b.n	800ea0c <_fflush_r+0xc>

0800ea50 <__malloc_lock>:
 800ea50:	4801      	ldr	r0, [pc, #4]	@ (800ea58 <__malloc_lock+0x8>)
 800ea52:	f000 ba2a 	b.w	800eeaa <__retarget_lock_acquire_recursive>
 800ea56:	bf00      	nop
 800ea58:	20008d10 	.word	0x20008d10

0800ea5c <__malloc_unlock>:
 800ea5c:	4801      	ldr	r0, [pc, #4]	@ (800ea64 <__malloc_unlock+0x8>)
 800ea5e:	f000 ba25 	b.w	800eeac <__retarget_lock_release_recursive>
 800ea62:	bf00      	nop
 800ea64:	20008d10 	.word	0x20008d10

0800ea68 <std>:
 800ea68:	2300      	movs	r3, #0
 800ea6a:	b510      	push	{r4, lr}
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ea72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea76:	6083      	str	r3, [r0, #8]
 800ea78:	8181      	strh	r1, [r0, #12]
 800ea7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ea7c:	81c2      	strh	r2, [r0, #14]
 800ea7e:	6183      	str	r3, [r0, #24]
 800ea80:	4619      	mov	r1, r3
 800ea82:	2208      	movs	r2, #8
 800ea84:	305c      	adds	r0, #92	@ 0x5c
 800ea86:	f000 f9a7 	bl	800edd8 <memset>
 800ea8a:	4b0d      	ldr	r3, [pc, #52]	@ (800eac0 <std+0x58>)
 800ea8c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ea8e:	4b0d      	ldr	r3, [pc, #52]	@ (800eac4 <std+0x5c>)
 800ea90:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ea92:	4b0d      	ldr	r3, [pc, #52]	@ (800eac8 <std+0x60>)
 800ea94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ea96:	4b0d      	ldr	r3, [pc, #52]	@ (800eacc <std+0x64>)
 800ea98:	6323      	str	r3, [r4, #48]	@ 0x30
 800ea9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ead0 <std+0x68>)
 800ea9c:	6224      	str	r4, [r4, #32]
 800ea9e:	429c      	cmp	r4, r3
 800eaa0:	d006      	beq.n	800eab0 <std+0x48>
 800eaa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800eaa6:	4294      	cmp	r4, r2
 800eaa8:	d002      	beq.n	800eab0 <std+0x48>
 800eaaa:	33d0      	adds	r3, #208	@ 0xd0
 800eaac:	429c      	cmp	r4, r3
 800eaae:	d105      	bne.n	800eabc <std+0x54>
 800eab0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800eab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eab8:	f000 b9f6 	b.w	800eea8 <__retarget_lock_init_recursive>
 800eabc:	bd10      	pop	{r4, pc}
 800eabe:	bf00      	nop
 800eac0:	08010305 	.word	0x08010305
 800eac4:	08010327 	.word	0x08010327
 800eac8:	0801035f 	.word	0x0801035f
 800eacc:	08010383 	.word	0x08010383
 800ead0:	20008bd4 	.word	0x20008bd4

0800ead4 <stdio_exit_handler>:
 800ead4:	4a02      	ldr	r2, [pc, #8]	@ (800eae0 <stdio_exit_handler+0xc>)
 800ead6:	4903      	ldr	r1, [pc, #12]	@ (800eae4 <stdio_exit_handler+0x10>)
 800ead8:	4803      	ldr	r0, [pc, #12]	@ (800eae8 <stdio_exit_handler+0x14>)
 800eada:	f000 b869 	b.w	800ebb0 <_fwalk_sglue>
 800eade:	bf00      	nop
 800eae0:	20004110 	.word	0x20004110
 800eae4:	0800ea01 	.word	0x0800ea01
 800eae8:	20004120 	.word	0x20004120

0800eaec <cleanup_stdio>:
 800eaec:	6841      	ldr	r1, [r0, #4]
 800eaee:	4b0c      	ldr	r3, [pc, #48]	@ (800eb20 <cleanup_stdio+0x34>)
 800eaf0:	4299      	cmp	r1, r3
 800eaf2:	b510      	push	{r4, lr}
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	d001      	beq.n	800eafc <cleanup_stdio+0x10>
 800eaf8:	f7ff ff82 	bl	800ea00 <_fflush_r>
 800eafc:	68a1      	ldr	r1, [r4, #8]
 800eafe:	4b09      	ldr	r3, [pc, #36]	@ (800eb24 <cleanup_stdio+0x38>)
 800eb00:	4299      	cmp	r1, r3
 800eb02:	d002      	beq.n	800eb0a <cleanup_stdio+0x1e>
 800eb04:	4620      	mov	r0, r4
 800eb06:	f7ff ff7b 	bl	800ea00 <_fflush_r>
 800eb0a:	68e1      	ldr	r1, [r4, #12]
 800eb0c:	4b06      	ldr	r3, [pc, #24]	@ (800eb28 <cleanup_stdio+0x3c>)
 800eb0e:	4299      	cmp	r1, r3
 800eb10:	d004      	beq.n	800eb1c <cleanup_stdio+0x30>
 800eb12:	4620      	mov	r0, r4
 800eb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb18:	f7ff bf72 	b.w	800ea00 <_fflush_r>
 800eb1c:	bd10      	pop	{r4, pc}
 800eb1e:	bf00      	nop
 800eb20:	20008bd4 	.word	0x20008bd4
 800eb24:	20008c3c 	.word	0x20008c3c
 800eb28:	20008ca4 	.word	0x20008ca4

0800eb2c <global_stdio_init.part.0>:
 800eb2c:	b510      	push	{r4, lr}
 800eb2e:	4b0b      	ldr	r3, [pc, #44]	@ (800eb5c <global_stdio_init.part.0+0x30>)
 800eb30:	4c0b      	ldr	r4, [pc, #44]	@ (800eb60 <global_stdio_init.part.0+0x34>)
 800eb32:	4a0c      	ldr	r2, [pc, #48]	@ (800eb64 <global_stdio_init.part.0+0x38>)
 800eb34:	601a      	str	r2, [r3, #0]
 800eb36:	4620      	mov	r0, r4
 800eb38:	2200      	movs	r2, #0
 800eb3a:	2104      	movs	r1, #4
 800eb3c:	f7ff ff94 	bl	800ea68 <std>
 800eb40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eb44:	2201      	movs	r2, #1
 800eb46:	2109      	movs	r1, #9
 800eb48:	f7ff ff8e 	bl	800ea68 <std>
 800eb4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eb50:	2202      	movs	r2, #2
 800eb52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb56:	2112      	movs	r1, #18
 800eb58:	f7ff bf86 	b.w	800ea68 <std>
 800eb5c:	20008d0c 	.word	0x20008d0c
 800eb60:	20008bd4 	.word	0x20008bd4
 800eb64:	0800ead5 	.word	0x0800ead5

0800eb68 <__sfp_lock_acquire>:
 800eb68:	4801      	ldr	r0, [pc, #4]	@ (800eb70 <__sfp_lock_acquire+0x8>)
 800eb6a:	f000 b99e 	b.w	800eeaa <__retarget_lock_acquire_recursive>
 800eb6e:	bf00      	nop
 800eb70:	20008d11 	.word	0x20008d11

0800eb74 <__sfp_lock_release>:
 800eb74:	4801      	ldr	r0, [pc, #4]	@ (800eb7c <__sfp_lock_release+0x8>)
 800eb76:	f000 b999 	b.w	800eeac <__retarget_lock_release_recursive>
 800eb7a:	bf00      	nop
 800eb7c:	20008d11 	.word	0x20008d11

0800eb80 <__sinit>:
 800eb80:	b510      	push	{r4, lr}
 800eb82:	4604      	mov	r4, r0
 800eb84:	f7ff fff0 	bl	800eb68 <__sfp_lock_acquire>
 800eb88:	6a23      	ldr	r3, [r4, #32]
 800eb8a:	b11b      	cbz	r3, 800eb94 <__sinit+0x14>
 800eb8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb90:	f7ff bff0 	b.w	800eb74 <__sfp_lock_release>
 800eb94:	4b04      	ldr	r3, [pc, #16]	@ (800eba8 <__sinit+0x28>)
 800eb96:	6223      	str	r3, [r4, #32]
 800eb98:	4b04      	ldr	r3, [pc, #16]	@ (800ebac <__sinit+0x2c>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d1f5      	bne.n	800eb8c <__sinit+0xc>
 800eba0:	f7ff ffc4 	bl	800eb2c <global_stdio_init.part.0>
 800eba4:	e7f2      	b.n	800eb8c <__sinit+0xc>
 800eba6:	bf00      	nop
 800eba8:	0800eaed 	.word	0x0800eaed
 800ebac:	20008d0c 	.word	0x20008d0c

0800ebb0 <_fwalk_sglue>:
 800ebb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebb4:	4607      	mov	r7, r0
 800ebb6:	4688      	mov	r8, r1
 800ebb8:	4614      	mov	r4, r2
 800ebba:	2600      	movs	r6, #0
 800ebbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ebc0:	f1b9 0901 	subs.w	r9, r9, #1
 800ebc4:	d505      	bpl.n	800ebd2 <_fwalk_sglue+0x22>
 800ebc6:	6824      	ldr	r4, [r4, #0]
 800ebc8:	2c00      	cmp	r4, #0
 800ebca:	d1f7      	bne.n	800ebbc <_fwalk_sglue+0xc>
 800ebcc:	4630      	mov	r0, r6
 800ebce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebd2:	89ab      	ldrh	r3, [r5, #12]
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d907      	bls.n	800ebe8 <_fwalk_sglue+0x38>
 800ebd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	d003      	beq.n	800ebe8 <_fwalk_sglue+0x38>
 800ebe0:	4629      	mov	r1, r5
 800ebe2:	4638      	mov	r0, r7
 800ebe4:	47c0      	blx	r8
 800ebe6:	4306      	orrs	r6, r0
 800ebe8:	3568      	adds	r5, #104	@ 0x68
 800ebea:	e7e9      	b.n	800ebc0 <_fwalk_sglue+0x10>

0800ebec <__swbuf_r>:
 800ebec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebee:	460e      	mov	r6, r1
 800ebf0:	4614      	mov	r4, r2
 800ebf2:	4605      	mov	r5, r0
 800ebf4:	b118      	cbz	r0, 800ebfe <__swbuf_r+0x12>
 800ebf6:	6a03      	ldr	r3, [r0, #32]
 800ebf8:	b90b      	cbnz	r3, 800ebfe <__swbuf_r+0x12>
 800ebfa:	f7ff ffc1 	bl	800eb80 <__sinit>
 800ebfe:	69a3      	ldr	r3, [r4, #24]
 800ec00:	60a3      	str	r3, [r4, #8]
 800ec02:	89a3      	ldrh	r3, [r4, #12]
 800ec04:	071a      	lsls	r2, r3, #28
 800ec06:	d501      	bpl.n	800ec0c <__swbuf_r+0x20>
 800ec08:	6923      	ldr	r3, [r4, #16]
 800ec0a:	b943      	cbnz	r3, 800ec1e <__swbuf_r+0x32>
 800ec0c:	4621      	mov	r1, r4
 800ec0e:	4628      	mov	r0, r5
 800ec10:	f000 f82a 	bl	800ec68 <__swsetup_r>
 800ec14:	b118      	cbz	r0, 800ec1e <__swbuf_r+0x32>
 800ec16:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ec1a:	4638      	mov	r0, r7
 800ec1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec1e:	6823      	ldr	r3, [r4, #0]
 800ec20:	6922      	ldr	r2, [r4, #16]
 800ec22:	1a98      	subs	r0, r3, r2
 800ec24:	6963      	ldr	r3, [r4, #20]
 800ec26:	b2f6      	uxtb	r6, r6
 800ec28:	4283      	cmp	r3, r0
 800ec2a:	4637      	mov	r7, r6
 800ec2c:	dc05      	bgt.n	800ec3a <__swbuf_r+0x4e>
 800ec2e:	4621      	mov	r1, r4
 800ec30:	4628      	mov	r0, r5
 800ec32:	f7ff fee5 	bl	800ea00 <_fflush_r>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d1ed      	bne.n	800ec16 <__swbuf_r+0x2a>
 800ec3a:	68a3      	ldr	r3, [r4, #8]
 800ec3c:	3b01      	subs	r3, #1
 800ec3e:	60a3      	str	r3, [r4, #8]
 800ec40:	6823      	ldr	r3, [r4, #0]
 800ec42:	1c5a      	adds	r2, r3, #1
 800ec44:	6022      	str	r2, [r4, #0]
 800ec46:	701e      	strb	r6, [r3, #0]
 800ec48:	6962      	ldr	r2, [r4, #20]
 800ec4a:	1c43      	adds	r3, r0, #1
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d004      	beq.n	800ec5a <__swbuf_r+0x6e>
 800ec50:	89a3      	ldrh	r3, [r4, #12]
 800ec52:	07db      	lsls	r3, r3, #31
 800ec54:	d5e1      	bpl.n	800ec1a <__swbuf_r+0x2e>
 800ec56:	2e0a      	cmp	r6, #10
 800ec58:	d1df      	bne.n	800ec1a <__swbuf_r+0x2e>
 800ec5a:	4621      	mov	r1, r4
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	f7ff fecf 	bl	800ea00 <_fflush_r>
 800ec62:	2800      	cmp	r0, #0
 800ec64:	d0d9      	beq.n	800ec1a <__swbuf_r+0x2e>
 800ec66:	e7d6      	b.n	800ec16 <__swbuf_r+0x2a>

0800ec68 <__swsetup_r>:
 800ec68:	b538      	push	{r3, r4, r5, lr}
 800ec6a:	4b29      	ldr	r3, [pc, #164]	@ (800ed10 <__swsetup_r+0xa8>)
 800ec6c:	4605      	mov	r5, r0
 800ec6e:	6818      	ldr	r0, [r3, #0]
 800ec70:	460c      	mov	r4, r1
 800ec72:	b118      	cbz	r0, 800ec7c <__swsetup_r+0x14>
 800ec74:	6a03      	ldr	r3, [r0, #32]
 800ec76:	b90b      	cbnz	r3, 800ec7c <__swsetup_r+0x14>
 800ec78:	f7ff ff82 	bl	800eb80 <__sinit>
 800ec7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec80:	0719      	lsls	r1, r3, #28
 800ec82:	d422      	bmi.n	800ecca <__swsetup_r+0x62>
 800ec84:	06da      	lsls	r2, r3, #27
 800ec86:	d407      	bmi.n	800ec98 <__swsetup_r+0x30>
 800ec88:	2209      	movs	r2, #9
 800ec8a:	602a      	str	r2, [r5, #0]
 800ec8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec90:	81a3      	strh	r3, [r4, #12]
 800ec92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec96:	e033      	b.n	800ed00 <__swsetup_r+0x98>
 800ec98:	0758      	lsls	r0, r3, #29
 800ec9a:	d512      	bpl.n	800ecc2 <__swsetup_r+0x5a>
 800ec9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec9e:	b141      	cbz	r1, 800ecb2 <__swsetup_r+0x4a>
 800eca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eca4:	4299      	cmp	r1, r3
 800eca6:	d002      	beq.n	800ecae <__swsetup_r+0x46>
 800eca8:	4628      	mov	r0, r5
 800ecaa:	f000 ff61 	bl	800fb70 <_free_r>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	6363      	str	r3, [r4, #52]	@ 0x34
 800ecb2:	89a3      	ldrh	r3, [r4, #12]
 800ecb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ecb8:	81a3      	strh	r3, [r4, #12]
 800ecba:	2300      	movs	r3, #0
 800ecbc:	6063      	str	r3, [r4, #4]
 800ecbe:	6923      	ldr	r3, [r4, #16]
 800ecc0:	6023      	str	r3, [r4, #0]
 800ecc2:	89a3      	ldrh	r3, [r4, #12]
 800ecc4:	f043 0308 	orr.w	r3, r3, #8
 800ecc8:	81a3      	strh	r3, [r4, #12]
 800ecca:	6923      	ldr	r3, [r4, #16]
 800eccc:	b94b      	cbnz	r3, 800ece2 <__swsetup_r+0x7a>
 800ecce:	89a3      	ldrh	r3, [r4, #12]
 800ecd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ecd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ecd8:	d003      	beq.n	800ece2 <__swsetup_r+0x7a>
 800ecda:	4621      	mov	r1, r4
 800ecdc:	4628      	mov	r0, r5
 800ecde:	f000 f83f 	bl	800ed60 <__smakebuf_r>
 800ece2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ece6:	f013 0201 	ands.w	r2, r3, #1
 800ecea:	d00a      	beq.n	800ed02 <__swsetup_r+0x9a>
 800ecec:	2200      	movs	r2, #0
 800ecee:	60a2      	str	r2, [r4, #8]
 800ecf0:	6962      	ldr	r2, [r4, #20]
 800ecf2:	4252      	negs	r2, r2
 800ecf4:	61a2      	str	r2, [r4, #24]
 800ecf6:	6922      	ldr	r2, [r4, #16]
 800ecf8:	b942      	cbnz	r2, 800ed0c <__swsetup_r+0xa4>
 800ecfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ecfe:	d1c5      	bne.n	800ec8c <__swsetup_r+0x24>
 800ed00:	bd38      	pop	{r3, r4, r5, pc}
 800ed02:	0799      	lsls	r1, r3, #30
 800ed04:	bf58      	it	pl
 800ed06:	6962      	ldrpl	r2, [r4, #20]
 800ed08:	60a2      	str	r2, [r4, #8]
 800ed0a:	e7f4      	b.n	800ecf6 <__swsetup_r+0x8e>
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	e7f7      	b.n	800ed00 <__swsetup_r+0x98>
 800ed10:	2000411c 	.word	0x2000411c

0800ed14 <__swhatbuf_r>:
 800ed14:	b570      	push	{r4, r5, r6, lr}
 800ed16:	460c      	mov	r4, r1
 800ed18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed1c:	2900      	cmp	r1, #0
 800ed1e:	b096      	sub	sp, #88	@ 0x58
 800ed20:	4615      	mov	r5, r2
 800ed22:	461e      	mov	r6, r3
 800ed24:	da0d      	bge.n	800ed42 <__swhatbuf_r+0x2e>
 800ed26:	89a3      	ldrh	r3, [r4, #12]
 800ed28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed2c:	f04f 0100 	mov.w	r1, #0
 800ed30:	bf14      	ite	ne
 800ed32:	2340      	movne	r3, #64	@ 0x40
 800ed34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed38:	2000      	movs	r0, #0
 800ed3a:	6031      	str	r1, [r6, #0]
 800ed3c:	602b      	str	r3, [r5, #0]
 800ed3e:	b016      	add	sp, #88	@ 0x58
 800ed40:	bd70      	pop	{r4, r5, r6, pc}
 800ed42:	466a      	mov	r2, sp
 800ed44:	f000 f854 	bl	800edf0 <_fstat_r>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	dbec      	blt.n	800ed26 <__swhatbuf_r+0x12>
 800ed4c:	9901      	ldr	r1, [sp, #4]
 800ed4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed56:	4259      	negs	r1, r3
 800ed58:	4159      	adcs	r1, r3
 800ed5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed5e:	e7eb      	b.n	800ed38 <__swhatbuf_r+0x24>

0800ed60 <__smakebuf_r>:
 800ed60:	898b      	ldrh	r3, [r1, #12]
 800ed62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed64:	079d      	lsls	r5, r3, #30
 800ed66:	4606      	mov	r6, r0
 800ed68:	460c      	mov	r4, r1
 800ed6a:	d507      	bpl.n	800ed7c <__smakebuf_r+0x1c>
 800ed6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed70:	6023      	str	r3, [r4, #0]
 800ed72:	6123      	str	r3, [r4, #16]
 800ed74:	2301      	movs	r3, #1
 800ed76:	6163      	str	r3, [r4, #20]
 800ed78:	b003      	add	sp, #12
 800ed7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed7c:	ab01      	add	r3, sp, #4
 800ed7e:	466a      	mov	r2, sp
 800ed80:	f7ff ffc8 	bl	800ed14 <__swhatbuf_r>
 800ed84:	9f00      	ldr	r7, [sp, #0]
 800ed86:	4605      	mov	r5, r0
 800ed88:	4639      	mov	r1, r7
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	f7ff fbaa 	bl	800e4e4 <_malloc_r>
 800ed90:	b948      	cbnz	r0, 800eda6 <__smakebuf_r+0x46>
 800ed92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed96:	059a      	lsls	r2, r3, #22
 800ed98:	d4ee      	bmi.n	800ed78 <__smakebuf_r+0x18>
 800ed9a:	f023 0303 	bic.w	r3, r3, #3
 800ed9e:	f043 0302 	orr.w	r3, r3, #2
 800eda2:	81a3      	strh	r3, [r4, #12]
 800eda4:	e7e2      	b.n	800ed6c <__smakebuf_r+0xc>
 800eda6:	89a3      	ldrh	r3, [r4, #12]
 800eda8:	6020      	str	r0, [r4, #0]
 800edaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edae:	81a3      	strh	r3, [r4, #12]
 800edb0:	9b01      	ldr	r3, [sp, #4]
 800edb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800edb6:	b15b      	cbz	r3, 800edd0 <__smakebuf_r+0x70>
 800edb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edbc:	4630      	mov	r0, r6
 800edbe:	f000 f829 	bl	800ee14 <_isatty_r>
 800edc2:	b128      	cbz	r0, 800edd0 <__smakebuf_r+0x70>
 800edc4:	89a3      	ldrh	r3, [r4, #12]
 800edc6:	f023 0303 	bic.w	r3, r3, #3
 800edca:	f043 0301 	orr.w	r3, r3, #1
 800edce:	81a3      	strh	r3, [r4, #12]
 800edd0:	89a3      	ldrh	r3, [r4, #12]
 800edd2:	431d      	orrs	r5, r3
 800edd4:	81a5      	strh	r5, [r4, #12]
 800edd6:	e7cf      	b.n	800ed78 <__smakebuf_r+0x18>

0800edd8 <memset>:
 800edd8:	4402      	add	r2, r0
 800edda:	4603      	mov	r3, r0
 800eddc:	4293      	cmp	r3, r2
 800edde:	d100      	bne.n	800ede2 <memset+0xa>
 800ede0:	4770      	bx	lr
 800ede2:	f803 1b01 	strb.w	r1, [r3], #1
 800ede6:	e7f9      	b.n	800eddc <memset+0x4>

0800ede8 <_localeconv_r>:
 800ede8:	4800      	ldr	r0, [pc, #0]	@ (800edec <_localeconv_r+0x4>)
 800edea:	4770      	bx	lr
 800edec:	2000425c 	.word	0x2000425c

0800edf0 <_fstat_r>:
 800edf0:	b538      	push	{r3, r4, r5, lr}
 800edf2:	4d07      	ldr	r5, [pc, #28]	@ (800ee10 <_fstat_r+0x20>)
 800edf4:	2300      	movs	r3, #0
 800edf6:	4604      	mov	r4, r0
 800edf8:	4608      	mov	r0, r1
 800edfa:	4611      	mov	r1, r2
 800edfc:	602b      	str	r3, [r5, #0]
 800edfe:	f7f3 f833 	bl	8001e68 <_fstat>
 800ee02:	1c43      	adds	r3, r0, #1
 800ee04:	d102      	bne.n	800ee0c <_fstat_r+0x1c>
 800ee06:	682b      	ldr	r3, [r5, #0]
 800ee08:	b103      	cbz	r3, 800ee0c <_fstat_r+0x1c>
 800ee0a:	6023      	str	r3, [r4, #0]
 800ee0c:	bd38      	pop	{r3, r4, r5, pc}
 800ee0e:	bf00      	nop
 800ee10:	20008d14 	.word	0x20008d14

0800ee14 <_isatty_r>:
 800ee14:	b538      	push	{r3, r4, r5, lr}
 800ee16:	4d06      	ldr	r5, [pc, #24]	@ (800ee30 <_isatty_r+0x1c>)
 800ee18:	2300      	movs	r3, #0
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	4608      	mov	r0, r1
 800ee1e:	602b      	str	r3, [r5, #0]
 800ee20:	f7f3 f831 	bl	8001e86 <_isatty>
 800ee24:	1c43      	adds	r3, r0, #1
 800ee26:	d102      	bne.n	800ee2e <_isatty_r+0x1a>
 800ee28:	682b      	ldr	r3, [r5, #0]
 800ee2a:	b103      	cbz	r3, 800ee2e <_isatty_r+0x1a>
 800ee2c:	6023      	str	r3, [r4, #0]
 800ee2e:	bd38      	pop	{r3, r4, r5, pc}
 800ee30:	20008d14 	.word	0x20008d14

0800ee34 <_sbrk_r>:
 800ee34:	b538      	push	{r3, r4, r5, lr}
 800ee36:	4d06      	ldr	r5, [pc, #24]	@ (800ee50 <_sbrk_r+0x1c>)
 800ee38:	2300      	movs	r3, #0
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	4608      	mov	r0, r1
 800ee3e:	602b      	str	r3, [r5, #0]
 800ee40:	f7f3 f838 	bl	8001eb4 <_sbrk>
 800ee44:	1c43      	adds	r3, r0, #1
 800ee46:	d102      	bne.n	800ee4e <_sbrk_r+0x1a>
 800ee48:	682b      	ldr	r3, [r5, #0]
 800ee4a:	b103      	cbz	r3, 800ee4e <_sbrk_r+0x1a>
 800ee4c:	6023      	str	r3, [r4, #0]
 800ee4e:	bd38      	pop	{r3, r4, r5, pc}
 800ee50:	20008d14 	.word	0x20008d14

0800ee54 <__errno>:
 800ee54:	4b01      	ldr	r3, [pc, #4]	@ (800ee5c <__errno+0x8>)
 800ee56:	6818      	ldr	r0, [r3, #0]
 800ee58:	4770      	bx	lr
 800ee5a:	bf00      	nop
 800ee5c:	2000411c 	.word	0x2000411c

0800ee60 <__libc_init_array>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	4d0d      	ldr	r5, [pc, #52]	@ (800ee98 <__libc_init_array+0x38>)
 800ee64:	4c0d      	ldr	r4, [pc, #52]	@ (800ee9c <__libc_init_array+0x3c>)
 800ee66:	1b64      	subs	r4, r4, r5
 800ee68:	10a4      	asrs	r4, r4, #2
 800ee6a:	2600      	movs	r6, #0
 800ee6c:	42a6      	cmp	r6, r4
 800ee6e:	d109      	bne.n	800ee84 <__libc_init_array+0x24>
 800ee70:	4d0b      	ldr	r5, [pc, #44]	@ (800eea0 <__libc_init_array+0x40>)
 800ee72:	4c0c      	ldr	r4, [pc, #48]	@ (800eea4 <__libc_init_array+0x44>)
 800ee74:	f001 fcbe 	bl	80107f4 <_init>
 800ee78:	1b64      	subs	r4, r4, r5
 800ee7a:	10a4      	asrs	r4, r4, #2
 800ee7c:	2600      	movs	r6, #0
 800ee7e:	42a6      	cmp	r6, r4
 800ee80:	d105      	bne.n	800ee8e <__libc_init_array+0x2e>
 800ee82:	bd70      	pop	{r4, r5, r6, pc}
 800ee84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee88:	4798      	blx	r3
 800ee8a:	3601      	adds	r6, #1
 800ee8c:	e7ee      	b.n	800ee6c <__libc_init_array+0xc>
 800ee8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee92:	4798      	blx	r3
 800ee94:	3601      	adds	r6, #1
 800ee96:	e7f2      	b.n	800ee7e <__libc_init_array+0x1e>
 800ee98:	080114a0 	.word	0x080114a0
 800ee9c:	080114a0 	.word	0x080114a0
 800eea0:	080114a0 	.word	0x080114a0
 800eea4:	080114a4 	.word	0x080114a4

0800eea8 <__retarget_lock_init_recursive>:
 800eea8:	4770      	bx	lr

0800eeaa <__retarget_lock_acquire_recursive>:
 800eeaa:	4770      	bx	lr

0800eeac <__retarget_lock_release_recursive>:
 800eeac:	4770      	bx	lr

0800eeae <memcpy>:
 800eeae:	440a      	add	r2, r1
 800eeb0:	4291      	cmp	r1, r2
 800eeb2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800eeb6:	d100      	bne.n	800eeba <memcpy+0xc>
 800eeb8:	4770      	bx	lr
 800eeba:	b510      	push	{r4, lr}
 800eebc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eec0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eec4:	4291      	cmp	r1, r2
 800eec6:	d1f9      	bne.n	800eebc <memcpy+0xe>
 800eec8:	bd10      	pop	{r4, pc}

0800eeca <quorem>:
 800eeca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eece:	6903      	ldr	r3, [r0, #16]
 800eed0:	690c      	ldr	r4, [r1, #16]
 800eed2:	42a3      	cmp	r3, r4
 800eed4:	4607      	mov	r7, r0
 800eed6:	db7e      	blt.n	800efd6 <quorem+0x10c>
 800eed8:	3c01      	subs	r4, #1
 800eeda:	f101 0814 	add.w	r8, r1, #20
 800eede:	00a3      	lsls	r3, r4, #2
 800eee0:	f100 0514 	add.w	r5, r0, #20
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eeea:	9301      	str	r3, [sp, #4]
 800eeec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eef0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eef4:	3301      	adds	r3, #1
 800eef6:	429a      	cmp	r2, r3
 800eef8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eefc:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef00:	d32e      	bcc.n	800ef60 <quorem+0x96>
 800ef02:	f04f 0a00 	mov.w	sl, #0
 800ef06:	46c4      	mov	ip, r8
 800ef08:	46ae      	mov	lr, r5
 800ef0a:	46d3      	mov	fp, sl
 800ef0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ef10:	b298      	uxth	r0, r3
 800ef12:	fb06 a000 	mla	r0, r6, r0, sl
 800ef16:	0c02      	lsrs	r2, r0, #16
 800ef18:	0c1b      	lsrs	r3, r3, #16
 800ef1a:	fb06 2303 	mla	r3, r6, r3, r2
 800ef1e:	f8de 2000 	ldr.w	r2, [lr]
 800ef22:	b280      	uxth	r0, r0
 800ef24:	b292      	uxth	r2, r2
 800ef26:	1a12      	subs	r2, r2, r0
 800ef28:	445a      	add	r2, fp
 800ef2a:	f8de 0000 	ldr.w	r0, [lr]
 800ef2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ef38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ef3c:	b292      	uxth	r2, r2
 800ef3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ef42:	45e1      	cmp	r9, ip
 800ef44:	f84e 2b04 	str.w	r2, [lr], #4
 800ef48:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ef4c:	d2de      	bcs.n	800ef0c <quorem+0x42>
 800ef4e:	9b00      	ldr	r3, [sp, #0]
 800ef50:	58eb      	ldr	r3, [r5, r3]
 800ef52:	b92b      	cbnz	r3, 800ef60 <quorem+0x96>
 800ef54:	9b01      	ldr	r3, [sp, #4]
 800ef56:	3b04      	subs	r3, #4
 800ef58:	429d      	cmp	r5, r3
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	d32f      	bcc.n	800efbe <quorem+0xf4>
 800ef5e:	613c      	str	r4, [r7, #16]
 800ef60:	4638      	mov	r0, r7
 800ef62:	f001 f8c9 	bl	80100f8 <__mcmp>
 800ef66:	2800      	cmp	r0, #0
 800ef68:	db25      	blt.n	800efb6 <quorem+0xec>
 800ef6a:	4629      	mov	r1, r5
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef72:	f8d1 c000 	ldr.w	ip, [r1]
 800ef76:	fa1f fe82 	uxth.w	lr, r2
 800ef7a:	fa1f f38c 	uxth.w	r3, ip
 800ef7e:	eba3 030e 	sub.w	r3, r3, lr
 800ef82:	4403      	add	r3, r0
 800ef84:	0c12      	lsrs	r2, r2, #16
 800ef86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ef8a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef94:	45c1      	cmp	r9, r8
 800ef96:	f841 3b04 	str.w	r3, [r1], #4
 800ef9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ef9e:	d2e6      	bcs.n	800ef6e <quorem+0xa4>
 800efa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efa8:	b922      	cbnz	r2, 800efb4 <quorem+0xea>
 800efaa:	3b04      	subs	r3, #4
 800efac:	429d      	cmp	r5, r3
 800efae:	461a      	mov	r2, r3
 800efb0:	d30b      	bcc.n	800efca <quorem+0x100>
 800efb2:	613c      	str	r4, [r7, #16]
 800efb4:	3601      	adds	r6, #1
 800efb6:	4630      	mov	r0, r6
 800efb8:	b003      	add	sp, #12
 800efba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efbe:	6812      	ldr	r2, [r2, #0]
 800efc0:	3b04      	subs	r3, #4
 800efc2:	2a00      	cmp	r2, #0
 800efc4:	d1cb      	bne.n	800ef5e <quorem+0x94>
 800efc6:	3c01      	subs	r4, #1
 800efc8:	e7c6      	b.n	800ef58 <quorem+0x8e>
 800efca:	6812      	ldr	r2, [r2, #0]
 800efcc:	3b04      	subs	r3, #4
 800efce:	2a00      	cmp	r2, #0
 800efd0:	d1ef      	bne.n	800efb2 <quorem+0xe8>
 800efd2:	3c01      	subs	r4, #1
 800efd4:	e7ea      	b.n	800efac <quorem+0xe2>
 800efd6:	2000      	movs	r0, #0
 800efd8:	e7ee      	b.n	800efb8 <quorem+0xee>
 800efda:	0000      	movs	r0, r0
 800efdc:	0000      	movs	r0, r0
	...

0800efe0 <_dtoa_r>:
 800efe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe4:	69c7      	ldr	r7, [r0, #28]
 800efe6:	b097      	sub	sp, #92	@ 0x5c
 800efe8:	4614      	mov	r4, r2
 800efea:	461d      	mov	r5, r3
 800efec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800eff0:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800eff2:	4683      	mov	fp, r0
 800eff4:	b97f      	cbnz	r7, 800f016 <_dtoa_r+0x36>
 800eff6:	2010      	movs	r0, #16
 800eff8:	f7ff fa4a 	bl	800e490 <malloc>
 800effc:	4602      	mov	r2, r0
 800effe:	f8cb 001c 	str.w	r0, [fp, #28]
 800f002:	b920      	cbnz	r0, 800f00e <_dtoa_r+0x2e>
 800f004:	4ba8      	ldr	r3, [pc, #672]	@ (800f2a8 <_dtoa_r+0x2c8>)
 800f006:	21ef      	movs	r1, #239	@ 0xef
 800f008:	48a8      	ldr	r0, [pc, #672]	@ (800f2ac <_dtoa_r+0x2cc>)
 800f00a:	f001 fa05 	bl	8010418 <__assert_func>
 800f00e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f012:	6007      	str	r7, [r0, #0]
 800f014:	60c7      	str	r7, [r0, #12]
 800f016:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f01a:	6819      	ldr	r1, [r3, #0]
 800f01c:	b159      	cbz	r1, 800f036 <_dtoa_r+0x56>
 800f01e:	685a      	ldr	r2, [r3, #4]
 800f020:	604a      	str	r2, [r1, #4]
 800f022:	2301      	movs	r3, #1
 800f024:	4093      	lsls	r3, r2
 800f026:	608b      	str	r3, [r1, #8]
 800f028:	4658      	mov	r0, fp
 800f02a:	f000 fe2b 	bl	800fc84 <_Bfree>
 800f02e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f032:	2200      	movs	r2, #0
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	1e2b      	subs	r3, r5, #0
 800f038:	bfb9      	ittee	lt
 800f03a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f03e:	9303      	strlt	r3, [sp, #12]
 800f040:	2300      	movge	r3, #0
 800f042:	6033      	strge	r3, [r6, #0]
 800f044:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f048:	4b99      	ldr	r3, [pc, #612]	@ (800f2b0 <_dtoa_r+0x2d0>)
 800f04a:	bfbc      	itt	lt
 800f04c:	2201      	movlt	r2, #1
 800f04e:	6032      	strlt	r2, [r6, #0]
 800f050:	ea33 0308 	bics.w	r3, r3, r8
 800f054:	d112      	bne.n	800f07c <_dtoa_r+0x9c>
 800f056:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f058:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f05c:	6013      	str	r3, [r2, #0]
 800f05e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f062:	4323      	orrs	r3, r4
 800f064:	f000 8551 	beq.w	800fb0a <_dtoa_r+0xb2a>
 800f068:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f06a:	f8df a248 	ldr.w	sl, [pc, #584]	@ 800f2b4 <_dtoa_r+0x2d4>
 800f06e:	2b00      	cmp	r3, #0
 800f070:	f000 8553 	beq.w	800fb1a <_dtoa_r+0xb3a>
 800f074:	f10a 0303 	add.w	r3, sl, #3
 800f078:	f000 bd4d 	b.w	800fb16 <_dtoa_r+0xb36>
 800f07c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f080:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f084:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f088:	2200      	movs	r2, #0
 800f08a:	2300      	movs	r3, #0
 800f08c:	f7f1 fcf4 	bl	8000a78 <__aeabi_dcmpeq>
 800f090:	4607      	mov	r7, r0
 800f092:	b158      	cbz	r0, 800f0ac <_dtoa_r+0xcc>
 800f094:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f096:	2301      	movs	r3, #1
 800f098:	6013      	str	r3, [r2, #0]
 800f09a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f09c:	b113      	cbz	r3, 800f0a4 <_dtoa_r+0xc4>
 800f09e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f0a0:	4b85      	ldr	r3, [pc, #532]	@ (800f2b8 <_dtoa_r+0x2d8>)
 800f0a2:	6013      	str	r3, [r2, #0]
 800f0a4:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800f2bc <_dtoa_r+0x2dc>
 800f0a8:	f000 bd37 	b.w	800fb1a <_dtoa_r+0xb3a>
 800f0ac:	ab14      	add	r3, sp, #80	@ 0x50
 800f0ae:	9301      	str	r3, [sp, #4]
 800f0b0:	ab15      	add	r3, sp, #84	@ 0x54
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	4658      	mov	r0, fp
 800f0b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f0ba:	f001 f8cb 	bl	8010254 <__d2b>
 800f0be:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800f0c2:	4681      	mov	r9, r0
 800f0c4:	2e00      	cmp	r6, #0
 800f0c6:	d076      	beq.n	800f1b6 <_dtoa_r+0x1d6>
 800f0c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f0ca:	9712      	str	r7, [sp, #72]	@ 0x48
 800f0cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f0d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f0dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	4b76      	ldr	r3, [pc, #472]	@ (800f2c0 <_dtoa_r+0x2e0>)
 800f0e6:	f7f1 f8a7 	bl	8000238 <__aeabi_dsub>
 800f0ea:	a369      	add	r3, pc, #420	@ (adr r3, 800f290 <_dtoa_r+0x2b0>)
 800f0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f0:	f7f1 fa5a 	bl	80005a8 <__aeabi_dmul>
 800f0f4:	a368      	add	r3, pc, #416	@ (adr r3, 800f298 <_dtoa_r+0x2b8>)
 800f0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fa:	f7f1 f89f 	bl	800023c <__adddf3>
 800f0fe:	4604      	mov	r4, r0
 800f100:	4630      	mov	r0, r6
 800f102:	460d      	mov	r5, r1
 800f104:	f7f1 f9e6 	bl	80004d4 <__aeabi_i2d>
 800f108:	a365      	add	r3, pc, #404	@ (adr r3, 800f2a0 <_dtoa_r+0x2c0>)
 800f10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10e:	f7f1 fa4b 	bl	80005a8 <__aeabi_dmul>
 800f112:	4602      	mov	r2, r0
 800f114:	460b      	mov	r3, r1
 800f116:	4620      	mov	r0, r4
 800f118:	4629      	mov	r1, r5
 800f11a:	f7f1 f88f 	bl	800023c <__adddf3>
 800f11e:	4604      	mov	r4, r0
 800f120:	460d      	mov	r5, r1
 800f122:	f7f1 fcf1 	bl	8000b08 <__aeabi_d2iz>
 800f126:	2200      	movs	r2, #0
 800f128:	4607      	mov	r7, r0
 800f12a:	2300      	movs	r3, #0
 800f12c:	4620      	mov	r0, r4
 800f12e:	4629      	mov	r1, r5
 800f130:	f7f1 fcac 	bl	8000a8c <__aeabi_dcmplt>
 800f134:	b140      	cbz	r0, 800f148 <_dtoa_r+0x168>
 800f136:	4638      	mov	r0, r7
 800f138:	f7f1 f9cc 	bl	80004d4 <__aeabi_i2d>
 800f13c:	4622      	mov	r2, r4
 800f13e:	462b      	mov	r3, r5
 800f140:	f7f1 fc9a 	bl	8000a78 <__aeabi_dcmpeq>
 800f144:	b900      	cbnz	r0, 800f148 <_dtoa_r+0x168>
 800f146:	3f01      	subs	r7, #1
 800f148:	2f16      	cmp	r7, #22
 800f14a:	d852      	bhi.n	800f1f2 <_dtoa_r+0x212>
 800f14c:	4b5d      	ldr	r3, [pc, #372]	@ (800f2c4 <_dtoa_r+0x2e4>)
 800f14e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f156:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f15a:	f7f1 fc97 	bl	8000a8c <__aeabi_dcmplt>
 800f15e:	2800      	cmp	r0, #0
 800f160:	d049      	beq.n	800f1f6 <_dtoa_r+0x216>
 800f162:	3f01      	subs	r7, #1
 800f164:	2300      	movs	r3, #0
 800f166:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f168:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f16a:	1b9b      	subs	r3, r3, r6
 800f16c:	1e5a      	subs	r2, r3, #1
 800f16e:	bf44      	itt	mi
 800f170:	f1c3 0801 	rsbmi	r8, r3, #1
 800f174:	2300      	movmi	r3, #0
 800f176:	9209      	str	r2, [sp, #36]	@ 0x24
 800f178:	bf54      	ite	pl
 800f17a:	f04f 0800 	movpl.w	r8, #0
 800f17e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800f180:	2f00      	cmp	r7, #0
 800f182:	db3a      	blt.n	800f1fa <_dtoa_r+0x21a>
 800f184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f186:	970e      	str	r7, [sp, #56]	@ 0x38
 800f188:	443b      	add	r3, r7
 800f18a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f18c:	2300      	movs	r3, #0
 800f18e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f190:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f192:	2b09      	cmp	r3, #9
 800f194:	d865      	bhi.n	800f262 <_dtoa_r+0x282>
 800f196:	2b05      	cmp	r3, #5
 800f198:	bfc4      	itt	gt
 800f19a:	3b04      	subgt	r3, #4
 800f19c:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800f19e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f1a0:	f1a3 0302 	sub.w	r3, r3, #2
 800f1a4:	bfcc      	ite	gt
 800f1a6:	2400      	movgt	r4, #0
 800f1a8:	2401      	movle	r4, #1
 800f1aa:	2b03      	cmp	r3, #3
 800f1ac:	d864      	bhi.n	800f278 <_dtoa_r+0x298>
 800f1ae:	e8df f003 	tbb	[pc, r3]
 800f1b2:	382b      	.short	0x382b
 800f1b4:	5636      	.short	0x5636
 800f1b6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f1ba:	441e      	add	r6, r3
 800f1bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f1c0:	2b20      	cmp	r3, #32
 800f1c2:	bfc1      	itttt	gt
 800f1c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f1c8:	fa08 f803 	lslgt.w	r8, r8, r3
 800f1cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f1d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f1d4:	bfd6      	itet	le
 800f1d6:	f1c3 0320 	rsble	r3, r3, #32
 800f1da:	ea48 0003 	orrgt.w	r0, r8, r3
 800f1de:	fa04 f003 	lslle.w	r0, r4, r3
 800f1e2:	f7f1 f967 	bl	80004b4 <__aeabi_ui2d>
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f1ec:	3e01      	subs	r6, #1
 800f1ee:	9212      	str	r2, [sp, #72]	@ 0x48
 800f1f0:	e776      	b.n	800f0e0 <_dtoa_r+0x100>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e7b7      	b.n	800f166 <_dtoa_r+0x186>
 800f1f6:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f1f8:	e7b6      	b.n	800f168 <_dtoa_r+0x188>
 800f1fa:	427b      	negs	r3, r7
 800f1fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1fe:	2300      	movs	r3, #0
 800f200:	eba8 0807 	sub.w	r8, r8, r7
 800f204:	930e      	str	r3, [sp, #56]	@ 0x38
 800f206:	e7c3      	b.n	800f190 <_dtoa_r+0x1b0>
 800f208:	2300      	movs	r3, #0
 800f20a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f20c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f20e:	2b00      	cmp	r3, #0
 800f210:	dc35      	bgt.n	800f27e <_dtoa_r+0x29e>
 800f212:	2301      	movs	r3, #1
 800f214:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f218:	461a      	mov	r2, r3
 800f21a:	9221      	str	r2, [sp, #132]	@ 0x84
 800f21c:	e00b      	b.n	800f236 <_dtoa_r+0x256>
 800f21e:	2301      	movs	r3, #1
 800f220:	e7f3      	b.n	800f20a <_dtoa_r+0x22a>
 800f222:	2300      	movs	r3, #0
 800f224:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f226:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f228:	18fb      	adds	r3, r7, r3
 800f22a:	9308      	str	r3, [sp, #32]
 800f22c:	3301      	adds	r3, #1
 800f22e:	2b01      	cmp	r3, #1
 800f230:	9307      	str	r3, [sp, #28]
 800f232:	bfb8      	it	lt
 800f234:	2301      	movlt	r3, #1
 800f236:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f23a:	2100      	movs	r1, #0
 800f23c:	2204      	movs	r2, #4
 800f23e:	f102 0514 	add.w	r5, r2, #20
 800f242:	429d      	cmp	r5, r3
 800f244:	d91f      	bls.n	800f286 <_dtoa_r+0x2a6>
 800f246:	6041      	str	r1, [r0, #4]
 800f248:	4658      	mov	r0, fp
 800f24a:	f000 fcdb 	bl	800fc04 <_Balloc>
 800f24e:	4682      	mov	sl, r0
 800f250:	2800      	cmp	r0, #0
 800f252:	d13b      	bne.n	800f2cc <_dtoa_r+0x2ec>
 800f254:	4b1c      	ldr	r3, [pc, #112]	@ (800f2c8 <_dtoa_r+0x2e8>)
 800f256:	4602      	mov	r2, r0
 800f258:	f240 11af 	movw	r1, #431	@ 0x1af
 800f25c:	e6d4      	b.n	800f008 <_dtoa_r+0x28>
 800f25e:	2301      	movs	r3, #1
 800f260:	e7e0      	b.n	800f224 <_dtoa_r+0x244>
 800f262:	2401      	movs	r4, #1
 800f264:	2300      	movs	r3, #0
 800f266:	9320      	str	r3, [sp, #128]	@ 0x80
 800f268:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f26a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f26e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f272:	2200      	movs	r2, #0
 800f274:	2312      	movs	r3, #18
 800f276:	e7d0      	b.n	800f21a <_dtoa_r+0x23a>
 800f278:	2301      	movs	r3, #1
 800f27a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f27c:	e7f5      	b.n	800f26a <_dtoa_r+0x28a>
 800f27e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f280:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f284:	e7d7      	b.n	800f236 <_dtoa_r+0x256>
 800f286:	3101      	adds	r1, #1
 800f288:	0052      	lsls	r2, r2, #1
 800f28a:	e7d8      	b.n	800f23e <_dtoa_r+0x25e>
 800f28c:	f3af 8000 	nop.w
 800f290:	636f4361 	.word	0x636f4361
 800f294:	3fd287a7 	.word	0x3fd287a7
 800f298:	8b60c8b3 	.word	0x8b60c8b3
 800f29c:	3fc68a28 	.word	0x3fc68a28
 800f2a0:	509f79fb 	.word	0x509f79fb
 800f2a4:	3fd34413 	.word	0x3fd34413
 800f2a8:	08011169 	.word	0x08011169
 800f2ac:	08011180 	.word	0x08011180
 800f2b0:	7ff00000 	.word	0x7ff00000
 800f2b4:	08011165 	.word	0x08011165
 800f2b8:	08011139 	.word	0x08011139
 800f2bc:	08011138 	.word	0x08011138
 800f2c0:	3ff80000 	.word	0x3ff80000
 800f2c4:	08011278 	.word	0x08011278
 800f2c8:	080111d8 	.word	0x080111d8
 800f2cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f2d0:	6018      	str	r0, [r3, #0]
 800f2d2:	9b07      	ldr	r3, [sp, #28]
 800f2d4:	2b0e      	cmp	r3, #14
 800f2d6:	f200 80a4 	bhi.w	800f422 <_dtoa_r+0x442>
 800f2da:	2c00      	cmp	r4, #0
 800f2dc:	f000 80a1 	beq.w	800f422 <_dtoa_r+0x442>
 800f2e0:	2f00      	cmp	r7, #0
 800f2e2:	dd33      	ble.n	800f34c <_dtoa_r+0x36c>
 800f2e4:	4b86      	ldr	r3, [pc, #536]	@ (800f500 <_dtoa_r+0x520>)
 800f2e6:	f007 020f 	and.w	r2, r7, #15
 800f2ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f2f2:	05f8      	lsls	r0, r7, #23
 800f2f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f2f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f2fc:	d516      	bpl.n	800f32c <_dtoa_r+0x34c>
 800f2fe:	4b81      	ldr	r3, [pc, #516]	@ (800f504 <_dtoa_r+0x524>)
 800f300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f304:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f308:	f7f1 fa78 	bl	80007fc <__aeabi_ddiv>
 800f30c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f310:	f004 040f 	and.w	r4, r4, #15
 800f314:	2603      	movs	r6, #3
 800f316:	4d7b      	ldr	r5, [pc, #492]	@ (800f504 <_dtoa_r+0x524>)
 800f318:	b954      	cbnz	r4, 800f330 <_dtoa_r+0x350>
 800f31a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f31e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f322:	f7f1 fa6b 	bl	80007fc <__aeabi_ddiv>
 800f326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f32a:	e028      	b.n	800f37e <_dtoa_r+0x39e>
 800f32c:	2602      	movs	r6, #2
 800f32e:	e7f2      	b.n	800f316 <_dtoa_r+0x336>
 800f330:	07e1      	lsls	r1, r4, #31
 800f332:	d508      	bpl.n	800f346 <_dtoa_r+0x366>
 800f334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f338:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f33c:	f7f1 f934 	bl	80005a8 <__aeabi_dmul>
 800f340:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f344:	3601      	adds	r6, #1
 800f346:	1064      	asrs	r4, r4, #1
 800f348:	3508      	adds	r5, #8
 800f34a:	e7e5      	b.n	800f318 <_dtoa_r+0x338>
 800f34c:	f000 80d2 	beq.w	800f4f4 <_dtoa_r+0x514>
 800f350:	427c      	negs	r4, r7
 800f352:	4b6b      	ldr	r3, [pc, #428]	@ (800f500 <_dtoa_r+0x520>)
 800f354:	4d6b      	ldr	r5, [pc, #428]	@ (800f504 <_dtoa_r+0x524>)
 800f356:	f004 020f 	and.w	r2, r4, #15
 800f35a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f362:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f366:	f7f1 f91f 	bl	80005a8 <__aeabi_dmul>
 800f36a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f36e:	1124      	asrs	r4, r4, #4
 800f370:	2300      	movs	r3, #0
 800f372:	2602      	movs	r6, #2
 800f374:	2c00      	cmp	r4, #0
 800f376:	f040 80b2 	bne.w	800f4de <_dtoa_r+0x4fe>
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d1d3      	bne.n	800f326 <_dtoa_r+0x346>
 800f37e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f380:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f384:	2b00      	cmp	r3, #0
 800f386:	f000 80b7 	beq.w	800f4f8 <_dtoa_r+0x518>
 800f38a:	4b5f      	ldr	r3, [pc, #380]	@ (800f508 <_dtoa_r+0x528>)
 800f38c:	2200      	movs	r2, #0
 800f38e:	4620      	mov	r0, r4
 800f390:	4629      	mov	r1, r5
 800f392:	f7f1 fb7b 	bl	8000a8c <__aeabi_dcmplt>
 800f396:	2800      	cmp	r0, #0
 800f398:	f000 80ae 	beq.w	800f4f8 <_dtoa_r+0x518>
 800f39c:	9b07      	ldr	r3, [sp, #28]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f000 80aa 	beq.w	800f4f8 <_dtoa_r+0x518>
 800f3a4:	9b08      	ldr	r3, [sp, #32]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	dd37      	ble.n	800f41a <_dtoa_r+0x43a>
 800f3aa:	1e7b      	subs	r3, r7, #1
 800f3ac:	9304      	str	r3, [sp, #16]
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	4b56      	ldr	r3, [pc, #344]	@ (800f50c <_dtoa_r+0x52c>)
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	4629      	mov	r1, r5
 800f3b6:	f7f1 f8f7 	bl	80005a8 <__aeabi_dmul>
 800f3ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3be:	9c08      	ldr	r4, [sp, #32]
 800f3c0:	3601      	adds	r6, #1
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	f7f1 f886 	bl	80004d4 <__aeabi_i2d>
 800f3c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3cc:	f7f1 f8ec 	bl	80005a8 <__aeabi_dmul>
 800f3d0:	4b4f      	ldr	r3, [pc, #316]	@ (800f510 <_dtoa_r+0x530>)
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f7f0 ff32 	bl	800023c <__adddf3>
 800f3d8:	4605      	mov	r5, r0
 800f3da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f3de:	2c00      	cmp	r4, #0
 800f3e0:	f040 809a 	bne.w	800f518 <_dtoa_r+0x538>
 800f3e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3e8:	4b4a      	ldr	r3, [pc, #296]	@ (800f514 <_dtoa_r+0x534>)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f7f0 ff24 	bl	8000238 <__aeabi_dsub>
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f3f8:	462a      	mov	r2, r5
 800f3fa:	4633      	mov	r3, r6
 800f3fc:	f7f1 fb64 	bl	8000ac8 <__aeabi_dcmpgt>
 800f400:	2800      	cmp	r0, #0
 800f402:	f040 828e 	bne.w	800f922 <_dtoa_r+0x942>
 800f406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f40a:	462a      	mov	r2, r5
 800f40c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f410:	f7f1 fb3c 	bl	8000a8c <__aeabi_dcmplt>
 800f414:	2800      	cmp	r0, #0
 800f416:	f040 8127 	bne.w	800f668 <_dtoa_r+0x688>
 800f41a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f41e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f422:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f424:	2b00      	cmp	r3, #0
 800f426:	f2c0 8163 	blt.w	800f6f0 <_dtoa_r+0x710>
 800f42a:	2f0e      	cmp	r7, #14
 800f42c:	f300 8160 	bgt.w	800f6f0 <_dtoa_r+0x710>
 800f430:	4b33      	ldr	r3, [pc, #204]	@ (800f500 <_dtoa_r+0x520>)
 800f432:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f436:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f43a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f43e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f440:	2b00      	cmp	r3, #0
 800f442:	da03      	bge.n	800f44c <_dtoa_r+0x46c>
 800f444:	9b07      	ldr	r3, [sp, #28]
 800f446:	2b00      	cmp	r3, #0
 800f448:	f340 8100 	ble.w	800f64c <_dtoa_r+0x66c>
 800f44c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f450:	4656      	mov	r6, sl
 800f452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f456:	4620      	mov	r0, r4
 800f458:	4629      	mov	r1, r5
 800f45a:	f7f1 f9cf 	bl	80007fc <__aeabi_ddiv>
 800f45e:	f7f1 fb53 	bl	8000b08 <__aeabi_d2iz>
 800f462:	4680      	mov	r8, r0
 800f464:	f7f1 f836 	bl	80004d4 <__aeabi_i2d>
 800f468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f46c:	f7f1 f89c 	bl	80005a8 <__aeabi_dmul>
 800f470:	4602      	mov	r2, r0
 800f472:	460b      	mov	r3, r1
 800f474:	4620      	mov	r0, r4
 800f476:	4629      	mov	r1, r5
 800f478:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f47c:	f7f0 fedc 	bl	8000238 <__aeabi_dsub>
 800f480:	f806 4b01 	strb.w	r4, [r6], #1
 800f484:	9d07      	ldr	r5, [sp, #28]
 800f486:	eba6 040a 	sub.w	r4, r6, sl
 800f48a:	42a5      	cmp	r5, r4
 800f48c:	4602      	mov	r2, r0
 800f48e:	460b      	mov	r3, r1
 800f490:	f040 8116 	bne.w	800f6c0 <_dtoa_r+0x6e0>
 800f494:	f7f0 fed2 	bl	800023c <__adddf3>
 800f498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f49c:	4604      	mov	r4, r0
 800f49e:	460d      	mov	r5, r1
 800f4a0:	f7f1 fb12 	bl	8000ac8 <__aeabi_dcmpgt>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	f040 80f8 	bne.w	800f69a <_dtoa_r+0x6ba>
 800f4aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	4629      	mov	r1, r5
 800f4b2:	f7f1 fae1 	bl	8000a78 <__aeabi_dcmpeq>
 800f4b6:	b118      	cbz	r0, 800f4c0 <_dtoa_r+0x4e0>
 800f4b8:	f018 0f01 	tst.w	r8, #1
 800f4bc:	f040 80ed 	bne.w	800f69a <_dtoa_r+0x6ba>
 800f4c0:	4649      	mov	r1, r9
 800f4c2:	4658      	mov	r0, fp
 800f4c4:	f000 fbde 	bl	800fc84 <_Bfree>
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	7033      	strb	r3, [r6, #0]
 800f4cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f4ce:	3701      	adds	r7, #1
 800f4d0:	601f      	str	r7, [r3, #0]
 800f4d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	f000 8320 	beq.w	800fb1a <_dtoa_r+0xb3a>
 800f4da:	601e      	str	r6, [r3, #0]
 800f4dc:	e31d      	b.n	800fb1a <_dtoa_r+0xb3a>
 800f4de:	07e2      	lsls	r2, r4, #31
 800f4e0:	d505      	bpl.n	800f4ee <_dtoa_r+0x50e>
 800f4e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f4e6:	f7f1 f85f 	bl	80005a8 <__aeabi_dmul>
 800f4ea:	3601      	adds	r6, #1
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	1064      	asrs	r4, r4, #1
 800f4f0:	3508      	adds	r5, #8
 800f4f2:	e73f      	b.n	800f374 <_dtoa_r+0x394>
 800f4f4:	2602      	movs	r6, #2
 800f4f6:	e742      	b.n	800f37e <_dtoa_r+0x39e>
 800f4f8:	9c07      	ldr	r4, [sp, #28]
 800f4fa:	9704      	str	r7, [sp, #16]
 800f4fc:	e761      	b.n	800f3c2 <_dtoa_r+0x3e2>
 800f4fe:	bf00      	nop
 800f500:	08011278 	.word	0x08011278
 800f504:	08011250 	.word	0x08011250
 800f508:	3ff00000 	.word	0x3ff00000
 800f50c:	40240000 	.word	0x40240000
 800f510:	401c0000 	.word	0x401c0000
 800f514:	40140000 	.word	0x40140000
 800f518:	4b70      	ldr	r3, [pc, #448]	@ (800f6dc <_dtoa_r+0x6fc>)
 800f51a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f51c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f520:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f524:	4454      	add	r4, sl
 800f526:	2900      	cmp	r1, #0
 800f528:	d045      	beq.n	800f5b6 <_dtoa_r+0x5d6>
 800f52a:	496d      	ldr	r1, [pc, #436]	@ (800f6e0 <_dtoa_r+0x700>)
 800f52c:	2000      	movs	r0, #0
 800f52e:	f7f1 f965 	bl	80007fc <__aeabi_ddiv>
 800f532:	4633      	mov	r3, r6
 800f534:	462a      	mov	r2, r5
 800f536:	f7f0 fe7f 	bl	8000238 <__aeabi_dsub>
 800f53a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f53e:	4656      	mov	r6, sl
 800f540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f544:	f7f1 fae0 	bl	8000b08 <__aeabi_d2iz>
 800f548:	4605      	mov	r5, r0
 800f54a:	f7f0 ffc3 	bl	80004d4 <__aeabi_i2d>
 800f54e:	4602      	mov	r2, r0
 800f550:	460b      	mov	r3, r1
 800f552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f556:	f7f0 fe6f 	bl	8000238 <__aeabi_dsub>
 800f55a:	3530      	adds	r5, #48	@ 0x30
 800f55c:	4602      	mov	r2, r0
 800f55e:	460b      	mov	r3, r1
 800f560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f564:	f806 5b01 	strb.w	r5, [r6], #1
 800f568:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f56c:	f7f1 fa8e 	bl	8000a8c <__aeabi_dcmplt>
 800f570:	2800      	cmp	r0, #0
 800f572:	d163      	bne.n	800f63c <_dtoa_r+0x65c>
 800f574:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f578:	495a      	ldr	r1, [pc, #360]	@ (800f6e4 <_dtoa_r+0x704>)
 800f57a:	2000      	movs	r0, #0
 800f57c:	f7f0 fe5c 	bl	8000238 <__aeabi_dsub>
 800f580:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f584:	f7f1 fa82 	bl	8000a8c <__aeabi_dcmplt>
 800f588:	2800      	cmp	r0, #0
 800f58a:	f040 8087 	bne.w	800f69c <_dtoa_r+0x6bc>
 800f58e:	42a6      	cmp	r6, r4
 800f590:	f43f af43 	beq.w	800f41a <_dtoa_r+0x43a>
 800f594:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f598:	4b53      	ldr	r3, [pc, #332]	@ (800f6e8 <_dtoa_r+0x708>)
 800f59a:	2200      	movs	r2, #0
 800f59c:	f7f1 f804 	bl	80005a8 <__aeabi_dmul>
 800f5a0:	4b51      	ldr	r3, [pc, #324]	@ (800f6e8 <_dtoa_r+0x708>)
 800f5a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5ac:	f7f0 fffc 	bl	80005a8 <__aeabi_dmul>
 800f5b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5b4:	e7c4      	b.n	800f540 <_dtoa_r+0x560>
 800f5b6:	4631      	mov	r1, r6
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	f7f0 fff5 	bl	80005a8 <__aeabi_dmul>
 800f5be:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5c2:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f5c4:	4656      	mov	r6, sl
 800f5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5ca:	f7f1 fa9d 	bl	8000b08 <__aeabi_d2iz>
 800f5ce:	4605      	mov	r5, r0
 800f5d0:	f7f0 ff80 	bl	80004d4 <__aeabi_i2d>
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5dc:	f7f0 fe2c 	bl	8000238 <__aeabi_dsub>
 800f5e0:	3530      	adds	r5, #48	@ 0x30
 800f5e2:	f806 5b01 	strb.w	r5, [r6], #1
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	42a6      	cmp	r6, r4
 800f5ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f5f0:	f04f 0200 	mov.w	r2, #0
 800f5f4:	d124      	bne.n	800f640 <_dtoa_r+0x660>
 800f5f6:	4b3a      	ldr	r3, [pc, #232]	@ (800f6e0 <_dtoa_r+0x700>)
 800f5f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f5fc:	f7f0 fe1e 	bl	800023c <__adddf3>
 800f600:	4602      	mov	r2, r0
 800f602:	460b      	mov	r3, r1
 800f604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f608:	f7f1 fa5e 	bl	8000ac8 <__aeabi_dcmpgt>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d145      	bne.n	800f69c <_dtoa_r+0x6bc>
 800f610:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f614:	4932      	ldr	r1, [pc, #200]	@ (800f6e0 <_dtoa_r+0x700>)
 800f616:	2000      	movs	r0, #0
 800f618:	f7f0 fe0e 	bl	8000238 <__aeabi_dsub>
 800f61c:	4602      	mov	r2, r0
 800f61e:	460b      	mov	r3, r1
 800f620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f624:	f7f1 fa32 	bl	8000a8c <__aeabi_dcmplt>
 800f628:	2800      	cmp	r0, #0
 800f62a:	f43f aef6 	beq.w	800f41a <_dtoa_r+0x43a>
 800f62e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f630:	1e73      	subs	r3, r6, #1
 800f632:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f634:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f638:	2b30      	cmp	r3, #48	@ 0x30
 800f63a:	d0f8      	beq.n	800f62e <_dtoa_r+0x64e>
 800f63c:	9f04      	ldr	r7, [sp, #16]
 800f63e:	e73f      	b.n	800f4c0 <_dtoa_r+0x4e0>
 800f640:	4b29      	ldr	r3, [pc, #164]	@ (800f6e8 <_dtoa_r+0x708>)
 800f642:	f7f0 ffb1 	bl	80005a8 <__aeabi_dmul>
 800f646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f64a:	e7bc      	b.n	800f5c6 <_dtoa_r+0x5e6>
 800f64c:	d10c      	bne.n	800f668 <_dtoa_r+0x688>
 800f64e:	4b27      	ldr	r3, [pc, #156]	@ (800f6ec <_dtoa_r+0x70c>)
 800f650:	2200      	movs	r2, #0
 800f652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f656:	f7f0 ffa7 	bl	80005a8 <__aeabi_dmul>
 800f65a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f65e:	f7f1 fa29 	bl	8000ab4 <__aeabi_dcmpge>
 800f662:	2800      	cmp	r0, #0
 800f664:	f000 815b 	beq.w	800f91e <_dtoa_r+0x93e>
 800f668:	2400      	movs	r4, #0
 800f66a:	4625      	mov	r5, r4
 800f66c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f66e:	43db      	mvns	r3, r3
 800f670:	9304      	str	r3, [sp, #16]
 800f672:	4656      	mov	r6, sl
 800f674:	2700      	movs	r7, #0
 800f676:	4621      	mov	r1, r4
 800f678:	4658      	mov	r0, fp
 800f67a:	f000 fb03 	bl	800fc84 <_Bfree>
 800f67e:	2d00      	cmp	r5, #0
 800f680:	d0dc      	beq.n	800f63c <_dtoa_r+0x65c>
 800f682:	b12f      	cbz	r7, 800f690 <_dtoa_r+0x6b0>
 800f684:	42af      	cmp	r7, r5
 800f686:	d003      	beq.n	800f690 <_dtoa_r+0x6b0>
 800f688:	4639      	mov	r1, r7
 800f68a:	4658      	mov	r0, fp
 800f68c:	f000 fafa 	bl	800fc84 <_Bfree>
 800f690:	4629      	mov	r1, r5
 800f692:	4658      	mov	r0, fp
 800f694:	f000 faf6 	bl	800fc84 <_Bfree>
 800f698:	e7d0      	b.n	800f63c <_dtoa_r+0x65c>
 800f69a:	9704      	str	r7, [sp, #16]
 800f69c:	4633      	mov	r3, r6
 800f69e:	461e      	mov	r6, r3
 800f6a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6a4:	2a39      	cmp	r2, #57	@ 0x39
 800f6a6:	d107      	bne.n	800f6b8 <_dtoa_r+0x6d8>
 800f6a8:	459a      	cmp	sl, r3
 800f6aa:	d1f8      	bne.n	800f69e <_dtoa_r+0x6be>
 800f6ac:	9a04      	ldr	r2, [sp, #16]
 800f6ae:	3201      	adds	r2, #1
 800f6b0:	9204      	str	r2, [sp, #16]
 800f6b2:	2230      	movs	r2, #48	@ 0x30
 800f6b4:	f88a 2000 	strb.w	r2, [sl]
 800f6b8:	781a      	ldrb	r2, [r3, #0]
 800f6ba:	3201      	adds	r2, #1
 800f6bc:	701a      	strb	r2, [r3, #0]
 800f6be:	e7bd      	b.n	800f63c <_dtoa_r+0x65c>
 800f6c0:	4b09      	ldr	r3, [pc, #36]	@ (800f6e8 <_dtoa_r+0x708>)
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	f7f0 ff70 	bl	80005a8 <__aeabi_dmul>
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	460d      	mov	r5, r1
 800f6d0:	f7f1 f9d2 	bl	8000a78 <__aeabi_dcmpeq>
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	f43f aebc 	beq.w	800f452 <_dtoa_r+0x472>
 800f6da:	e6f1      	b.n	800f4c0 <_dtoa_r+0x4e0>
 800f6dc:	08011278 	.word	0x08011278
 800f6e0:	3fe00000 	.word	0x3fe00000
 800f6e4:	3ff00000 	.word	0x3ff00000
 800f6e8:	40240000 	.word	0x40240000
 800f6ec:	40140000 	.word	0x40140000
 800f6f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f6f2:	2a00      	cmp	r2, #0
 800f6f4:	f000 80db 	beq.w	800f8ae <_dtoa_r+0x8ce>
 800f6f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f6fa:	2a01      	cmp	r2, #1
 800f6fc:	f300 80bf 	bgt.w	800f87e <_dtoa_r+0x89e>
 800f700:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f702:	2a00      	cmp	r2, #0
 800f704:	f000 80b7 	beq.w	800f876 <_dtoa_r+0x896>
 800f708:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f70c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f70e:	4646      	mov	r6, r8
 800f710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f712:	2101      	movs	r1, #1
 800f714:	441a      	add	r2, r3
 800f716:	4658      	mov	r0, fp
 800f718:	4498      	add	r8, r3
 800f71a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f71c:	f000 fb66 	bl	800fdec <__i2b>
 800f720:	4605      	mov	r5, r0
 800f722:	b15e      	cbz	r6, 800f73c <_dtoa_r+0x75c>
 800f724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f726:	2b00      	cmp	r3, #0
 800f728:	dd08      	ble.n	800f73c <_dtoa_r+0x75c>
 800f72a:	42b3      	cmp	r3, r6
 800f72c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f72e:	bfa8      	it	ge
 800f730:	4633      	movge	r3, r6
 800f732:	eba8 0803 	sub.w	r8, r8, r3
 800f736:	1af6      	subs	r6, r6, r3
 800f738:	1ad3      	subs	r3, r2, r3
 800f73a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f73c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f73e:	b1f3      	cbz	r3, 800f77e <_dtoa_r+0x79e>
 800f740:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f742:	2b00      	cmp	r3, #0
 800f744:	f000 80b7 	beq.w	800f8b6 <_dtoa_r+0x8d6>
 800f748:	b18c      	cbz	r4, 800f76e <_dtoa_r+0x78e>
 800f74a:	4629      	mov	r1, r5
 800f74c:	4622      	mov	r2, r4
 800f74e:	4658      	mov	r0, fp
 800f750:	f000 fc0c 	bl	800ff6c <__pow5mult>
 800f754:	464a      	mov	r2, r9
 800f756:	4601      	mov	r1, r0
 800f758:	4605      	mov	r5, r0
 800f75a:	4658      	mov	r0, fp
 800f75c:	f000 fb5c 	bl	800fe18 <__multiply>
 800f760:	4649      	mov	r1, r9
 800f762:	9004      	str	r0, [sp, #16]
 800f764:	4658      	mov	r0, fp
 800f766:	f000 fa8d 	bl	800fc84 <_Bfree>
 800f76a:	9b04      	ldr	r3, [sp, #16]
 800f76c:	4699      	mov	r9, r3
 800f76e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f770:	1b1a      	subs	r2, r3, r4
 800f772:	d004      	beq.n	800f77e <_dtoa_r+0x79e>
 800f774:	4649      	mov	r1, r9
 800f776:	4658      	mov	r0, fp
 800f778:	f000 fbf8 	bl	800ff6c <__pow5mult>
 800f77c:	4681      	mov	r9, r0
 800f77e:	2101      	movs	r1, #1
 800f780:	4658      	mov	r0, fp
 800f782:	f000 fb33 	bl	800fdec <__i2b>
 800f786:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f788:	4604      	mov	r4, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f000 81c9 	beq.w	800fb22 <_dtoa_r+0xb42>
 800f790:	461a      	mov	r2, r3
 800f792:	4601      	mov	r1, r0
 800f794:	4658      	mov	r0, fp
 800f796:	f000 fbe9 	bl	800ff6c <__pow5mult>
 800f79a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	4604      	mov	r4, r0
 800f7a0:	f300 808f 	bgt.w	800f8c2 <_dtoa_r+0x8e2>
 800f7a4:	9b02      	ldr	r3, [sp, #8]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	f040 8087 	bne.w	800f8ba <_dtoa_r+0x8da>
 800f7ac:	9b03      	ldr	r3, [sp, #12]
 800f7ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	f040 8083 	bne.w	800f8be <_dtoa_r+0x8de>
 800f7b8:	9b03      	ldr	r3, [sp, #12]
 800f7ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f7be:	0d1b      	lsrs	r3, r3, #20
 800f7c0:	051b      	lsls	r3, r3, #20
 800f7c2:	b12b      	cbz	r3, 800f7d0 <_dtoa_r+0x7f0>
 800f7c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7ca:	f108 0801 	add.w	r8, r8, #1
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	f000 81aa 	beq.w	800fb2e <_dtoa_r+0xb4e>
 800f7da:	6923      	ldr	r3, [r4, #16]
 800f7dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f7e0:	6918      	ldr	r0, [r3, #16]
 800f7e2:	f000 fab7 	bl	800fd54 <__hi0bits>
 800f7e6:	f1c0 0020 	rsb	r0, r0, #32
 800f7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7ec:	4418      	add	r0, r3
 800f7ee:	f010 001f 	ands.w	r0, r0, #31
 800f7f2:	d071      	beq.n	800f8d8 <_dtoa_r+0x8f8>
 800f7f4:	f1c0 0320 	rsb	r3, r0, #32
 800f7f8:	2b04      	cmp	r3, #4
 800f7fa:	dd65      	ble.n	800f8c8 <_dtoa_r+0x8e8>
 800f7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7fe:	f1c0 001c 	rsb	r0, r0, #28
 800f802:	4403      	add	r3, r0
 800f804:	4480      	add	r8, r0
 800f806:	4406      	add	r6, r0
 800f808:	9309      	str	r3, [sp, #36]	@ 0x24
 800f80a:	f1b8 0f00 	cmp.w	r8, #0
 800f80e:	dd05      	ble.n	800f81c <_dtoa_r+0x83c>
 800f810:	4649      	mov	r1, r9
 800f812:	4642      	mov	r2, r8
 800f814:	4658      	mov	r0, fp
 800f816:	f000 fc03 	bl	8010020 <__lshift>
 800f81a:	4681      	mov	r9, r0
 800f81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f81e:	2b00      	cmp	r3, #0
 800f820:	dd05      	ble.n	800f82e <_dtoa_r+0x84e>
 800f822:	4621      	mov	r1, r4
 800f824:	461a      	mov	r2, r3
 800f826:	4658      	mov	r0, fp
 800f828:	f000 fbfa 	bl	8010020 <__lshift>
 800f82c:	4604      	mov	r4, r0
 800f82e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f830:	2b00      	cmp	r3, #0
 800f832:	d053      	beq.n	800f8dc <_dtoa_r+0x8fc>
 800f834:	4621      	mov	r1, r4
 800f836:	4648      	mov	r0, r9
 800f838:	f000 fc5e 	bl	80100f8 <__mcmp>
 800f83c:	2800      	cmp	r0, #0
 800f83e:	da4d      	bge.n	800f8dc <_dtoa_r+0x8fc>
 800f840:	1e7b      	subs	r3, r7, #1
 800f842:	9304      	str	r3, [sp, #16]
 800f844:	4649      	mov	r1, r9
 800f846:	2300      	movs	r3, #0
 800f848:	220a      	movs	r2, #10
 800f84a:	4658      	mov	r0, fp
 800f84c:	f000 fa3c 	bl	800fcc8 <__multadd>
 800f850:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f852:	4681      	mov	r9, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	f000 816c 	beq.w	800fb32 <_dtoa_r+0xb52>
 800f85a:	2300      	movs	r3, #0
 800f85c:	4629      	mov	r1, r5
 800f85e:	220a      	movs	r2, #10
 800f860:	4658      	mov	r0, fp
 800f862:	f000 fa31 	bl	800fcc8 <__multadd>
 800f866:	9b08      	ldr	r3, [sp, #32]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	4605      	mov	r5, r0
 800f86c:	dc61      	bgt.n	800f932 <_dtoa_r+0x952>
 800f86e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f870:	2b02      	cmp	r3, #2
 800f872:	dc3b      	bgt.n	800f8ec <_dtoa_r+0x90c>
 800f874:	e05d      	b.n	800f932 <_dtoa_r+0x952>
 800f876:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f878:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f87c:	e746      	b.n	800f70c <_dtoa_r+0x72c>
 800f87e:	9b07      	ldr	r3, [sp, #28]
 800f880:	1e5c      	subs	r4, r3, #1
 800f882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f884:	42a3      	cmp	r3, r4
 800f886:	bfbf      	itttt	lt
 800f888:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f88a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800f88c:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f88e:	1ae3      	sublt	r3, r4, r3
 800f890:	bfb4      	ite	lt
 800f892:	18d2      	addlt	r2, r2, r3
 800f894:	1b1c      	subge	r4, r3, r4
 800f896:	9b07      	ldr	r3, [sp, #28]
 800f898:	bfbc      	itt	lt
 800f89a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800f89c:	2400      	movlt	r4, #0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	bfb5      	itete	lt
 800f8a2:	eba8 0603 	sublt.w	r6, r8, r3
 800f8a6:	9b07      	ldrge	r3, [sp, #28]
 800f8a8:	2300      	movlt	r3, #0
 800f8aa:	4646      	movge	r6, r8
 800f8ac:	e730      	b.n	800f710 <_dtoa_r+0x730>
 800f8ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f8b0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f8b2:	4646      	mov	r6, r8
 800f8b4:	e735      	b.n	800f722 <_dtoa_r+0x742>
 800f8b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f8b8:	e75c      	b.n	800f774 <_dtoa_r+0x794>
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	e788      	b.n	800f7d0 <_dtoa_r+0x7f0>
 800f8be:	9b02      	ldr	r3, [sp, #8]
 800f8c0:	e786      	b.n	800f7d0 <_dtoa_r+0x7f0>
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8c6:	e788      	b.n	800f7da <_dtoa_r+0x7fa>
 800f8c8:	d09f      	beq.n	800f80a <_dtoa_r+0x82a>
 800f8ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8cc:	331c      	adds	r3, #28
 800f8ce:	441a      	add	r2, r3
 800f8d0:	4498      	add	r8, r3
 800f8d2:	441e      	add	r6, r3
 800f8d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800f8d6:	e798      	b.n	800f80a <_dtoa_r+0x82a>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	e7f6      	b.n	800f8ca <_dtoa_r+0x8ea>
 800f8dc:	9b07      	ldr	r3, [sp, #28]
 800f8de:	9704      	str	r7, [sp, #16]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	dc20      	bgt.n	800f926 <_dtoa_r+0x946>
 800f8e4:	9308      	str	r3, [sp, #32]
 800f8e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f8e8:	2b02      	cmp	r3, #2
 800f8ea:	dd1e      	ble.n	800f92a <_dtoa_r+0x94a>
 800f8ec:	9b08      	ldr	r3, [sp, #32]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	f47f aebc 	bne.w	800f66c <_dtoa_r+0x68c>
 800f8f4:	4621      	mov	r1, r4
 800f8f6:	2205      	movs	r2, #5
 800f8f8:	4658      	mov	r0, fp
 800f8fa:	f000 f9e5 	bl	800fcc8 <__multadd>
 800f8fe:	4601      	mov	r1, r0
 800f900:	4604      	mov	r4, r0
 800f902:	4648      	mov	r0, r9
 800f904:	f000 fbf8 	bl	80100f8 <__mcmp>
 800f908:	2800      	cmp	r0, #0
 800f90a:	f77f aeaf 	ble.w	800f66c <_dtoa_r+0x68c>
 800f90e:	4656      	mov	r6, sl
 800f910:	2331      	movs	r3, #49	@ 0x31
 800f912:	f806 3b01 	strb.w	r3, [r6], #1
 800f916:	9b04      	ldr	r3, [sp, #16]
 800f918:	3301      	adds	r3, #1
 800f91a:	9304      	str	r3, [sp, #16]
 800f91c:	e6aa      	b.n	800f674 <_dtoa_r+0x694>
 800f91e:	9c07      	ldr	r4, [sp, #28]
 800f920:	9704      	str	r7, [sp, #16]
 800f922:	4625      	mov	r5, r4
 800f924:	e7f3      	b.n	800f90e <_dtoa_r+0x92e>
 800f926:	9b07      	ldr	r3, [sp, #28]
 800f928:	9308      	str	r3, [sp, #32]
 800f92a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f000 8104 	beq.w	800fb3a <_dtoa_r+0xb5a>
 800f932:	2e00      	cmp	r6, #0
 800f934:	dd05      	ble.n	800f942 <_dtoa_r+0x962>
 800f936:	4629      	mov	r1, r5
 800f938:	4632      	mov	r2, r6
 800f93a:	4658      	mov	r0, fp
 800f93c:	f000 fb70 	bl	8010020 <__lshift>
 800f940:	4605      	mov	r5, r0
 800f942:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f944:	2b00      	cmp	r3, #0
 800f946:	d05a      	beq.n	800f9fe <_dtoa_r+0xa1e>
 800f948:	6869      	ldr	r1, [r5, #4]
 800f94a:	4658      	mov	r0, fp
 800f94c:	f000 f95a 	bl	800fc04 <_Balloc>
 800f950:	4606      	mov	r6, r0
 800f952:	b928      	cbnz	r0, 800f960 <_dtoa_r+0x980>
 800f954:	4b84      	ldr	r3, [pc, #528]	@ (800fb68 <_dtoa_r+0xb88>)
 800f956:	4602      	mov	r2, r0
 800f958:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f95c:	f7ff bb54 	b.w	800f008 <_dtoa_r+0x28>
 800f960:	692a      	ldr	r2, [r5, #16]
 800f962:	3202      	adds	r2, #2
 800f964:	0092      	lsls	r2, r2, #2
 800f966:	f105 010c 	add.w	r1, r5, #12
 800f96a:	300c      	adds	r0, #12
 800f96c:	f7ff fa9f 	bl	800eeae <memcpy>
 800f970:	2201      	movs	r2, #1
 800f972:	4631      	mov	r1, r6
 800f974:	4658      	mov	r0, fp
 800f976:	f000 fb53 	bl	8010020 <__lshift>
 800f97a:	f10a 0301 	add.w	r3, sl, #1
 800f97e:	9307      	str	r3, [sp, #28]
 800f980:	9b08      	ldr	r3, [sp, #32]
 800f982:	4453      	add	r3, sl
 800f984:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f986:	9b02      	ldr	r3, [sp, #8]
 800f988:	f003 0301 	and.w	r3, r3, #1
 800f98c:	462f      	mov	r7, r5
 800f98e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f990:	4605      	mov	r5, r0
 800f992:	9b07      	ldr	r3, [sp, #28]
 800f994:	4621      	mov	r1, r4
 800f996:	3b01      	subs	r3, #1
 800f998:	4648      	mov	r0, r9
 800f99a:	9302      	str	r3, [sp, #8]
 800f99c:	f7ff fa95 	bl	800eeca <quorem>
 800f9a0:	4639      	mov	r1, r7
 800f9a2:	9008      	str	r0, [sp, #32]
 800f9a4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f9a8:	4648      	mov	r0, r9
 800f9aa:	f000 fba5 	bl	80100f8 <__mcmp>
 800f9ae:	462a      	mov	r2, r5
 800f9b0:	9009      	str	r0, [sp, #36]	@ 0x24
 800f9b2:	4621      	mov	r1, r4
 800f9b4:	4658      	mov	r0, fp
 800f9b6:	f000 fbbb 	bl	8010130 <__mdiff>
 800f9ba:	68c2      	ldr	r2, [r0, #12]
 800f9bc:	4606      	mov	r6, r0
 800f9be:	bb02      	cbnz	r2, 800fa02 <_dtoa_r+0xa22>
 800f9c0:	4601      	mov	r1, r0
 800f9c2:	4648      	mov	r0, r9
 800f9c4:	f000 fb98 	bl	80100f8 <__mcmp>
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	4631      	mov	r1, r6
 800f9cc:	4658      	mov	r0, fp
 800f9ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800f9d0:	f000 f958 	bl	800fc84 <_Bfree>
 800f9d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f9d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f9d8:	9e07      	ldr	r6, [sp, #28]
 800f9da:	ea43 0102 	orr.w	r1, r3, r2
 800f9de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9e0:	4319      	orrs	r1, r3
 800f9e2:	d110      	bne.n	800fa06 <_dtoa_r+0xa26>
 800f9e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f9e8:	d029      	beq.n	800fa3e <_dtoa_r+0xa5e>
 800f9ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	dd02      	ble.n	800f9f6 <_dtoa_r+0xa16>
 800f9f0:	9b08      	ldr	r3, [sp, #32]
 800f9f2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f9f6:	9b02      	ldr	r3, [sp, #8]
 800f9f8:	f883 8000 	strb.w	r8, [r3]
 800f9fc:	e63b      	b.n	800f676 <_dtoa_r+0x696>
 800f9fe:	4628      	mov	r0, r5
 800fa00:	e7bb      	b.n	800f97a <_dtoa_r+0x99a>
 800fa02:	2201      	movs	r2, #1
 800fa04:	e7e1      	b.n	800f9ca <_dtoa_r+0x9ea>
 800fa06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	db04      	blt.n	800fa16 <_dtoa_r+0xa36>
 800fa0c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800fa0e:	430b      	orrs	r3, r1
 800fa10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa12:	430b      	orrs	r3, r1
 800fa14:	d120      	bne.n	800fa58 <_dtoa_r+0xa78>
 800fa16:	2a00      	cmp	r2, #0
 800fa18:	dded      	ble.n	800f9f6 <_dtoa_r+0xa16>
 800fa1a:	4649      	mov	r1, r9
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	4658      	mov	r0, fp
 800fa20:	f000 fafe 	bl	8010020 <__lshift>
 800fa24:	4621      	mov	r1, r4
 800fa26:	4681      	mov	r9, r0
 800fa28:	f000 fb66 	bl	80100f8 <__mcmp>
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	dc03      	bgt.n	800fa38 <_dtoa_r+0xa58>
 800fa30:	d1e1      	bne.n	800f9f6 <_dtoa_r+0xa16>
 800fa32:	f018 0f01 	tst.w	r8, #1
 800fa36:	d0de      	beq.n	800f9f6 <_dtoa_r+0xa16>
 800fa38:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa3c:	d1d8      	bne.n	800f9f0 <_dtoa_r+0xa10>
 800fa3e:	9a02      	ldr	r2, [sp, #8]
 800fa40:	2339      	movs	r3, #57	@ 0x39
 800fa42:	7013      	strb	r3, [r2, #0]
 800fa44:	4633      	mov	r3, r6
 800fa46:	461e      	mov	r6, r3
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fa4e:	2a39      	cmp	r2, #57	@ 0x39
 800fa50:	d052      	beq.n	800faf8 <_dtoa_r+0xb18>
 800fa52:	3201      	adds	r2, #1
 800fa54:	701a      	strb	r2, [r3, #0]
 800fa56:	e60e      	b.n	800f676 <_dtoa_r+0x696>
 800fa58:	2a00      	cmp	r2, #0
 800fa5a:	dd07      	ble.n	800fa6c <_dtoa_r+0xa8c>
 800fa5c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa60:	d0ed      	beq.n	800fa3e <_dtoa_r+0xa5e>
 800fa62:	9a02      	ldr	r2, [sp, #8]
 800fa64:	f108 0301 	add.w	r3, r8, #1
 800fa68:	7013      	strb	r3, [r2, #0]
 800fa6a:	e604      	b.n	800f676 <_dtoa_r+0x696>
 800fa6c:	9b07      	ldr	r3, [sp, #28]
 800fa6e:	9a07      	ldr	r2, [sp, #28]
 800fa70:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fa74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d028      	beq.n	800facc <_dtoa_r+0xaec>
 800fa7a:	4649      	mov	r1, r9
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	220a      	movs	r2, #10
 800fa80:	4658      	mov	r0, fp
 800fa82:	f000 f921 	bl	800fcc8 <__multadd>
 800fa86:	42af      	cmp	r7, r5
 800fa88:	4681      	mov	r9, r0
 800fa8a:	f04f 0300 	mov.w	r3, #0
 800fa8e:	f04f 020a 	mov.w	r2, #10
 800fa92:	4639      	mov	r1, r7
 800fa94:	4658      	mov	r0, fp
 800fa96:	d107      	bne.n	800faa8 <_dtoa_r+0xac8>
 800fa98:	f000 f916 	bl	800fcc8 <__multadd>
 800fa9c:	4607      	mov	r7, r0
 800fa9e:	4605      	mov	r5, r0
 800faa0:	9b07      	ldr	r3, [sp, #28]
 800faa2:	3301      	adds	r3, #1
 800faa4:	9307      	str	r3, [sp, #28]
 800faa6:	e774      	b.n	800f992 <_dtoa_r+0x9b2>
 800faa8:	f000 f90e 	bl	800fcc8 <__multadd>
 800faac:	4629      	mov	r1, r5
 800faae:	4607      	mov	r7, r0
 800fab0:	2300      	movs	r3, #0
 800fab2:	220a      	movs	r2, #10
 800fab4:	4658      	mov	r0, fp
 800fab6:	f000 f907 	bl	800fcc8 <__multadd>
 800faba:	4605      	mov	r5, r0
 800fabc:	e7f0      	b.n	800faa0 <_dtoa_r+0xac0>
 800fabe:	9b08      	ldr	r3, [sp, #32]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	bfcc      	ite	gt
 800fac4:	461e      	movgt	r6, r3
 800fac6:	2601      	movle	r6, #1
 800fac8:	4456      	add	r6, sl
 800faca:	2700      	movs	r7, #0
 800facc:	4649      	mov	r1, r9
 800face:	2201      	movs	r2, #1
 800fad0:	4658      	mov	r0, fp
 800fad2:	f000 faa5 	bl	8010020 <__lshift>
 800fad6:	4621      	mov	r1, r4
 800fad8:	4681      	mov	r9, r0
 800fada:	f000 fb0d 	bl	80100f8 <__mcmp>
 800fade:	2800      	cmp	r0, #0
 800fae0:	dcb0      	bgt.n	800fa44 <_dtoa_r+0xa64>
 800fae2:	d102      	bne.n	800faea <_dtoa_r+0xb0a>
 800fae4:	f018 0f01 	tst.w	r8, #1
 800fae8:	d1ac      	bne.n	800fa44 <_dtoa_r+0xa64>
 800faea:	4633      	mov	r3, r6
 800faec:	461e      	mov	r6, r3
 800faee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800faf2:	2a30      	cmp	r2, #48	@ 0x30
 800faf4:	d0fa      	beq.n	800faec <_dtoa_r+0xb0c>
 800faf6:	e5be      	b.n	800f676 <_dtoa_r+0x696>
 800faf8:	459a      	cmp	sl, r3
 800fafa:	d1a4      	bne.n	800fa46 <_dtoa_r+0xa66>
 800fafc:	9b04      	ldr	r3, [sp, #16]
 800fafe:	3301      	adds	r3, #1
 800fb00:	9304      	str	r3, [sp, #16]
 800fb02:	2331      	movs	r3, #49	@ 0x31
 800fb04:	f88a 3000 	strb.w	r3, [sl]
 800fb08:	e5b5      	b.n	800f676 <_dtoa_r+0x696>
 800fb0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800fb0c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fb6c <_dtoa_r+0xb8c>
 800fb10:	b11b      	cbz	r3, 800fb1a <_dtoa_r+0xb3a>
 800fb12:	f10a 0308 	add.w	r3, sl, #8
 800fb16:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fb18:	6013      	str	r3, [r2, #0]
 800fb1a:	4650      	mov	r0, sl
 800fb1c:	b017      	add	sp, #92	@ 0x5c
 800fb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	f77f ae3d 	ble.w	800f7a4 <_dtoa_r+0x7c4>
 800fb2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb2e:	2001      	movs	r0, #1
 800fb30:	e65b      	b.n	800f7ea <_dtoa_r+0x80a>
 800fb32:	9b08      	ldr	r3, [sp, #32]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f77f aed6 	ble.w	800f8e6 <_dtoa_r+0x906>
 800fb3a:	4656      	mov	r6, sl
 800fb3c:	4621      	mov	r1, r4
 800fb3e:	4648      	mov	r0, r9
 800fb40:	f7ff f9c3 	bl	800eeca <quorem>
 800fb44:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fb48:	f806 8b01 	strb.w	r8, [r6], #1
 800fb4c:	9b08      	ldr	r3, [sp, #32]
 800fb4e:	eba6 020a 	sub.w	r2, r6, sl
 800fb52:	4293      	cmp	r3, r2
 800fb54:	ddb3      	ble.n	800fabe <_dtoa_r+0xade>
 800fb56:	4649      	mov	r1, r9
 800fb58:	2300      	movs	r3, #0
 800fb5a:	220a      	movs	r2, #10
 800fb5c:	4658      	mov	r0, fp
 800fb5e:	f000 f8b3 	bl	800fcc8 <__multadd>
 800fb62:	4681      	mov	r9, r0
 800fb64:	e7ea      	b.n	800fb3c <_dtoa_r+0xb5c>
 800fb66:	bf00      	nop
 800fb68:	080111d8 	.word	0x080111d8
 800fb6c:	0801115c 	.word	0x0801115c

0800fb70 <_free_r>:
 800fb70:	b538      	push	{r3, r4, r5, lr}
 800fb72:	4605      	mov	r5, r0
 800fb74:	2900      	cmp	r1, #0
 800fb76:	d041      	beq.n	800fbfc <_free_r+0x8c>
 800fb78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb7c:	1f0c      	subs	r4, r1, #4
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	bfb8      	it	lt
 800fb82:	18e4      	addlt	r4, r4, r3
 800fb84:	f7fe ff64 	bl	800ea50 <__malloc_lock>
 800fb88:	4a1d      	ldr	r2, [pc, #116]	@ (800fc00 <_free_r+0x90>)
 800fb8a:	6813      	ldr	r3, [r2, #0]
 800fb8c:	b933      	cbnz	r3, 800fb9c <_free_r+0x2c>
 800fb8e:	6063      	str	r3, [r4, #4]
 800fb90:	6014      	str	r4, [r2, #0]
 800fb92:	4628      	mov	r0, r5
 800fb94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb98:	f7fe bf60 	b.w	800ea5c <__malloc_unlock>
 800fb9c:	42a3      	cmp	r3, r4
 800fb9e:	d908      	bls.n	800fbb2 <_free_r+0x42>
 800fba0:	6820      	ldr	r0, [r4, #0]
 800fba2:	1821      	adds	r1, r4, r0
 800fba4:	428b      	cmp	r3, r1
 800fba6:	bf01      	itttt	eq
 800fba8:	6819      	ldreq	r1, [r3, #0]
 800fbaa:	685b      	ldreq	r3, [r3, #4]
 800fbac:	1809      	addeq	r1, r1, r0
 800fbae:	6021      	streq	r1, [r4, #0]
 800fbb0:	e7ed      	b.n	800fb8e <_free_r+0x1e>
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	b10b      	cbz	r3, 800fbbc <_free_r+0x4c>
 800fbb8:	42a3      	cmp	r3, r4
 800fbba:	d9fa      	bls.n	800fbb2 <_free_r+0x42>
 800fbbc:	6811      	ldr	r1, [r2, #0]
 800fbbe:	1850      	adds	r0, r2, r1
 800fbc0:	42a0      	cmp	r0, r4
 800fbc2:	d10b      	bne.n	800fbdc <_free_r+0x6c>
 800fbc4:	6820      	ldr	r0, [r4, #0]
 800fbc6:	4401      	add	r1, r0
 800fbc8:	1850      	adds	r0, r2, r1
 800fbca:	4283      	cmp	r3, r0
 800fbcc:	6011      	str	r1, [r2, #0]
 800fbce:	d1e0      	bne.n	800fb92 <_free_r+0x22>
 800fbd0:	6818      	ldr	r0, [r3, #0]
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	6053      	str	r3, [r2, #4]
 800fbd6:	4408      	add	r0, r1
 800fbd8:	6010      	str	r0, [r2, #0]
 800fbda:	e7da      	b.n	800fb92 <_free_r+0x22>
 800fbdc:	d902      	bls.n	800fbe4 <_free_r+0x74>
 800fbde:	230c      	movs	r3, #12
 800fbe0:	602b      	str	r3, [r5, #0]
 800fbe2:	e7d6      	b.n	800fb92 <_free_r+0x22>
 800fbe4:	6820      	ldr	r0, [r4, #0]
 800fbe6:	1821      	adds	r1, r4, r0
 800fbe8:	428b      	cmp	r3, r1
 800fbea:	bf04      	itt	eq
 800fbec:	6819      	ldreq	r1, [r3, #0]
 800fbee:	685b      	ldreq	r3, [r3, #4]
 800fbf0:	6063      	str	r3, [r4, #4]
 800fbf2:	bf04      	itt	eq
 800fbf4:	1809      	addeq	r1, r1, r0
 800fbf6:	6021      	streq	r1, [r4, #0]
 800fbf8:	6054      	str	r4, [r2, #4]
 800fbfa:	e7ca      	b.n	800fb92 <_free_r+0x22>
 800fbfc:	bd38      	pop	{r3, r4, r5, pc}
 800fbfe:	bf00      	nop
 800fc00:	20008bd0 	.word	0x20008bd0

0800fc04 <_Balloc>:
 800fc04:	b570      	push	{r4, r5, r6, lr}
 800fc06:	69c6      	ldr	r6, [r0, #28]
 800fc08:	4604      	mov	r4, r0
 800fc0a:	460d      	mov	r5, r1
 800fc0c:	b976      	cbnz	r6, 800fc2c <_Balloc+0x28>
 800fc0e:	2010      	movs	r0, #16
 800fc10:	f7fe fc3e 	bl	800e490 <malloc>
 800fc14:	4602      	mov	r2, r0
 800fc16:	61e0      	str	r0, [r4, #28]
 800fc18:	b920      	cbnz	r0, 800fc24 <_Balloc+0x20>
 800fc1a:	4b18      	ldr	r3, [pc, #96]	@ (800fc7c <_Balloc+0x78>)
 800fc1c:	4818      	ldr	r0, [pc, #96]	@ (800fc80 <_Balloc+0x7c>)
 800fc1e:	216b      	movs	r1, #107	@ 0x6b
 800fc20:	f000 fbfa 	bl	8010418 <__assert_func>
 800fc24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc28:	6006      	str	r6, [r0, #0]
 800fc2a:	60c6      	str	r6, [r0, #12]
 800fc2c:	69e6      	ldr	r6, [r4, #28]
 800fc2e:	68f3      	ldr	r3, [r6, #12]
 800fc30:	b183      	cbz	r3, 800fc54 <_Balloc+0x50>
 800fc32:	69e3      	ldr	r3, [r4, #28]
 800fc34:	68db      	ldr	r3, [r3, #12]
 800fc36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc3a:	b9b8      	cbnz	r0, 800fc6c <_Balloc+0x68>
 800fc3c:	2101      	movs	r1, #1
 800fc3e:	fa01 f605 	lsl.w	r6, r1, r5
 800fc42:	1d72      	adds	r2, r6, #5
 800fc44:	0092      	lsls	r2, r2, #2
 800fc46:	4620      	mov	r0, r4
 800fc48:	f000 fc04 	bl	8010454 <_calloc_r>
 800fc4c:	b160      	cbz	r0, 800fc68 <_Balloc+0x64>
 800fc4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc52:	e00e      	b.n	800fc72 <_Balloc+0x6e>
 800fc54:	2221      	movs	r2, #33	@ 0x21
 800fc56:	2104      	movs	r1, #4
 800fc58:	4620      	mov	r0, r4
 800fc5a:	f000 fbfb 	bl	8010454 <_calloc_r>
 800fc5e:	69e3      	ldr	r3, [r4, #28]
 800fc60:	60f0      	str	r0, [r6, #12]
 800fc62:	68db      	ldr	r3, [r3, #12]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d1e4      	bne.n	800fc32 <_Balloc+0x2e>
 800fc68:	2000      	movs	r0, #0
 800fc6a:	bd70      	pop	{r4, r5, r6, pc}
 800fc6c:	6802      	ldr	r2, [r0, #0]
 800fc6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc72:	2300      	movs	r3, #0
 800fc74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc78:	e7f7      	b.n	800fc6a <_Balloc+0x66>
 800fc7a:	bf00      	nop
 800fc7c:	08011169 	.word	0x08011169
 800fc80:	080111e9 	.word	0x080111e9

0800fc84 <_Bfree>:
 800fc84:	b570      	push	{r4, r5, r6, lr}
 800fc86:	69c6      	ldr	r6, [r0, #28]
 800fc88:	4605      	mov	r5, r0
 800fc8a:	460c      	mov	r4, r1
 800fc8c:	b976      	cbnz	r6, 800fcac <_Bfree+0x28>
 800fc8e:	2010      	movs	r0, #16
 800fc90:	f7fe fbfe 	bl	800e490 <malloc>
 800fc94:	4602      	mov	r2, r0
 800fc96:	61e8      	str	r0, [r5, #28]
 800fc98:	b920      	cbnz	r0, 800fca4 <_Bfree+0x20>
 800fc9a:	4b09      	ldr	r3, [pc, #36]	@ (800fcc0 <_Bfree+0x3c>)
 800fc9c:	4809      	ldr	r0, [pc, #36]	@ (800fcc4 <_Bfree+0x40>)
 800fc9e:	218f      	movs	r1, #143	@ 0x8f
 800fca0:	f000 fbba 	bl	8010418 <__assert_func>
 800fca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fca8:	6006      	str	r6, [r0, #0]
 800fcaa:	60c6      	str	r6, [r0, #12]
 800fcac:	b13c      	cbz	r4, 800fcbe <_Bfree+0x3a>
 800fcae:	69eb      	ldr	r3, [r5, #28]
 800fcb0:	6862      	ldr	r2, [r4, #4]
 800fcb2:	68db      	ldr	r3, [r3, #12]
 800fcb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fcb8:	6021      	str	r1, [r4, #0]
 800fcba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fcbe:	bd70      	pop	{r4, r5, r6, pc}
 800fcc0:	08011169 	.word	0x08011169
 800fcc4:	080111e9 	.word	0x080111e9

0800fcc8 <__multadd>:
 800fcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fccc:	690d      	ldr	r5, [r1, #16]
 800fcce:	4607      	mov	r7, r0
 800fcd0:	460c      	mov	r4, r1
 800fcd2:	461e      	mov	r6, r3
 800fcd4:	f101 0c14 	add.w	ip, r1, #20
 800fcd8:	2000      	movs	r0, #0
 800fcda:	f8dc 3000 	ldr.w	r3, [ip]
 800fcde:	b299      	uxth	r1, r3
 800fce0:	fb02 6101 	mla	r1, r2, r1, r6
 800fce4:	0c1e      	lsrs	r6, r3, #16
 800fce6:	0c0b      	lsrs	r3, r1, #16
 800fce8:	fb02 3306 	mla	r3, r2, r6, r3
 800fcec:	b289      	uxth	r1, r1
 800fcee:	3001      	adds	r0, #1
 800fcf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fcf4:	4285      	cmp	r5, r0
 800fcf6:	f84c 1b04 	str.w	r1, [ip], #4
 800fcfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fcfe:	dcec      	bgt.n	800fcda <__multadd+0x12>
 800fd00:	b30e      	cbz	r6, 800fd46 <__multadd+0x7e>
 800fd02:	68a3      	ldr	r3, [r4, #8]
 800fd04:	42ab      	cmp	r3, r5
 800fd06:	dc19      	bgt.n	800fd3c <__multadd+0x74>
 800fd08:	6861      	ldr	r1, [r4, #4]
 800fd0a:	4638      	mov	r0, r7
 800fd0c:	3101      	adds	r1, #1
 800fd0e:	f7ff ff79 	bl	800fc04 <_Balloc>
 800fd12:	4680      	mov	r8, r0
 800fd14:	b928      	cbnz	r0, 800fd22 <__multadd+0x5a>
 800fd16:	4602      	mov	r2, r0
 800fd18:	4b0c      	ldr	r3, [pc, #48]	@ (800fd4c <__multadd+0x84>)
 800fd1a:	480d      	ldr	r0, [pc, #52]	@ (800fd50 <__multadd+0x88>)
 800fd1c:	21ba      	movs	r1, #186	@ 0xba
 800fd1e:	f000 fb7b 	bl	8010418 <__assert_func>
 800fd22:	6922      	ldr	r2, [r4, #16]
 800fd24:	3202      	adds	r2, #2
 800fd26:	f104 010c 	add.w	r1, r4, #12
 800fd2a:	0092      	lsls	r2, r2, #2
 800fd2c:	300c      	adds	r0, #12
 800fd2e:	f7ff f8be 	bl	800eeae <memcpy>
 800fd32:	4621      	mov	r1, r4
 800fd34:	4638      	mov	r0, r7
 800fd36:	f7ff ffa5 	bl	800fc84 <_Bfree>
 800fd3a:	4644      	mov	r4, r8
 800fd3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd40:	3501      	adds	r5, #1
 800fd42:	615e      	str	r6, [r3, #20]
 800fd44:	6125      	str	r5, [r4, #16]
 800fd46:	4620      	mov	r0, r4
 800fd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd4c:	080111d8 	.word	0x080111d8
 800fd50:	080111e9 	.word	0x080111e9

0800fd54 <__hi0bits>:
 800fd54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fd58:	4603      	mov	r3, r0
 800fd5a:	bf36      	itet	cc
 800fd5c:	0403      	lslcc	r3, r0, #16
 800fd5e:	2000      	movcs	r0, #0
 800fd60:	2010      	movcc	r0, #16
 800fd62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fd66:	bf3c      	itt	cc
 800fd68:	021b      	lslcc	r3, r3, #8
 800fd6a:	3008      	addcc	r0, #8
 800fd6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd70:	bf3c      	itt	cc
 800fd72:	011b      	lslcc	r3, r3, #4
 800fd74:	3004      	addcc	r0, #4
 800fd76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd7a:	bf3c      	itt	cc
 800fd7c:	009b      	lslcc	r3, r3, #2
 800fd7e:	3002      	addcc	r0, #2
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	db05      	blt.n	800fd90 <__hi0bits+0x3c>
 800fd84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fd88:	f100 0001 	add.w	r0, r0, #1
 800fd8c:	bf08      	it	eq
 800fd8e:	2020      	moveq	r0, #32
 800fd90:	4770      	bx	lr

0800fd92 <__lo0bits>:
 800fd92:	6803      	ldr	r3, [r0, #0]
 800fd94:	4602      	mov	r2, r0
 800fd96:	f013 0007 	ands.w	r0, r3, #7
 800fd9a:	d00b      	beq.n	800fdb4 <__lo0bits+0x22>
 800fd9c:	07d9      	lsls	r1, r3, #31
 800fd9e:	d421      	bmi.n	800fde4 <__lo0bits+0x52>
 800fda0:	0798      	lsls	r0, r3, #30
 800fda2:	bf49      	itett	mi
 800fda4:	085b      	lsrmi	r3, r3, #1
 800fda6:	089b      	lsrpl	r3, r3, #2
 800fda8:	2001      	movmi	r0, #1
 800fdaa:	6013      	strmi	r3, [r2, #0]
 800fdac:	bf5c      	itt	pl
 800fdae:	6013      	strpl	r3, [r2, #0]
 800fdb0:	2002      	movpl	r0, #2
 800fdb2:	4770      	bx	lr
 800fdb4:	b299      	uxth	r1, r3
 800fdb6:	b909      	cbnz	r1, 800fdbc <__lo0bits+0x2a>
 800fdb8:	0c1b      	lsrs	r3, r3, #16
 800fdba:	2010      	movs	r0, #16
 800fdbc:	b2d9      	uxtb	r1, r3
 800fdbe:	b909      	cbnz	r1, 800fdc4 <__lo0bits+0x32>
 800fdc0:	3008      	adds	r0, #8
 800fdc2:	0a1b      	lsrs	r3, r3, #8
 800fdc4:	0719      	lsls	r1, r3, #28
 800fdc6:	bf04      	itt	eq
 800fdc8:	091b      	lsreq	r3, r3, #4
 800fdca:	3004      	addeq	r0, #4
 800fdcc:	0799      	lsls	r1, r3, #30
 800fdce:	bf04      	itt	eq
 800fdd0:	089b      	lsreq	r3, r3, #2
 800fdd2:	3002      	addeq	r0, #2
 800fdd4:	07d9      	lsls	r1, r3, #31
 800fdd6:	d403      	bmi.n	800fde0 <__lo0bits+0x4e>
 800fdd8:	085b      	lsrs	r3, r3, #1
 800fdda:	f100 0001 	add.w	r0, r0, #1
 800fdde:	d003      	beq.n	800fde8 <__lo0bits+0x56>
 800fde0:	6013      	str	r3, [r2, #0]
 800fde2:	4770      	bx	lr
 800fde4:	2000      	movs	r0, #0
 800fde6:	4770      	bx	lr
 800fde8:	2020      	movs	r0, #32
 800fdea:	4770      	bx	lr

0800fdec <__i2b>:
 800fdec:	b510      	push	{r4, lr}
 800fdee:	460c      	mov	r4, r1
 800fdf0:	2101      	movs	r1, #1
 800fdf2:	f7ff ff07 	bl	800fc04 <_Balloc>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	b928      	cbnz	r0, 800fe06 <__i2b+0x1a>
 800fdfa:	4b05      	ldr	r3, [pc, #20]	@ (800fe10 <__i2b+0x24>)
 800fdfc:	4805      	ldr	r0, [pc, #20]	@ (800fe14 <__i2b+0x28>)
 800fdfe:	f240 1145 	movw	r1, #325	@ 0x145
 800fe02:	f000 fb09 	bl	8010418 <__assert_func>
 800fe06:	2301      	movs	r3, #1
 800fe08:	6144      	str	r4, [r0, #20]
 800fe0a:	6103      	str	r3, [r0, #16]
 800fe0c:	bd10      	pop	{r4, pc}
 800fe0e:	bf00      	nop
 800fe10:	080111d8 	.word	0x080111d8
 800fe14:	080111e9 	.word	0x080111e9

0800fe18 <__multiply>:
 800fe18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe1c:	4614      	mov	r4, r2
 800fe1e:	690a      	ldr	r2, [r1, #16]
 800fe20:	6923      	ldr	r3, [r4, #16]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	bfa8      	it	ge
 800fe26:	4623      	movge	r3, r4
 800fe28:	460f      	mov	r7, r1
 800fe2a:	bfa4      	itt	ge
 800fe2c:	460c      	movge	r4, r1
 800fe2e:	461f      	movge	r7, r3
 800fe30:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fe34:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fe38:	68a3      	ldr	r3, [r4, #8]
 800fe3a:	6861      	ldr	r1, [r4, #4]
 800fe3c:	eb0a 0609 	add.w	r6, sl, r9
 800fe40:	42b3      	cmp	r3, r6
 800fe42:	b085      	sub	sp, #20
 800fe44:	bfb8      	it	lt
 800fe46:	3101      	addlt	r1, #1
 800fe48:	f7ff fedc 	bl	800fc04 <_Balloc>
 800fe4c:	b930      	cbnz	r0, 800fe5c <__multiply+0x44>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	4b44      	ldr	r3, [pc, #272]	@ (800ff64 <__multiply+0x14c>)
 800fe52:	4845      	ldr	r0, [pc, #276]	@ (800ff68 <__multiply+0x150>)
 800fe54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fe58:	f000 fade 	bl	8010418 <__assert_func>
 800fe5c:	f100 0514 	add.w	r5, r0, #20
 800fe60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fe64:	462b      	mov	r3, r5
 800fe66:	2200      	movs	r2, #0
 800fe68:	4543      	cmp	r3, r8
 800fe6a:	d321      	bcc.n	800feb0 <__multiply+0x98>
 800fe6c:	f107 0114 	add.w	r1, r7, #20
 800fe70:	f104 0214 	add.w	r2, r4, #20
 800fe74:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fe78:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fe7c:	9302      	str	r3, [sp, #8]
 800fe7e:	1b13      	subs	r3, r2, r4
 800fe80:	3b15      	subs	r3, #21
 800fe82:	f023 0303 	bic.w	r3, r3, #3
 800fe86:	3304      	adds	r3, #4
 800fe88:	f104 0715 	add.w	r7, r4, #21
 800fe8c:	42ba      	cmp	r2, r7
 800fe8e:	bf38      	it	cc
 800fe90:	2304      	movcc	r3, #4
 800fe92:	9301      	str	r3, [sp, #4]
 800fe94:	9b02      	ldr	r3, [sp, #8]
 800fe96:	9103      	str	r1, [sp, #12]
 800fe98:	428b      	cmp	r3, r1
 800fe9a:	d80c      	bhi.n	800feb6 <__multiply+0x9e>
 800fe9c:	2e00      	cmp	r6, #0
 800fe9e:	dd03      	ble.n	800fea8 <__multiply+0x90>
 800fea0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d05a      	beq.n	800ff5e <__multiply+0x146>
 800fea8:	6106      	str	r6, [r0, #16]
 800feaa:	b005      	add	sp, #20
 800feac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb0:	f843 2b04 	str.w	r2, [r3], #4
 800feb4:	e7d8      	b.n	800fe68 <__multiply+0x50>
 800feb6:	f8b1 a000 	ldrh.w	sl, [r1]
 800feba:	f1ba 0f00 	cmp.w	sl, #0
 800febe:	d023      	beq.n	800ff08 <__multiply+0xf0>
 800fec0:	f104 0e14 	add.w	lr, r4, #20
 800fec4:	46a9      	mov	r9, r5
 800fec6:	f04f 0c00 	mov.w	ip, #0
 800feca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fece:	f8d9 3000 	ldr.w	r3, [r9]
 800fed2:	fa1f fb87 	uxth.w	fp, r7
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	fb0a 330b 	mla	r3, sl, fp, r3
 800fedc:	4463      	add	r3, ip
 800fede:	f8d9 c000 	ldr.w	ip, [r9]
 800fee2:	0c3f      	lsrs	r7, r7, #16
 800fee4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800fee8:	fb0a c707 	mla	r7, sl, r7, ip
 800feec:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fef6:	4572      	cmp	r2, lr
 800fef8:	f849 3b04 	str.w	r3, [r9], #4
 800fefc:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ff00:	d8e3      	bhi.n	800feca <__multiply+0xb2>
 800ff02:	9b01      	ldr	r3, [sp, #4]
 800ff04:	f845 c003 	str.w	ip, [r5, r3]
 800ff08:	9b03      	ldr	r3, [sp, #12]
 800ff0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ff0e:	3104      	adds	r1, #4
 800ff10:	f1b9 0f00 	cmp.w	r9, #0
 800ff14:	d021      	beq.n	800ff5a <__multiply+0x142>
 800ff16:	682b      	ldr	r3, [r5, #0]
 800ff18:	f104 0c14 	add.w	ip, r4, #20
 800ff1c:	46ae      	mov	lr, r5
 800ff1e:	f04f 0a00 	mov.w	sl, #0
 800ff22:	f8bc b000 	ldrh.w	fp, [ip]
 800ff26:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ff2a:	fb09 770b 	mla	r7, r9, fp, r7
 800ff2e:	4457      	add	r7, sl
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ff36:	f84e 3b04 	str.w	r3, [lr], #4
 800ff3a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ff3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff42:	f8be 3000 	ldrh.w	r3, [lr]
 800ff46:	fb09 330a 	mla	r3, r9, sl, r3
 800ff4a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ff4e:	4562      	cmp	r2, ip
 800ff50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff54:	d8e5      	bhi.n	800ff22 <__multiply+0x10a>
 800ff56:	9f01      	ldr	r7, [sp, #4]
 800ff58:	51eb      	str	r3, [r5, r7]
 800ff5a:	3504      	adds	r5, #4
 800ff5c:	e79a      	b.n	800fe94 <__multiply+0x7c>
 800ff5e:	3e01      	subs	r6, #1
 800ff60:	e79c      	b.n	800fe9c <__multiply+0x84>
 800ff62:	bf00      	nop
 800ff64:	080111d8 	.word	0x080111d8
 800ff68:	080111e9 	.word	0x080111e9

0800ff6c <__pow5mult>:
 800ff6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff70:	4615      	mov	r5, r2
 800ff72:	f012 0203 	ands.w	r2, r2, #3
 800ff76:	4607      	mov	r7, r0
 800ff78:	460e      	mov	r6, r1
 800ff7a:	d007      	beq.n	800ff8c <__pow5mult+0x20>
 800ff7c:	4c25      	ldr	r4, [pc, #148]	@ (8010014 <__pow5mult+0xa8>)
 800ff7e:	3a01      	subs	r2, #1
 800ff80:	2300      	movs	r3, #0
 800ff82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff86:	f7ff fe9f 	bl	800fcc8 <__multadd>
 800ff8a:	4606      	mov	r6, r0
 800ff8c:	10ad      	asrs	r5, r5, #2
 800ff8e:	d03d      	beq.n	801000c <__pow5mult+0xa0>
 800ff90:	69fc      	ldr	r4, [r7, #28]
 800ff92:	b97c      	cbnz	r4, 800ffb4 <__pow5mult+0x48>
 800ff94:	2010      	movs	r0, #16
 800ff96:	f7fe fa7b 	bl	800e490 <malloc>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	61f8      	str	r0, [r7, #28]
 800ff9e:	b928      	cbnz	r0, 800ffac <__pow5mult+0x40>
 800ffa0:	4b1d      	ldr	r3, [pc, #116]	@ (8010018 <__pow5mult+0xac>)
 800ffa2:	481e      	ldr	r0, [pc, #120]	@ (801001c <__pow5mult+0xb0>)
 800ffa4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ffa8:	f000 fa36 	bl	8010418 <__assert_func>
 800ffac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ffb0:	6004      	str	r4, [r0, #0]
 800ffb2:	60c4      	str	r4, [r0, #12]
 800ffb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ffb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ffbc:	b94c      	cbnz	r4, 800ffd2 <__pow5mult+0x66>
 800ffbe:	f240 2171 	movw	r1, #625	@ 0x271
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	f7ff ff12 	bl	800fdec <__i2b>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	f8c8 0008 	str.w	r0, [r8, #8]
 800ffce:	4604      	mov	r4, r0
 800ffd0:	6003      	str	r3, [r0, #0]
 800ffd2:	f04f 0900 	mov.w	r9, #0
 800ffd6:	07eb      	lsls	r3, r5, #31
 800ffd8:	d50a      	bpl.n	800fff0 <__pow5mult+0x84>
 800ffda:	4631      	mov	r1, r6
 800ffdc:	4622      	mov	r2, r4
 800ffde:	4638      	mov	r0, r7
 800ffe0:	f7ff ff1a 	bl	800fe18 <__multiply>
 800ffe4:	4631      	mov	r1, r6
 800ffe6:	4680      	mov	r8, r0
 800ffe8:	4638      	mov	r0, r7
 800ffea:	f7ff fe4b 	bl	800fc84 <_Bfree>
 800ffee:	4646      	mov	r6, r8
 800fff0:	106d      	asrs	r5, r5, #1
 800fff2:	d00b      	beq.n	801000c <__pow5mult+0xa0>
 800fff4:	6820      	ldr	r0, [r4, #0]
 800fff6:	b938      	cbnz	r0, 8010008 <__pow5mult+0x9c>
 800fff8:	4622      	mov	r2, r4
 800fffa:	4621      	mov	r1, r4
 800fffc:	4638      	mov	r0, r7
 800fffe:	f7ff ff0b 	bl	800fe18 <__multiply>
 8010002:	6020      	str	r0, [r4, #0]
 8010004:	f8c0 9000 	str.w	r9, [r0]
 8010008:	4604      	mov	r4, r0
 801000a:	e7e4      	b.n	800ffd6 <__pow5mult+0x6a>
 801000c:	4630      	mov	r0, r6
 801000e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010012:	bf00      	nop
 8010014:	08011244 	.word	0x08011244
 8010018:	08011169 	.word	0x08011169
 801001c:	080111e9 	.word	0x080111e9

08010020 <__lshift>:
 8010020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010024:	460c      	mov	r4, r1
 8010026:	6849      	ldr	r1, [r1, #4]
 8010028:	6923      	ldr	r3, [r4, #16]
 801002a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801002e:	68a3      	ldr	r3, [r4, #8]
 8010030:	4607      	mov	r7, r0
 8010032:	4691      	mov	r9, r2
 8010034:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010038:	f108 0601 	add.w	r6, r8, #1
 801003c:	42b3      	cmp	r3, r6
 801003e:	db0b      	blt.n	8010058 <__lshift+0x38>
 8010040:	4638      	mov	r0, r7
 8010042:	f7ff fddf 	bl	800fc04 <_Balloc>
 8010046:	4605      	mov	r5, r0
 8010048:	b948      	cbnz	r0, 801005e <__lshift+0x3e>
 801004a:	4602      	mov	r2, r0
 801004c:	4b28      	ldr	r3, [pc, #160]	@ (80100f0 <__lshift+0xd0>)
 801004e:	4829      	ldr	r0, [pc, #164]	@ (80100f4 <__lshift+0xd4>)
 8010050:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010054:	f000 f9e0 	bl	8010418 <__assert_func>
 8010058:	3101      	adds	r1, #1
 801005a:	005b      	lsls	r3, r3, #1
 801005c:	e7ee      	b.n	801003c <__lshift+0x1c>
 801005e:	2300      	movs	r3, #0
 8010060:	f100 0114 	add.w	r1, r0, #20
 8010064:	f100 0210 	add.w	r2, r0, #16
 8010068:	4618      	mov	r0, r3
 801006a:	4553      	cmp	r3, sl
 801006c:	db33      	blt.n	80100d6 <__lshift+0xb6>
 801006e:	6920      	ldr	r0, [r4, #16]
 8010070:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010074:	f104 0314 	add.w	r3, r4, #20
 8010078:	f019 091f 	ands.w	r9, r9, #31
 801007c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010080:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010084:	d02b      	beq.n	80100de <__lshift+0xbe>
 8010086:	f1c9 0e20 	rsb	lr, r9, #32
 801008a:	468a      	mov	sl, r1
 801008c:	2200      	movs	r2, #0
 801008e:	6818      	ldr	r0, [r3, #0]
 8010090:	fa00 f009 	lsl.w	r0, r0, r9
 8010094:	4310      	orrs	r0, r2
 8010096:	f84a 0b04 	str.w	r0, [sl], #4
 801009a:	f853 2b04 	ldr.w	r2, [r3], #4
 801009e:	459c      	cmp	ip, r3
 80100a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80100a4:	d8f3      	bhi.n	801008e <__lshift+0x6e>
 80100a6:	ebac 0304 	sub.w	r3, ip, r4
 80100aa:	3b15      	subs	r3, #21
 80100ac:	f023 0303 	bic.w	r3, r3, #3
 80100b0:	3304      	adds	r3, #4
 80100b2:	f104 0015 	add.w	r0, r4, #21
 80100b6:	4584      	cmp	ip, r0
 80100b8:	bf38      	it	cc
 80100ba:	2304      	movcc	r3, #4
 80100bc:	50ca      	str	r2, [r1, r3]
 80100be:	b10a      	cbz	r2, 80100c4 <__lshift+0xa4>
 80100c0:	f108 0602 	add.w	r6, r8, #2
 80100c4:	3e01      	subs	r6, #1
 80100c6:	4638      	mov	r0, r7
 80100c8:	612e      	str	r6, [r5, #16]
 80100ca:	4621      	mov	r1, r4
 80100cc:	f7ff fdda 	bl	800fc84 <_Bfree>
 80100d0:	4628      	mov	r0, r5
 80100d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80100da:	3301      	adds	r3, #1
 80100dc:	e7c5      	b.n	801006a <__lshift+0x4a>
 80100de:	3904      	subs	r1, #4
 80100e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80100e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80100e8:	459c      	cmp	ip, r3
 80100ea:	d8f9      	bhi.n	80100e0 <__lshift+0xc0>
 80100ec:	e7ea      	b.n	80100c4 <__lshift+0xa4>
 80100ee:	bf00      	nop
 80100f0:	080111d8 	.word	0x080111d8
 80100f4:	080111e9 	.word	0x080111e9

080100f8 <__mcmp>:
 80100f8:	690a      	ldr	r2, [r1, #16]
 80100fa:	4603      	mov	r3, r0
 80100fc:	6900      	ldr	r0, [r0, #16]
 80100fe:	1a80      	subs	r0, r0, r2
 8010100:	b530      	push	{r4, r5, lr}
 8010102:	d10e      	bne.n	8010122 <__mcmp+0x2a>
 8010104:	3314      	adds	r3, #20
 8010106:	3114      	adds	r1, #20
 8010108:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801010c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010110:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010114:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010118:	4295      	cmp	r5, r2
 801011a:	d003      	beq.n	8010124 <__mcmp+0x2c>
 801011c:	d205      	bcs.n	801012a <__mcmp+0x32>
 801011e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010122:	bd30      	pop	{r4, r5, pc}
 8010124:	42a3      	cmp	r3, r4
 8010126:	d3f3      	bcc.n	8010110 <__mcmp+0x18>
 8010128:	e7fb      	b.n	8010122 <__mcmp+0x2a>
 801012a:	2001      	movs	r0, #1
 801012c:	e7f9      	b.n	8010122 <__mcmp+0x2a>
	...

08010130 <__mdiff>:
 8010130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010134:	4689      	mov	r9, r1
 8010136:	4606      	mov	r6, r0
 8010138:	4611      	mov	r1, r2
 801013a:	4648      	mov	r0, r9
 801013c:	4614      	mov	r4, r2
 801013e:	f7ff ffdb 	bl	80100f8 <__mcmp>
 8010142:	1e05      	subs	r5, r0, #0
 8010144:	d112      	bne.n	801016c <__mdiff+0x3c>
 8010146:	4629      	mov	r1, r5
 8010148:	4630      	mov	r0, r6
 801014a:	f7ff fd5b 	bl	800fc04 <_Balloc>
 801014e:	4602      	mov	r2, r0
 8010150:	b928      	cbnz	r0, 801015e <__mdiff+0x2e>
 8010152:	4b3e      	ldr	r3, [pc, #248]	@ (801024c <__mdiff+0x11c>)
 8010154:	f240 2137 	movw	r1, #567	@ 0x237
 8010158:	483d      	ldr	r0, [pc, #244]	@ (8010250 <__mdiff+0x120>)
 801015a:	f000 f95d 	bl	8010418 <__assert_func>
 801015e:	2301      	movs	r3, #1
 8010160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010164:	4610      	mov	r0, r2
 8010166:	b003      	add	sp, #12
 8010168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801016c:	bfbc      	itt	lt
 801016e:	464b      	movlt	r3, r9
 8010170:	46a1      	movlt	r9, r4
 8010172:	4630      	mov	r0, r6
 8010174:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010178:	bfba      	itte	lt
 801017a:	461c      	movlt	r4, r3
 801017c:	2501      	movlt	r5, #1
 801017e:	2500      	movge	r5, #0
 8010180:	f7ff fd40 	bl	800fc04 <_Balloc>
 8010184:	4602      	mov	r2, r0
 8010186:	b918      	cbnz	r0, 8010190 <__mdiff+0x60>
 8010188:	4b30      	ldr	r3, [pc, #192]	@ (801024c <__mdiff+0x11c>)
 801018a:	f240 2145 	movw	r1, #581	@ 0x245
 801018e:	e7e3      	b.n	8010158 <__mdiff+0x28>
 8010190:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010194:	6926      	ldr	r6, [r4, #16]
 8010196:	60c5      	str	r5, [r0, #12]
 8010198:	f109 0310 	add.w	r3, r9, #16
 801019c:	f109 0514 	add.w	r5, r9, #20
 80101a0:	f104 0e14 	add.w	lr, r4, #20
 80101a4:	f100 0b14 	add.w	fp, r0, #20
 80101a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80101ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80101b0:	9301      	str	r3, [sp, #4]
 80101b2:	46d9      	mov	r9, fp
 80101b4:	f04f 0c00 	mov.w	ip, #0
 80101b8:	9b01      	ldr	r3, [sp, #4]
 80101ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80101be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80101c2:	9301      	str	r3, [sp, #4]
 80101c4:	b281      	uxth	r1, r0
 80101c6:	fa1f f38a 	uxth.w	r3, sl
 80101ca:	1a5b      	subs	r3, r3, r1
 80101cc:	0c00      	lsrs	r0, r0, #16
 80101ce:	4463      	add	r3, ip
 80101d0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80101d4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80101d8:	b29b      	uxth	r3, r3
 80101da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80101de:	4576      	cmp	r6, lr
 80101e0:	f849 3b04 	str.w	r3, [r9], #4
 80101e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80101e8:	d8e6      	bhi.n	80101b8 <__mdiff+0x88>
 80101ea:	1b33      	subs	r3, r6, r4
 80101ec:	3b15      	subs	r3, #21
 80101ee:	f023 0303 	bic.w	r3, r3, #3
 80101f2:	3415      	adds	r4, #21
 80101f4:	3304      	adds	r3, #4
 80101f6:	42a6      	cmp	r6, r4
 80101f8:	bf38      	it	cc
 80101fa:	2304      	movcc	r3, #4
 80101fc:	441d      	add	r5, r3
 80101fe:	445b      	add	r3, fp
 8010200:	461e      	mov	r6, r3
 8010202:	462c      	mov	r4, r5
 8010204:	4544      	cmp	r4, r8
 8010206:	d30e      	bcc.n	8010226 <__mdiff+0xf6>
 8010208:	f108 0103 	add.w	r1, r8, #3
 801020c:	1b49      	subs	r1, r1, r5
 801020e:	f021 0103 	bic.w	r1, r1, #3
 8010212:	3d03      	subs	r5, #3
 8010214:	45a8      	cmp	r8, r5
 8010216:	bf38      	it	cc
 8010218:	2100      	movcc	r1, #0
 801021a:	440b      	add	r3, r1
 801021c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010220:	b191      	cbz	r1, 8010248 <__mdiff+0x118>
 8010222:	6117      	str	r7, [r2, #16]
 8010224:	e79e      	b.n	8010164 <__mdiff+0x34>
 8010226:	f854 1b04 	ldr.w	r1, [r4], #4
 801022a:	46e6      	mov	lr, ip
 801022c:	0c08      	lsrs	r0, r1, #16
 801022e:	fa1c fc81 	uxtah	ip, ip, r1
 8010232:	4471      	add	r1, lr
 8010234:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010238:	b289      	uxth	r1, r1
 801023a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801023e:	f846 1b04 	str.w	r1, [r6], #4
 8010242:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010246:	e7dd      	b.n	8010204 <__mdiff+0xd4>
 8010248:	3f01      	subs	r7, #1
 801024a:	e7e7      	b.n	801021c <__mdiff+0xec>
 801024c:	080111d8 	.word	0x080111d8
 8010250:	080111e9 	.word	0x080111e9

08010254 <__d2b>:
 8010254:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8010258:	2101      	movs	r1, #1
 801025a:	9e08      	ldr	r6, [sp, #32]
 801025c:	4690      	mov	r8, r2
 801025e:	4699      	mov	r9, r3
 8010260:	f7ff fcd0 	bl	800fc04 <_Balloc>
 8010264:	4604      	mov	r4, r0
 8010266:	b930      	cbnz	r0, 8010276 <__d2b+0x22>
 8010268:	4602      	mov	r2, r0
 801026a:	4b24      	ldr	r3, [pc, #144]	@ (80102fc <__d2b+0xa8>)
 801026c:	4824      	ldr	r0, [pc, #144]	@ (8010300 <__d2b+0xac>)
 801026e:	f240 310f 	movw	r1, #783	@ 0x30f
 8010272:	f000 f8d1 	bl	8010418 <__assert_func>
 8010276:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801027a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801027e:	b10d      	cbz	r5, 8010284 <__d2b+0x30>
 8010280:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010284:	9301      	str	r3, [sp, #4]
 8010286:	f1b8 0300 	subs.w	r3, r8, #0
 801028a:	d024      	beq.n	80102d6 <__d2b+0x82>
 801028c:	4668      	mov	r0, sp
 801028e:	9300      	str	r3, [sp, #0]
 8010290:	f7ff fd7f 	bl	800fd92 <__lo0bits>
 8010294:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010298:	b1d8      	cbz	r0, 80102d2 <__d2b+0x7e>
 801029a:	f1c0 0320 	rsb	r3, r0, #32
 801029e:	fa02 f303 	lsl.w	r3, r2, r3
 80102a2:	430b      	orrs	r3, r1
 80102a4:	40c2      	lsrs	r2, r0
 80102a6:	6163      	str	r3, [r4, #20]
 80102a8:	9201      	str	r2, [sp, #4]
 80102aa:	9b01      	ldr	r3, [sp, #4]
 80102ac:	61a3      	str	r3, [r4, #24]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	bf0c      	ite	eq
 80102b2:	2201      	moveq	r2, #1
 80102b4:	2202      	movne	r2, #2
 80102b6:	6122      	str	r2, [r4, #16]
 80102b8:	b1ad      	cbz	r5, 80102e6 <__d2b+0x92>
 80102ba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80102be:	4405      	add	r5, r0
 80102c0:	6035      	str	r5, [r6, #0]
 80102c2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80102c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102c8:	6018      	str	r0, [r3, #0]
 80102ca:	4620      	mov	r0, r4
 80102cc:	b002      	add	sp, #8
 80102ce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80102d2:	6161      	str	r1, [r4, #20]
 80102d4:	e7e9      	b.n	80102aa <__d2b+0x56>
 80102d6:	a801      	add	r0, sp, #4
 80102d8:	f7ff fd5b 	bl	800fd92 <__lo0bits>
 80102dc:	9b01      	ldr	r3, [sp, #4]
 80102de:	6163      	str	r3, [r4, #20]
 80102e0:	3020      	adds	r0, #32
 80102e2:	2201      	movs	r2, #1
 80102e4:	e7e7      	b.n	80102b6 <__d2b+0x62>
 80102e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80102ee:	6030      	str	r0, [r6, #0]
 80102f0:	6918      	ldr	r0, [r3, #16]
 80102f2:	f7ff fd2f 	bl	800fd54 <__hi0bits>
 80102f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80102fa:	e7e4      	b.n	80102c6 <__d2b+0x72>
 80102fc:	080111d8 	.word	0x080111d8
 8010300:	080111e9 	.word	0x080111e9

08010304 <__sread>:
 8010304:	b510      	push	{r4, lr}
 8010306:	460c      	mov	r4, r1
 8010308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801030c:	f000 f860 	bl	80103d0 <_read_r>
 8010310:	2800      	cmp	r0, #0
 8010312:	bfab      	itete	ge
 8010314:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010316:	89a3      	ldrhlt	r3, [r4, #12]
 8010318:	181b      	addge	r3, r3, r0
 801031a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801031e:	bfac      	ite	ge
 8010320:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010322:	81a3      	strhlt	r3, [r4, #12]
 8010324:	bd10      	pop	{r4, pc}

08010326 <__swrite>:
 8010326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801032a:	461f      	mov	r7, r3
 801032c:	898b      	ldrh	r3, [r1, #12]
 801032e:	05db      	lsls	r3, r3, #23
 8010330:	4605      	mov	r5, r0
 8010332:	460c      	mov	r4, r1
 8010334:	4616      	mov	r6, r2
 8010336:	d505      	bpl.n	8010344 <__swrite+0x1e>
 8010338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801033c:	2302      	movs	r3, #2
 801033e:	2200      	movs	r2, #0
 8010340:	f000 f834 	bl	80103ac <_lseek_r>
 8010344:	89a3      	ldrh	r3, [r4, #12]
 8010346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801034a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801034e:	81a3      	strh	r3, [r4, #12]
 8010350:	4632      	mov	r2, r6
 8010352:	463b      	mov	r3, r7
 8010354:	4628      	mov	r0, r5
 8010356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801035a:	f000 b84b 	b.w	80103f4 <_write_r>

0801035e <__sseek>:
 801035e:	b510      	push	{r4, lr}
 8010360:	460c      	mov	r4, r1
 8010362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010366:	f000 f821 	bl	80103ac <_lseek_r>
 801036a:	1c43      	adds	r3, r0, #1
 801036c:	89a3      	ldrh	r3, [r4, #12]
 801036e:	bf15      	itete	ne
 8010370:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010372:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010376:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801037a:	81a3      	strheq	r3, [r4, #12]
 801037c:	bf18      	it	ne
 801037e:	81a3      	strhne	r3, [r4, #12]
 8010380:	bd10      	pop	{r4, pc}

08010382 <__sclose>:
 8010382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010386:	f000 b801 	b.w	801038c <_close_r>
	...

0801038c <_close_r>:
 801038c:	b538      	push	{r3, r4, r5, lr}
 801038e:	4d06      	ldr	r5, [pc, #24]	@ (80103a8 <_close_r+0x1c>)
 8010390:	2300      	movs	r3, #0
 8010392:	4604      	mov	r4, r0
 8010394:	4608      	mov	r0, r1
 8010396:	602b      	str	r3, [r5, #0]
 8010398:	f7f1 fd5b 	bl	8001e52 <_close>
 801039c:	1c43      	adds	r3, r0, #1
 801039e:	d102      	bne.n	80103a6 <_close_r+0x1a>
 80103a0:	682b      	ldr	r3, [r5, #0]
 80103a2:	b103      	cbz	r3, 80103a6 <_close_r+0x1a>
 80103a4:	6023      	str	r3, [r4, #0]
 80103a6:	bd38      	pop	{r3, r4, r5, pc}
 80103a8:	20008d14 	.word	0x20008d14

080103ac <_lseek_r>:
 80103ac:	b538      	push	{r3, r4, r5, lr}
 80103ae:	4d07      	ldr	r5, [pc, #28]	@ (80103cc <_lseek_r+0x20>)
 80103b0:	4604      	mov	r4, r0
 80103b2:	4608      	mov	r0, r1
 80103b4:	4611      	mov	r1, r2
 80103b6:	2200      	movs	r2, #0
 80103b8:	602a      	str	r2, [r5, #0]
 80103ba:	461a      	mov	r2, r3
 80103bc:	f7f1 fd6d 	bl	8001e9a <_lseek>
 80103c0:	1c43      	adds	r3, r0, #1
 80103c2:	d102      	bne.n	80103ca <_lseek_r+0x1e>
 80103c4:	682b      	ldr	r3, [r5, #0]
 80103c6:	b103      	cbz	r3, 80103ca <_lseek_r+0x1e>
 80103c8:	6023      	str	r3, [r4, #0]
 80103ca:	bd38      	pop	{r3, r4, r5, pc}
 80103cc:	20008d14 	.word	0x20008d14

080103d0 <_read_r>:
 80103d0:	b538      	push	{r3, r4, r5, lr}
 80103d2:	4d07      	ldr	r5, [pc, #28]	@ (80103f0 <_read_r+0x20>)
 80103d4:	4604      	mov	r4, r0
 80103d6:	4608      	mov	r0, r1
 80103d8:	4611      	mov	r1, r2
 80103da:	2200      	movs	r2, #0
 80103dc:	602a      	str	r2, [r5, #0]
 80103de:	461a      	mov	r2, r3
 80103e0:	f7f1 fcfe 	bl	8001de0 <_read>
 80103e4:	1c43      	adds	r3, r0, #1
 80103e6:	d102      	bne.n	80103ee <_read_r+0x1e>
 80103e8:	682b      	ldr	r3, [r5, #0]
 80103ea:	b103      	cbz	r3, 80103ee <_read_r+0x1e>
 80103ec:	6023      	str	r3, [r4, #0]
 80103ee:	bd38      	pop	{r3, r4, r5, pc}
 80103f0:	20008d14 	.word	0x20008d14

080103f4 <_write_r>:
 80103f4:	b538      	push	{r3, r4, r5, lr}
 80103f6:	4d07      	ldr	r5, [pc, #28]	@ (8010414 <_write_r+0x20>)
 80103f8:	4604      	mov	r4, r0
 80103fa:	4608      	mov	r0, r1
 80103fc:	4611      	mov	r1, r2
 80103fe:	2200      	movs	r2, #0
 8010400:	602a      	str	r2, [r5, #0]
 8010402:	461a      	mov	r2, r3
 8010404:	f7f1 fd09 	bl	8001e1a <_write>
 8010408:	1c43      	adds	r3, r0, #1
 801040a:	d102      	bne.n	8010412 <_write_r+0x1e>
 801040c:	682b      	ldr	r3, [r5, #0]
 801040e:	b103      	cbz	r3, 8010412 <_write_r+0x1e>
 8010410:	6023      	str	r3, [r4, #0]
 8010412:	bd38      	pop	{r3, r4, r5, pc}
 8010414:	20008d14 	.word	0x20008d14

08010418 <__assert_func>:
 8010418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801041a:	4614      	mov	r4, r2
 801041c:	461a      	mov	r2, r3
 801041e:	4b09      	ldr	r3, [pc, #36]	@ (8010444 <__assert_func+0x2c>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	4605      	mov	r5, r0
 8010424:	68d8      	ldr	r0, [r3, #12]
 8010426:	b954      	cbnz	r4, 801043e <__assert_func+0x26>
 8010428:	4b07      	ldr	r3, [pc, #28]	@ (8010448 <__assert_func+0x30>)
 801042a:	461c      	mov	r4, r3
 801042c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010430:	9100      	str	r1, [sp, #0]
 8010432:	462b      	mov	r3, r5
 8010434:	4905      	ldr	r1, [pc, #20]	@ (801044c <__assert_func+0x34>)
 8010436:	f000 f833 	bl	80104a0 <fiprintf>
 801043a:	f000 f850 	bl	80104de <abort>
 801043e:	4b04      	ldr	r3, [pc, #16]	@ (8010450 <__assert_func+0x38>)
 8010440:	e7f4      	b.n	801042c <__assert_func+0x14>
 8010442:	bf00      	nop
 8010444:	2000411c 	.word	0x2000411c
 8010448:	08011486 	.word	0x08011486
 801044c:	08011458 	.word	0x08011458
 8010450:	0801144b 	.word	0x0801144b

08010454 <_calloc_r>:
 8010454:	b570      	push	{r4, r5, r6, lr}
 8010456:	fba1 5402 	umull	r5, r4, r1, r2
 801045a:	b93c      	cbnz	r4, 801046c <_calloc_r+0x18>
 801045c:	4629      	mov	r1, r5
 801045e:	f7fe f841 	bl	800e4e4 <_malloc_r>
 8010462:	4606      	mov	r6, r0
 8010464:	b928      	cbnz	r0, 8010472 <_calloc_r+0x1e>
 8010466:	2600      	movs	r6, #0
 8010468:	4630      	mov	r0, r6
 801046a:	bd70      	pop	{r4, r5, r6, pc}
 801046c:	220c      	movs	r2, #12
 801046e:	6002      	str	r2, [r0, #0]
 8010470:	e7f9      	b.n	8010466 <_calloc_r+0x12>
 8010472:	462a      	mov	r2, r5
 8010474:	4621      	mov	r1, r4
 8010476:	f7fe fcaf 	bl	800edd8 <memset>
 801047a:	e7f5      	b.n	8010468 <_calloc_r+0x14>

0801047c <__ascii_mbtowc>:
 801047c:	b082      	sub	sp, #8
 801047e:	b901      	cbnz	r1, 8010482 <__ascii_mbtowc+0x6>
 8010480:	a901      	add	r1, sp, #4
 8010482:	b142      	cbz	r2, 8010496 <__ascii_mbtowc+0x1a>
 8010484:	b14b      	cbz	r3, 801049a <__ascii_mbtowc+0x1e>
 8010486:	7813      	ldrb	r3, [r2, #0]
 8010488:	600b      	str	r3, [r1, #0]
 801048a:	7812      	ldrb	r2, [r2, #0]
 801048c:	1e10      	subs	r0, r2, #0
 801048e:	bf18      	it	ne
 8010490:	2001      	movne	r0, #1
 8010492:	b002      	add	sp, #8
 8010494:	4770      	bx	lr
 8010496:	4610      	mov	r0, r2
 8010498:	e7fb      	b.n	8010492 <__ascii_mbtowc+0x16>
 801049a:	f06f 0001 	mvn.w	r0, #1
 801049e:	e7f8      	b.n	8010492 <__ascii_mbtowc+0x16>

080104a0 <fiprintf>:
 80104a0:	b40e      	push	{r1, r2, r3}
 80104a2:	b503      	push	{r0, r1, lr}
 80104a4:	4601      	mov	r1, r0
 80104a6:	ab03      	add	r3, sp, #12
 80104a8:	4805      	ldr	r0, [pc, #20]	@ (80104c0 <fiprintf+0x20>)
 80104aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80104ae:	6800      	ldr	r0, [r0, #0]
 80104b0:	9301      	str	r3, [sp, #4]
 80104b2:	f000 f843 	bl	801053c <_vfiprintf_r>
 80104b6:	b002      	add	sp, #8
 80104b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80104bc:	b003      	add	sp, #12
 80104be:	4770      	bx	lr
 80104c0:	2000411c 	.word	0x2000411c

080104c4 <__ascii_wctomb>:
 80104c4:	4603      	mov	r3, r0
 80104c6:	4608      	mov	r0, r1
 80104c8:	b141      	cbz	r1, 80104dc <__ascii_wctomb+0x18>
 80104ca:	2aff      	cmp	r2, #255	@ 0xff
 80104cc:	d904      	bls.n	80104d8 <__ascii_wctomb+0x14>
 80104ce:	228a      	movs	r2, #138	@ 0x8a
 80104d0:	601a      	str	r2, [r3, #0]
 80104d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80104d6:	4770      	bx	lr
 80104d8:	700a      	strb	r2, [r1, #0]
 80104da:	2001      	movs	r0, #1
 80104dc:	4770      	bx	lr

080104de <abort>:
 80104de:	b508      	push	{r3, lr}
 80104e0:	2006      	movs	r0, #6
 80104e2:	f000 f96b 	bl	80107bc <raise>
 80104e6:	2001      	movs	r0, #1
 80104e8:	f7f1 fc6f 	bl	8001dca <_exit>

080104ec <__sfputc_r>:
 80104ec:	6893      	ldr	r3, [r2, #8]
 80104ee:	3b01      	subs	r3, #1
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	b410      	push	{r4}
 80104f4:	6093      	str	r3, [r2, #8]
 80104f6:	da07      	bge.n	8010508 <__sfputc_r+0x1c>
 80104f8:	6994      	ldr	r4, [r2, #24]
 80104fa:	42a3      	cmp	r3, r4
 80104fc:	db01      	blt.n	8010502 <__sfputc_r+0x16>
 80104fe:	290a      	cmp	r1, #10
 8010500:	d102      	bne.n	8010508 <__sfputc_r+0x1c>
 8010502:	bc10      	pop	{r4}
 8010504:	f7fe bb72 	b.w	800ebec <__swbuf_r>
 8010508:	6813      	ldr	r3, [r2, #0]
 801050a:	1c58      	adds	r0, r3, #1
 801050c:	6010      	str	r0, [r2, #0]
 801050e:	7019      	strb	r1, [r3, #0]
 8010510:	4608      	mov	r0, r1
 8010512:	bc10      	pop	{r4}
 8010514:	4770      	bx	lr

08010516 <__sfputs_r>:
 8010516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010518:	4606      	mov	r6, r0
 801051a:	460f      	mov	r7, r1
 801051c:	4614      	mov	r4, r2
 801051e:	18d5      	adds	r5, r2, r3
 8010520:	42ac      	cmp	r4, r5
 8010522:	d101      	bne.n	8010528 <__sfputs_r+0x12>
 8010524:	2000      	movs	r0, #0
 8010526:	e007      	b.n	8010538 <__sfputs_r+0x22>
 8010528:	f814 1b01 	ldrb.w	r1, [r4], #1
 801052c:	463a      	mov	r2, r7
 801052e:	4630      	mov	r0, r6
 8010530:	f7ff ffdc 	bl	80104ec <__sfputc_r>
 8010534:	1c43      	adds	r3, r0, #1
 8010536:	d1f3      	bne.n	8010520 <__sfputs_r+0xa>
 8010538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801053c <_vfiprintf_r>:
 801053c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010540:	460d      	mov	r5, r1
 8010542:	b09d      	sub	sp, #116	@ 0x74
 8010544:	4614      	mov	r4, r2
 8010546:	4698      	mov	r8, r3
 8010548:	4606      	mov	r6, r0
 801054a:	b118      	cbz	r0, 8010554 <_vfiprintf_r+0x18>
 801054c:	6a03      	ldr	r3, [r0, #32]
 801054e:	b90b      	cbnz	r3, 8010554 <_vfiprintf_r+0x18>
 8010550:	f7fe fb16 	bl	800eb80 <__sinit>
 8010554:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010556:	07d9      	lsls	r1, r3, #31
 8010558:	d405      	bmi.n	8010566 <_vfiprintf_r+0x2a>
 801055a:	89ab      	ldrh	r3, [r5, #12]
 801055c:	059a      	lsls	r2, r3, #22
 801055e:	d402      	bmi.n	8010566 <_vfiprintf_r+0x2a>
 8010560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010562:	f7fe fca2 	bl	800eeaa <__retarget_lock_acquire_recursive>
 8010566:	89ab      	ldrh	r3, [r5, #12]
 8010568:	071b      	lsls	r3, r3, #28
 801056a:	d501      	bpl.n	8010570 <_vfiprintf_r+0x34>
 801056c:	692b      	ldr	r3, [r5, #16]
 801056e:	b99b      	cbnz	r3, 8010598 <_vfiprintf_r+0x5c>
 8010570:	4629      	mov	r1, r5
 8010572:	4630      	mov	r0, r6
 8010574:	f7fe fb78 	bl	800ec68 <__swsetup_r>
 8010578:	b170      	cbz	r0, 8010598 <_vfiprintf_r+0x5c>
 801057a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801057c:	07dc      	lsls	r4, r3, #31
 801057e:	d504      	bpl.n	801058a <_vfiprintf_r+0x4e>
 8010580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010584:	b01d      	add	sp, #116	@ 0x74
 8010586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801058a:	89ab      	ldrh	r3, [r5, #12]
 801058c:	0598      	lsls	r0, r3, #22
 801058e:	d4f7      	bmi.n	8010580 <_vfiprintf_r+0x44>
 8010590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010592:	f7fe fc8b 	bl	800eeac <__retarget_lock_release_recursive>
 8010596:	e7f3      	b.n	8010580 <_vfiprintf_r+0x44>
 8010598:	2300      	movs	r3, #0
 801059a:	9309      	str	r3, [sp, #36]	@ 0x24
 801059c:	2320      	movs	r3, #32
 801059e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80105a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80105a6:	2330      	movs	r3, #48	@ 0x30
 80105a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010758 <_vfiprintf_r+0x21c>
 80105ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80105b0:	f04f 0901 	mov.w	r9, #1
 80105b4:	4623      	mov	r3, r4
 80105b6:	469a      	mov	sl, r3
 80105b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105bc:	b10a      	cbz	r2, 80105c2 <_vfiprintf_r+0x86>
 80105be:	2a25      	cmp	r2, #37	@ 0x25
 80105c0:	d1f9      	bne.n	80105b6 <_vfiprintf_r+0x7a>
 80105c2:	ebba 0b04 	subs.w	fp, sl, r4
 80105c6:	d00b      	beq.n	80105e0 <_vfiprintf_r+0xa4>
 80105c8:	465b      	mov	r3, fp
 80105ca:	4622      	mov	r2, r4
 80105cc:	4629      	mov	r1, r5
 80105ce:	4630      	mov	r0, r6
 80105d0:	f7ff ffa1 	bl	8010516 <__sfputs_r>
 80105d4:	3001      	adds	r0, #1
 80105d6:	f000 80a7 	beq.w	8010728 <_vfiprintf_r+0x1ec>
 80105da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105dc:	445a      	add	r2, fp
 80105de:	9209      	str	r2, [sp, #36]	@ 0x24
 80105e0:	f89a 3000 	ldrb.w	r3, [sl]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f000 809f 	beq.w	8010728 <_vfiprintf_r+0x1ec>
 80105ea:	2300      	movs	r3, #0
 80105ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80105f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105f4:	f10a 0a01 	add.w	sl, sl, #1
 80105f8:	9304      	str	r3, [sp, #16]
 80105fa:	9307      	str	r3, [sp, #28]
 80105fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010600:	931a      	str	r3, [sp, #104]	@ 0x68
 8010602:	4654      	mov	r4, sl
 8010604:	2205      	movs	r2, #5
 8010606:	f814 1b01 	ldrb.w	r1, [r4], #1
 801060a:	4853      	ldr	r0, [pc, #332]	@ (8010758 <_vfiprintf_r+0x21c>)
 801060c:	f7ef fdb8 	bl	8000180 <memchr>
 8010610:	9a04      	ldr	r2, [sp, #16]
 8010612:	b9d8      	cbnz	r0, 801064c <_vfiprintf_r+0x110>
 8010614:	06d1      	lsls	r1, r2, #27
 8010616:	bf44      	itt	mi
 8010618:	2320      	movmi	r3, #32
 801061a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801061e:	0713      	lsls	r3, r2, #28
 8010620:	bf44      	itt	mi
 8010622:	232b      	movmi	r3, #43	@ 0x2b
 8010624:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010628:	f89a 3000 	ldrb.w	r3, [sl]
 801062c:	2b2a      	cmp	r3, #42	@ 0x2a
 801062e:	d015      	beq.n	801065c <_vfiprintf_r+0x120>
 8010630:	9a07      	ldr	r2, [sp, #28]
 8010632:	4654      	mov	r4, sl
 8010634:	2000      	movs	r0, #0
 8010636:	f04f 0c0a 	mov.w	ip, #10
 801063a:	4621      	mov	r1, r4
 801063c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010640:	3b30      	subs	r3, #48	@ 0x30
 8010642:	2b09      	cmp	r3, #9
 8010644:	d94b      	bls.n	80106de <_vfiprintf_r+0x1a2>
 8010646:	b1b0      	cbz	r0, 8010676 <_vfiprintf_r+0x13a>
 8010648:	9207      	str	r2, [sp, #28]
 801064a:	e014      	b.n	8010676 <_vfiprintf_r+0x13a>
 801064c:	eba0 0308 	sub.w	r3, r0, r8
 8010650:	fa09 f303 	lsl.w	r3, r9, r3
 8010654:	4313      	orrs	r3, r2
 8010656:	9304      	str	r3, [sp, #16]
 8010658:	46a2      	mov	sl, r4
 801065a:	e7d2      	b.n	8010602 <_vfiprintf_r+0xc6>
 801065c:	9b03      	ldr	r3, [sp, #12]
 801065e:	1d19      	adds	r1, r3, #4
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	9103      	str	r1, [sp, #12]
 8010664:	2b00      	cmp	r3, #0
 8010666:	bfbb      	ittet	lt
 8010668:	425b      	neglt	r3, r3
 801066a:	f042 0202 	orrlt.w	r2, r2, #2
 801066e:	9307      	strge	r3, [sp, #28]
 8010670:	9307      	strlt	r3, [sp, #28]
 8010672:	bfb8      	it	lt
 8010674:	9204      	strlt	r2, [sp, #16]
 8010676:	7823      	ldrb	r3, [r4, #0]
 8010678:	2b2e      	cmp	r3, #46	@ 0x2e
 801067a:	d10a      	bne.n	8010692 <_vfiprintf_r+0x156>
 801067c:	7863      	ldrb	r3, [r4, #1]
 801067e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010680:	d132      	bne.n	80106e8 <_vfiprintf_r+0x1ac>
 8010682:	9b03      	ldr	r3, [sp, #12]
 8010684:	1d1a      	adds	r2, r3, #4
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	9203      	str	r2, [sp, #12]
 801068a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801068e:	3402      	adds	r4, #2
 8010690:	9305      	str	r3, [sp, #20]
 8010692:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801075c <_vfiprintf_r+0x220>
 8010696:	7821      	ldrb	r1, [r4, #0]
 8010698:	2203      	movs	r2, #3
 801069a:	4650      	mov	r0, sl
 801069c:	f7ef fd70 	bl	8000180 <memchr>
 80106a0:	b138      	cbz	r0, 80106b2 <_vfiprintf_r+0x176>
 80106a2:	9b04      	ldr	r3, [sp, #16]
 80106a4:	eba0 000a 	sub.w	r0, r0, sl
 80106a8:	2240      	movs	r2, #64	@ 0x40
 80106aa:	4082      	lsls	r2, r0
 80106ac:	4313      	orrs	r3, r2
 80106ae:	3401      	adds	r4, #1
 80106b0:	9304      	str	r3, [sp, #16]
 80106b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106b6:	482a      	ldr	r0, [pc, #168]	@ (8010760 <_vfiprintf_r+0x224>)
 80106b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80106bc:	2206      	movs	r2, #6
 80106be:	f7ef fd5f 	bl	8000180 <memchr>
 80106c2:	2800      	cmp	r0, #0
 80106c4:	d03f      	beq.n	8010746 <_vfiprintf_r+0x20a>
 80106c6:	4b27      	ldr	r3, [pc, #156]	@ (8010764 <_vfiprintf_r+0x228>)
 80106c8:	bb1b      	cbnz	r3, 8010712 <_vfiprintf_r+0x1d6>
 80106ca:	9b03      	ldr	r3, [sp, #12]
 80106cc:	3307      	adds	r3, #7
 80106ce:	f023 0307 	bic.w	r3, r3, #7
 80106d2:	3308      	adds	r3, #8
 80106d4:	9303      	str	r3, [sp, #12]
 80106d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106d8:	443b      	add	r3, r7
 80106da:	9309      	str	r3, [sp, #36]	@ 0x24
 80106dc:	e76a      	b.n	80105b4 <_vfiprintf_r+0x78>
 80106de:	fb0c 3202 	mla	r2, ip, r2, r3
 80106e2:	460c      	mov	r4, r1
 80106e4:	2001      	movs	r0, #1
 80106e6:	e7a8      	b.n	801063a <_vfiprintf_r+0xfe>
 80106e8:	2300      	movs	r3, #0
 80106ea:	3401      	adds	r4, #1
 80106ec:	9305      	str	r3, [sp, #20]
 80106ee:	4619      	mov	r1, r3
 80106f0:	f04f 0c0a 	mov.w	ip, #10
 80106f4:	4620      	mov	r0, r4
 80106f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106fa:	3a30      	subs	r2, #48	@ 0x30
 80106fc:	2a09      	cmp	r2, #9
 80106fe:	d903      	bls.n	8010708 <_vfiprintf_r+0x1cc>
 8010700:	2b00      	cmp	r3, #0
 8010702:	d0c6      	beq.n	8010692 <_vfiprintf_r+0x156>
 8010704:	9105      	str	r1, [sp, #20]
 8010706:	e7c4      	b.n	8010692 <_vfiprintf_r+0x156>
 8010708:	fb0c 2101 	mla	r1, ip, r1, r2
 801070c:	4604      	mov	r4, r0
 801070e:	2301      	movs	r3, #1
 8010710:	e7f0      	b.n	80106f4 <_vfiprintf_r+0x1b8>
 8010712:	ab03      	add	r3, sp, #12
 8010714:	9300      	str	r3, [sp, #0]
 8010716:	462a      	mov	r2, r5
 8010718:	4b13      	ldr	r3, [pc, #76]	@ (8010768 <_vfiprintf_r+0x22c>)
 801071a:	a904      	add	r1, sp, #16
 801071c:	4630      	mov	r0, r6
 801071e:	f7fd fc8b 	bl	800e038 <_printf_float>
 8010722:	4607      	mov	r7, r0
 8010724:	1c78      	adds	r0, r7, #1
 8010726:	d1d6      	bne.n	80106d6 <_vfiprintf_r+0x19a>
 8010728:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801072a:	07d9      	lsls	r1, r3, #31
 801072c:	d405      	bmi.n	801073a <_vfiprintf_r+0x1fe>
 801072e:	89ab      	ldrh	r3, [r5, #12]
 8010730:	059a      	lsls	r2, r3, #22
 8010732:	d402      	bmi.n	801073a <_vfiprintf_r+0x1fe>
 8010734:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010736:	f7fe fbb9 	bl	800eeac <__retarget_lock_release_recursive>
 801073a:	89ab      	ldrh	r3, [r5, #12]
 801073c:	065b      	lsls	r3, r3, #25
 801073e:	f53f af1f 	bmi.w	8010580 <_vfiprintf_r+0x44>
 8010742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010744:	e71e      	b.n	8010584 <_vfiprintf_r+0x48>
 8010746:	ab03      	add	r3, sp, #12
 8010748:	9300      	str	r3, [sp, #0]
 801074a:	462a      	mov	r2, r5
 801074c:	4b06      	ldr	r3, [pc, #24]	@ (8010768 <_vfiprintf_r+0x22c>)
 801074e:	a904      	add	r1, sp, #16
 8010750:	4630      	mov	r0, r6
 8010752:	f7fd ffb5 	bl	800e6c0 <_printf_i>
 8010756:	e7e4      	b.n	8010722 <_vfiprintf_r+0x1e6>
 8010758:	08011487 	.word	0x08011487
 801075c:	0801148d 	.word	0x0801148d
 8010760:	08011491 	.word	0x08011491
 8010764:	0800e039 	.word	0x0800e039
 8010768:	08010517 	.word	0x08010517

0801076c <_raise_r>:
 801076c:	291f      	cmp	r1, #31
 801076e:	b538      	push	{r3, r4, r5, lr}
 8010770:	4605      	mov	r5, r0
 8010772:	460c      	mov	r4, r1
 8010774:	d904      	bls.n	8010780 <_raise_r+0x14>
 8010776:	2316      	movs	r3, #22
 8010778:	6003      	str	r3, [r0, #0]
 801077a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801077e:	bd38      	pop	{r3, r4, r5, pc}
 8010780:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010782:	b112      	cbz	r2, 801078a <_raise_r+0x1e>
 8010784:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010788:	b94b      	cbnz	r3, 801079e <_raise_r+0x32>
 801078a:	4628      	mov	r0, r5
 801078c:	f000 f830 	bl	80107f0 <_getpid_r>
 8010790:	4622      	mov	r2, r4
 8010792:	4601      	mov	r1, r0
 8010794:	4628      	mov	r0, r5
 8010796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801079a:	f000 b817 	b.w	80107cc <_kill_r>
 801079e:	2b01      	cmp	r3, #1
 80107a0:	d00a      	beq.n	80107b8 <_raise_r+0x4c>
 80107a2:	1c59      	adds	r1, r3, #1
 80107a4:	d103      	bne.n	80107ae <_raise_r+0x42>
 80107a6:	2316      	movs	r3, #22
 80107a8:	6003      	str	r3, [r0, #0]
 80107aa:	2001      	movs	r0, #1
 80107ac:	e7e7      	b.n	801077e <_raise_r+0x12>
 80107ae:	2100      	movs	r1, #0
 80107b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80107b4:	4620      	mov	r0, r4
 80107b6:	4798      	blx	r3
 80107b8:	2000      	movs	r0, #0
 80107ba:	e7e0      	b.n	801077e <_raise_r+0x12>

080107bc <raise>:
 80107bc:	4b02      	ldr	r3, [pc, #8]	@ (80107c8 <raise+0xc>)
 80107be:	4601      	mov	r1, r0
 80107c0:	6818      	ldr	r0, [r3, #0]
 80107c2:	f7ff bfd3 	b.w	801076c <_raise_r>
 80107c6:	bf00      	nop
 80107c8:	2000411c 	.word	0x2000411c

080107cc <_kill_r>:
 80107cc:	b538      	push	{r3, r4, r5, lr}
 80107ce:	4d07      	ldr	r5, [pc, #28]	@ (80107ec <_kill_r+0x20>)
 80107d0:	2300      	movs	r3, #0
 80107d2:	4604      	mov	r4, r0
 80107d4:	4608      	mov	r0, r1
 80107d6:	4611      	mov	r1, r2
 80107d8:	602b      	str	r3, [r5, #0]
 80107da:	f7f1 fae6 	bl	8001daa <_kill>
 80107de:	1c43      	adds	r3, r0, #1
 80107e0:	d102      	bne.n	80107e8 <_kill_r+0x1c>
 80107e2:	682b      	ldr	r3, [r5, #0]
 80107e4:	b103      	cbz	r3, 80107e8 <_kill_r+0x1c>
 80107e6:	6023      	str	r3, [r4, #0]
 80107e8:	bd38      	pop	{r3, r4, r5, pc}
 80107ea:	bf00      	nop
 80107ec:	20008d14 	.word	0x20008d14

080107f0 <_getpid_r>:
 80107f0:	f7f1 bad4 	b.w	8001d9c <_getpid>

080107f4 <_init>:
 80107f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107f6:	bf00      	nop
 80107f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107fa:	bc08      	pop	{r3}
 80107fc:	469e      	mov	lr, r3
 80107fe:	4770      	bx	lr

08010800 <_fini>:
 8010800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010802:	bf00      	nop
 8010804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010806:	bc08      	pop	{r3}
 8010808:	469e      	mov	lr, r3
 801080a:	4770      	bx	lr
